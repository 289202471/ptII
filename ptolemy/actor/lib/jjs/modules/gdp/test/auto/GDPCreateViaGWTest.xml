<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="GDPCreateViaGWTest" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="15">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="68.0, 32.0">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={129, 67, 1377, 841}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1143, 731]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0853325806755103">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{536.9598214285714, 336.337890625}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Delete leading/trailng whitespace.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[145.0, 340.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Create a logname by &#10;appending a pseudo-random &#10;number to a name.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[190.0, 555.0]">
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Test Create via GDP RESTful gateway.  &#10;Note this test creates logs.  To avoid extra logs, feel free to delete anything with &quot;deleteme&quot; in the name.&#10;E.g., edu.berkeley.eecs.ectest.deleteme259433&#10;&#10;This test requires authorization (username:password encoded to base 64).  &#10;Please place your encoded authorization string in a file named GDPAuthorization.txt in the same directory.&#10;The authorization string will look something like: dXQlcm1hbWU6cGFzc3jvcmQ=&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[150.0, 15.0]">
        </property>
    </property>
    <property name="Annotation4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.4,0.4,0.4,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Nitesh Mor, Elizabeth Osyk">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, 645.0]">
        </property>
    </property>
    <entity name="GDPCreateViaGW" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Create a Global Data Plane log via a gateway.&#10;&#10;// Copyright (c) 2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Create a log via a gateway.&#10; *&#10; *  Use with caution; we do not have a good way of cleanup yet.&#10; *&#10; *  Composite accessor generated by CapeCode.  Comment added manually.&#10; *&#10; *  @accessor gdp/GDPCreateViaGW&#10; *&#10; *  @author Nitesh Mor (mor@eecs.berkeley.edu)&#10; *  @parameter {string} gateway The full gateway address that should be &#10; *   used. An example is 'https://gdp-rest-01.eecs.berkeley.edu'&#10; *  @parameter {string} auth The base64 encoded authentication information&#10; *   for the given gateway. For the moment, only basic authentication is&#10; *   supported. For a 'username:password' pair, this will look something&#10; *   like 'dXNlcm5hbWU6cGFzc3dvcmQ='. &#10; *&#10; *  @input {} trigger A trigger&#10; *  @input {string} logname The name of the log that we should create. If&#10; *   empty, a random name is generated. Log creation is still one of the&#10; *   not-quite-polished parts of the GDP; this may result in surprises at&#10; *   the moment in situations of partial network outages.&#10; *  @input {string} logdname The name of the logserver where this log&#10; *   should be placed. The logdname is in the same namespace as a logname,&#10; *   i.e. a GDP name. For the moment, there are four GDP log servers run&#10; *   by the GDP group. They are named: 'edu.berkeley.eecs.gdp-04.gdplogd',&#10; *   'edu.berkeley.eecs.gdp-03.gdplogd', 'edu.berkeley.eecs.gdp-02.gdplogd',&#10; *   'edu.berkeley.eecs.gdp-01.gdplogd'. If ommitted, one of these four log&#10; *   servers is picked randomly.&#10; *  @input {JSON} options A list of other options supported by the REST&#10; *   gateway, i.e. &quot;-C&quot;, &quot;-h&quot;, &quot;-k&quot;, &quot;-b&quot;, and &quot;-c&quot;. The name of the&#10; *   the logserver is already specified in the input *logdname*.&#10; *&#10; *  @output {string} _logname The name of the log that was created.&#10; *  @output {string} _logdname The name of the server that the log was&#10; *   created on.&#10; *&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals exports */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;exports.setup = function() {&#10;    //  This composite accessor was created by Cape Code.&#10;    //  To run the code, run: &#10;    //  (cd $PTII/org/terraswarm/accessor/accessors/web/cg; node ../hosts/node/nodeHostInvoke.js cg/GDPCreateViaGW)&#10;    //  To regenerate this composite accessor, run:&#10;    //  $PTII/bin/ptinvoke ptolemy.cg.kernel.generic.accessor.AccessorCodeGenerator -language accessor $PTII/ptolemy/actor/lib/jjs/modules/gdp/composite/GDPCreateViaGW.xml&#10;    //  to edit the model, run:&#10;    //  $PTII/bin/capecode $PTII/ptolemy/actor/lib/jjs/modules/gdp/composite/GDPCreateViaGW.xml&#10;&#10;    // Ports: GDPCreateViaGW: ptolemy/cg/adapter/generic/accessor/adapters/ptolemy/actor/TypedCompositeActor.java&#10;    this.input('gateway'); // Type was unknown.&#10;    this.input('auth'); // Type was unknown.&#10;    this.input('trigger'); // Type was unknown.&#10;    this.input('logname'); // Type was unknown.&#10;    this.input('logdname'); // Type was unknown.&#10;    this.input('options'); // Type was unknown.&#10;    this.output('_logname', {'type':'string'});&#10;    this.output('_logdname', {'type':'string'});&#10;&#10;    // Start: InputParser: ptolemy/cg/adapter/generic/accessor/adapters/ptolemy/actor/lib/jjs/JavaScript.java&#10;    // FIXME: See instantiate() in accessors/web/hosts/common/commonHost.js&#10;    // We probably need to do something with the bindings.&#10;    var InputParser = this.instantiateFromCode('InputParser', '// Put your JavaScript program here.\n// Add ports and parameters.\n// Define JavaScript functions initialize(), fire(), and/or wrapup().\n// Refer to parameters in scope using dollar-sign{parameterName}.\n// In the fire() function, use get(parameterName, channel) to read inputs.\n// Send to output ports using send(value, portName, channel).\n\nexports.setup = function() {\n        this.input(\'gateway\', {\'type\': \'string\'});\n    this.input(\'auth\', {\'type\': \'string\', \'default\': \'\'}); \n    this.input(\'trigger\');\n    this.input(\'logname\', {\'type\': \'string\'});\n    this.input(\'logdname\', {\'type\': \'string\'});\n    this.input(\'options\', {\'type\': \'JSON\'});\n    this.output(\'RESTOptions\', {\'type\': \'string\'});\n    this.output(\'RESTBody\', {\'type\': \'string\'});\n};\n\nexports.initialize = function() {\n        var self = this;\n        this.addInputHandler(\'trigger\', function() {\n                var gateway = this.get(\'gateway\');\n        var auth = this.get(\'auth\');\n        var logname = this.get(\'logname\'); \n        var logdname = this.get(\'logdname\'); \n        var options = this.get(\'options\'); \n        console.log(\'Using gateway: \' + gateway +  \n                \', auth: \' + auth +\n                \', logname: \' + logname +  \n                \', logdname: \' + logdname +  \n                \', options: \' + JSON.stringify(options)); \n        var _RESTOptions = new Object();\n        var _RESTBody = new Object(); \n       \n        _RESTOptions.url = gateway + \'/gdp/v1/gcl\'; \n        _RESTOptions.headers = new Object();\n        _RESTOptions.headers[\'Content-Type\'] = \'application/json\'; \n        \n        if (auth != \'\') {\n                _RESTOptions.headers.Authorization = \'Basic \' + auth;\n        }\n        \n        if (options !== null &amp;&amp; typeof options !== \'undefined\') {\n                for (key in options) { \n                        _RESTBody[key] = options[key];  \n                }\n                }\n        \n        if (logname === null || typeof logname === \'undefined\') {\n                _RESTOptions.method = \'POST\';\n                _RESTBody[\'external-name\'] = null; \n        } else {\n                _RESTOptions.method = \'PUT\'; \n                _RESTBody[\'external-name\'] = logname; \n        }\n        \n        if (logdname !== null &amp;&amp; typeof logdname !== \'undefined\' &amp;&amp; \n                        logdname.length &gt; 0) {\n                _RESTBody[\'-s\'] = logdname; \n        }\n        this.send(\'RESTOptions\', JSON.stringify(_RESTOptions));\n        console.log(JSON.stringify(_RESTOptions));\n        this.send(\'RESTBody\', JSON.stringify(_RESTBody)); \n        console.log(JSON.stringify(_RESTBody));\n        });\n};\n\n');&#10;&#10;    // Start: OutputParser: ptolemy/cg/adapter/generic/accessor/adapters/ptolemy/actor/lib/jjs/JavaScript.java&#10;    // FIXME: See instantiate() in accessors/web/hosts/common/commonHost.js&#10;    // We probably need to do something with the bindings.&#10;    var OutputParser = this.instantiateFromCode('OutputParser', '// Put your JavaScript program here.\n// Add ports and parameters.\n// Define JavaScript functions initialize(), fire(), and/or wrapup().\n// Refer to parameters in scope using dollar-sign{parameterName}.\n// In the fire() function, use get(parameterName, channel) to read inputs.\n// Send to output ports using send(value, portName, channel).\n\nexports.setup = function() {\n        this.input(\'response\', {\'type\': \'string\'});\n    this.input(\'status\', {\'type\': \'string\'});\n    this.input(\'headers\', {\'type\': \'JSON\'});\n    this.output(\'_logname\', {\'type\': \'string\'});\n    this.output(\'_logdname\', {\'type\': \'string\'});\n};\n\nexports.initialize = function() {\n        var self = this;\n        this.addInputHandler(\'response\', function() {\n                var status = self.get(\'status\');\n            var headers = self.get(\'headers\');\n            var response = self.get(\'response\');\n            console.log(\'Status: \' + status);\n            console.log(\'Headers: \' + JSON.stringify(headers));\n            console.log(\'Response: \' + response);\n            if (status != \'201: Created\') { \n                    var errorstring = status;\n                errorstring += JSON.stringify(headers);\n                errorstring += response;\n                error(errorstring);\n            } else {\n                    var resp = JSON.parse(response);\n                self.send(\'_logname\', resp[\'gcl_name\']);\n                self.send(\'_logdname\', resp[\'gdplogd_name\']);\n            }\n        });\n};\n');&#10;&#10;    // Start: REST: ptolemy/cg/adapter/generic/accessor/adapters/org/terraswarm/accessor/JSAccessor.java&#10;    // The script has local modifications, so it is being emitted.&#10;&#10;    // Start: REST: ptolemy/cg/adapter/generic/accessor/adapters/ptolemy/actor/lib/jjs/JavaScript.java&#10;    // FIXME: See instantiate() in accessors/web/hosts/common/commonHost.js&#10;    // We probably need to do something with the bindings.&#10;    var REST = this.instantiateFromCode('REST', '// Accessor for  Representational State Transfer (RESTful) interfaces.\n\n// Copyright (c) 2015-2017 The Regents of the University of California.\n// All rights reserved.\n//\n// Permission is hereby granted, without written agreement and without\n// license or royalty fees, to use, copy, modify, and distribute this\n// software and its documentation for any purpose, provided that the above\n// copyright notice and the following two paragraphs appear in all copies\n// of this software.\n//\n// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY\n// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\n// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF\n// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF\n// SUCH DAMAGE.\n//\n// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,\n// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE\n// PROVIDED HEREUNDER IS ON AN \&quot;AS IS\&quot; BASIS, AND THE UNIVERSITY OF\n// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,\n// ENHANCEMENTS, OR MODIFICATIONS.\n//\n\n/** Accessor for RESTful interfaces.\n *  Upon receipt of a trigger input, this accessor will issue an HTTP request\n *  specified by the inputs. Some time later, the accessor will receive a response\n *  from the server or a timeout. In the first case, the accessor will produce\n *  the response (body, status code, and headers) on output ports.\n *  In the second case, it will produce a nil output on the response port\n *  and an error.\n *\n *  The accessor does not block waiting for the response, but any additional\n *  triggered requests will be queued to be issued only after the pending request\n *  has received either a response or a timeout. This strategy ensures that outputs\n *  from this accessor are produced in the same order as the inputs that trigger the\n *  HTTP requests.\n *\n *  The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)\n *  or an object with the following fields:\n *  &lt;ul&gt;\n *  &lt;li&gt; headers: An object containing request headers. By default this\n *       is an empty object. Items may have a value that is an array of values,\n *       for headers with more than one value.\n *  &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around\n *       in a pool to be used by other requests in the future. This defaults to false.\n *  &lt;li&gt; method: A string specifying the HTTP request method.\n *       This defaults to \'GET\', but can also be \'PUT\', \'POST\', \'DELETE\', etc.\n *  &lt;li&gt; url: A string that can be parsed as a URL, or an object containing\n *       the following fields:\n *       &lt;ul&gt;\n *       &lt;li&gt; host: A string giving the domain name or IP address of\n *            the server to issue the request to. This defaults to \'localhost\'.\n *       &lt;li&gt; protocol: The protocol. This is a string that defaults to \'http\'.\n *       &lt;li&gt; port: Port of remote server. This defaults to 80.\n *       &lt;/ul&gt;\n *  &lt;/ul&gt;\n *\n *  For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to\n *  &lt;code&gt;\n *  {\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/x-www-form-urlencoded\&quot;}, \&quot;method\&quot;:\&quot;POST\&quot;, \&quot;url\&quot;:\&quot;...\&quot;}\n *  &lt;/code&gt;\n *\n *  In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended\n *  as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults\n *  to the empty string.\n *\n *  The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query\n *  string to append to the url, for example \'?arg=value\'. If the value contains\n *  characters that are not allowed in a URL, such as spaces, they will encoded\n *  according to the ASCII standard, see http://www.w3schools.com/tags/ref_urlencode.asp .\n *\n *  A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided\n *  on the trigger input is ignored.\n *\n *  The output response will be a string if the MIME type of the accessed page\n *  begins with \&quot;text\&quot;. If the MIME type begins with anything else, then the\n *  binary data will be produced. It is up to the host implementation to ensure\n *  that the data is given in some form that is usable by downstream accessors\n *  or actors.\n *\n *  The parameter \'timeout\' specifies how long this accessor will wait for response.\n *  If it does not receive the response by the specified time, then it will issue\n *  a null response output and an error event (calling the error() function of the host).\n *\n *  If the parameter \'outputCompleteResponseOnly\' is true (the default), then this\n *  accessor will produce a \'response\' output only upon receiving a complete response.\n *  If it is false, then multiple outputs may result from a single input or trigger.\n *\n *  @accessor net/REST\n *  @author Edward A. Lee (eal@eecs.berkeley.edu), contributor: Christopher Brooks\n *  @input {JSON} options The url for the command or an object specifying options.\n *  @input {string} command The command.\n *  @input {JSON} arguments Arguments to the command.\n *  @input body The request body, if any.  This supports at least strings and image data.\n *  @input trigger An input to trigger the command.\n *  @output {string} response The server\'s response.\n *  @output {string} status The status code and message of the response.\n *  @output headers The headers sent with the response.\n *  @parameter {int} timeout The amount of time (in milliseconds) to wait for a response\n *   before triggering a null response and an error. This defaults to 5000.\n *  @parameter {boolean} outputCompleteResponseOnly If true (the default), the produce a\n *   \'response\' output only upon receiving the entire response.\n *  @version $$Id: REST.js 2037 2017-08-13 13:54:26Z beth@berkeley.edu $$\n */\n\n// Stop extra messages from jslint and jshint.  Note that there should\n// be no space between the / and the * and global. See\n// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */\n/*globals addInputHandler, error, exports, get, input, output, parameter, require, send */\n/*jshint globalstrict: true*/\n\'use strict\';\n\nvar httpClient = require(\'@accessors-modules/http-client\');\nvar querystring = require(\'querystring\');\n\n/** Define inputs and outputs. */\nexports.setup = function () {\n    this.input(\'options\', {\n            \'type\': \'JSON\',        // Note that string literals are valid JSON.\n        \'value\': \'\'\n    });\n    this.input(\'command\', {\n        \'type\': \'string\',\n        \'value\': \'\'\n    });\n    this.input(\'arguments\', {\n        \'type\': \'JSON\',\n        \'value\': \'\'\n    });\n    this.input(\'trigger\');\n    this.input(\'body\');\n    this.output(\'response\');\n    this.output(\'status\', {\n        \'type\': \'string\'\n    });\n    this.output(\'headers\');\n    this.parameter(\'timeout\', {\n        \'value\': 5000,\n        \'type\': \'int\'\n    });\n    this.parameter(\'outputCompleteResponseOnly\', {\n        \'value\': true,\n        \'type\': \'boolean\'\n    });\n};\n\n/** Build the path from the command and arguments.\n *  This default implementation returns \'command?args\', where\n *  args is an encoding of the arguments input for embedding in a URL.\n *  For example, if the arguments input is the object\n *     ```{ foo: \'bar\', baz: [\'qux\', \'quux\'], corge: \'\' }```\n *  then the returned string will be\n *     ```command?foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=```\n *  Derived accessors may override this function to customize\n *  the interaction. The returned string should not include a leading \'/\'.\n *  That will be added automatically.\n */\nexports.encodePath = function () {\n    // Remove any leading slash that might be present.\n        var re = new RegExp(\'^\/\');\n        var command = this.get(\'command\').replace(re, \'\');\n    // Encode any characters that are not allowed in a URL.\n    var encodedArgs = querystring.stringify(this.get(\'arguments\'));\n    if (encodedArgs) {\n        return command + \'?\' + encodedArgs;\n    }\n    return command;\n};\n\n/** Filter the response. This base class just returns the argument\n *  unmodified, but derived classes can override this to extract\n *  a portion of the response, for example. Note that the response\n *  argument can be null, indicating that there was no response\n *  (e.g., a timeout or error occurred).\n *  @param response The response, or null if there is none.\n */\nexports.filterResponse = function (response) {\n    return response;\n};\n\n// Keep track of pending HTTP request so it can be stopped if the\n// model stops executing.\nvar request;\n\n/** Issue the command based on the current value of the inputs.\n *  This constructs a path using encodePath and combines it with the\n *  url input to construct the full command.\n *  @param callback The callback function that will be called with the\n *   response as an argument (an instance of IncomingMessage, defined in\n *   the httpClient module).\n */\nexports.issueCommand = function (callback) {\n    var encodedPath = this.exports.encodePath.call(this);\n    var options = this.get(\'options\');\n    var body = this.get(\'body\');\n    var command = options;\n    if (typeof options === \'string\') {\n        // In order to be able to include the outputCompleteResponseOnly\n        // option, we have to switch styles here.\n        command = {};\n        if (encodedPath) {\n            command.url = options + \'/\' + encodedPath;\n        } else {\n            command.url = options;\n        }\n    } else {\n        // Don\'t use command = options, because otherwise if we invoke\n        // this accessor multiple times, then options.url will be\n        // appended to each time.  Instead, do a deep clone.\n        command = JSON.parse(JSON.stringify(options));\n        if (typeof options.url === \'string\') {\n            command.url = options.url + \'/\' + encodedPath;\n        } else {\n            command.url.path = \'/\' + encodedPath;\n        }\n    }\n    command.timeout = this.getParameter(\'timeout\');\n\n    if (this.getParameter(\'outputCompleteResponseOnly\') === false) {\n        command.outputCompleteResponseOnly = false;\n    }\n\n    if (typeof body !== \'undefined\') {\n        command.body = body;\n    }\n\n     console.log(\&quot;REST.js issueCommand(): request to: \&quot; + JSON.stringify(command));\n        console.log(util.inspect(command));\n    \n    request = httpClient.request(command, callback);\n    request.on(\'error\', function (message) {\n        if (!message) {\n            message = \'Request failed. No further information.\';\n        }\n        error(message);\n    });\n    request.end();\n};\n\n/** Handle the response from the RESTful service. The argument\n *  is expected to be be an instance of IncomingMessage, defined\n *  in the httpClient module. This base class extracts the body\n *  field of the message, if there is one, and produces that on\n *  the \'response\' output, and otherwise just produces the message\n *  on the output. If the argument is null or undefined, then do\n *  nothing.\n *  @param message An incoming message.\n */\nexports.handleResponse = function (message) {\n    // Assume that if the response is null, an error will be signaled.\n    if (message !== null &amp;&amp; typeof message !== \'undefined\') {\n        // Handle redirects by creating a new command and making a new\n        // request.  This is similar to issueCommand().\n        // The encodedPath is already in the URL, so we dont need to append it here.\n        if (message.statusCode &amp;&amp; message.statusCode &gt;= 300 &amp;&amp; message.statusCode &lt;= 308 &amp;&amp; message.statusCode != 306) {\n            var body = this.get(\'body\');\n            var options = this.get(\'options\');\n            var command = options;\n\n            if (typeof options === \'string\') {\n                // In order to be able to include the outputCompleteResponseOnly\n                // option, we have to switch styles here.\n                command = {};\n                command.url = message.headers.location;\n            } else {\n                // Don\'t use command = options, because otherwise if we invoke\n                // this accessor multiple times, then options.url will be\n                // appended to each time.  Instead, do a deep clone.\n                command = JSON.parse(JSON.stringify(options));\n                command.url = message.headers.location;\n            }\n            command.timeout = this.getParameter(\'timeout\');\n\n            if (this.getParameter(\'outputCompleteResponseOnly\') === false) {\n                command.outputCompleteResponseOnly = false;\n            }\n\n            if (typeof body !== \'undefined\') {\n                command.body = body;\n            }\n\n            request = httpClient.request(\n                command,\n                this.exports.handleResponse.bind(this));\n            request.end();\n\n        } else {\n            if (message.body) {\n                this.send(\'response\', this.exports.filterResponse.call(this, message.body));\n            } else {\n                this.send(\'response\', this.exports.filterResponse.call(this, message));\n            }\n\n            if (message.statusCode) {\n                this.send(\'status\', message.statusCode + \': \' + message.statusMessage);\n            }\n            if (message.headers) {\n                this.send(\'headers\', message.headers);\n            }\n        }\n    }\n};\n\n/** Register the input handler.  */\nexports.initialize = function () {\n    // Upon receiving a trigger input, issue a command.\n    this.addInputHandler(\'trigger\',\n                         this.exports.issueCommand.bind(this),\n                         this.exports.handleResponse.bind(this));\n};\n\n/** Upon wrapup, stop handling new inputs.  */\nexports.wrapup = function () {\n    // In case there is streaming data coming in, stop it.\n    if (request) {\n        request.stop();\n        request = null;\n    }\n};\n');&#10;    REST.setDefault('options', &quot;&quot;);&#10;    REST.setDefault('command', &quot;&quot;);&#10;    REST.setDefault('arguments', &quot;&quot;);&#10;    REST.setParameter('timeout', 5000);&#10;    REST.setParameter('outputCompleteResponseOnly', true);&#10;&#10;    // Connections: GDPCreateViaGW: ptolemy/cg/adapter/generic/accessor/adapters/ptolemy/actor/TypedCompositeActor.java&#10;    this.connect('gateway', InputParser, 'gateway');&#10;    this.connect('auth', InputParser, 'auth');&#10;    this.connect('trigger', InputParser, 'trigger');&#10;    this.connect('trigger', REST, 'trigger');&#10;    this.connect('logname', InputParser, 'logname');&#10;    this.connect('logdname', InputParser, 'logdname');&#10;    this.connect('options', InputParser, 'options');&#10;    this.connect(OutputParser, '_logname', '_logname');&#10;    this.connect(OutputParser, '_logdname', '_logdname');&#10;    this.connect(REST, 'response', OutputParser, 'response');&#10;    this.connect(REST, 'status', OutputParser, 'status');&#10;    this.connect(REST, 'headers', OutputParser, 'headers');&#10;    this.connect(InputParser, 'RESTOptions', REST, 'options');&#10;    this.connect(InputParser, 'RESTBody', REST, 'body');&#10;};&#10;&#10;// The stopTime parameter of the directory in the model was 0, so this.stopAt() is not being generated.&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/gdp/GDPCreateViaGW.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{525.0, 310.0}">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Create a log via a gateway.&lt;/p&gt;&#10;&lt;p&gt; Use with caution; we do not have a good way of cleanup yet.&lt;/p&gt;&#10;&lt;p&gt; Composite accessor generated by CapeCode.  Comment added manually.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Nitesh Mor (mor@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="A trigger">
            </property>
            <property name="logname (port)" class="ptolemy.kernel.util.StringAttribute" value="The name of the log that we should create. If&#10;  empty, a random name is generated. Log creation is still one of the&#10;  not-quite-polished parts of the GDP; this may result in surprises at&#10;  the moment in situations of partial network outages.">
            </property>
            <property name="logdname (port)" class="ptolemy.kernel.util.StringAttribute" value="The name of the logserver where this log&#10;  should be placed. The logdname is in the same namespace as a logname,&#10;  i.e. a GDP name. For the moment, there are four GDP log servers run&#10;  by the GDP group. They are named: 'edu.berkeley.eecs.gdp-04.gdplogd',&#10;  'edu.berkeley.eecs.gdp-03.gdplogd', 'edu.berkeley.eecs.gdp-02.gdplogd',&#10;  'edu.berkeley.eecs.gdp-01.gdplogd'. If ommitted, one of these four log&#10;  servers is picked randomly.">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="A list of other options supported by the REST&#10;  gateway, i.e. &quot;-C&quot;, &quot;-h&quot;, &quot;-k&quot;, &quot;-b&quot;, and &quot;-c&quot;. The name of the&#10;  the logserver is already specified in the input *logdname*.">
            </property>
            <property name="_logname (port)" class="ptolemy.kernel.util.StringAttribute" value="The name of the log that was created.">
            </property>
            <property name="_logdname (port)" class="ptolemy.kernel.util.StringAttribute" value="The name of the server that the log was&#10;  created on.">
            </property>
            <property name="gateway (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The full gateway address that should be &#10;  used. An example is 'https://gdp-rest-01.eecs.berkeley.edu'">
            </property>
            <property name="auth (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The base64 encoded authentication information&#10;  for the given gateway. For the moment, only basic authentication is&#10;  supported. For a 'username:password' pair, this will look something&#10;  like 'dXNlcm5hbWU6cGFzc3dvcmQ='.">
            </property>
        </property>
        <port name="gateway" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="auth" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="logname" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="logdname" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="options" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="_logname" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="_logdname" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="AuthFilename" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Test accessor that spontaneously produces outputs once.&#10;//&#10;// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Test accessor that spontaneously produces outputs once per time interval.&#10; *  This implementation produces a counting sequence.&#10; *&#10; *  @accessor test/TestSpontaneousOnce&#10; *  @parameter delay The delay in milliseconds before the value is outputk.&#10; *  @parameter value The value to be output after the delay.&#10; *  @output output The output port&#10; *  @author Christopher Brooks and Edward A. Lee. Based on TestSpontaneous by Edward A. Lee&#10; *  @version $$Id: TestSpontaneousOnce.js 1659 2017-05-09 14:26:57Z cxh $$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, require, setTimeout */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.parameter('delay', {&#10;        'type': 'number',&#10;        'value': 1000&#10;    });&#10;    this.parameter('value', {&#10;        'value': true&#10;    }); &#10;    this.output('output');&#10;};&#10;&#10;// These variables will not be visible to subclasses.&#10;var handle = null;&#10;&#10;exports.initialize = function () {&#10;    // Need to record 'this' for use in the callback.&#10;    var thiz = this;&#10;    handle = setTimeout(function () {&#10;        thiz.send('output', thiz.getParameter('value'));&#10;    }, this.getParameter('delay'));&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (handle) {&#10;        clearTimeout(handle);&#10;        handle = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TestSpontaneousOnce.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Test accessor that spontaneously produces outputs once per time interval.&#10; This implementation produces a counting sequence.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks and Edward A. Lee. Based on TestSpontaneous by Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: TestSpontaneousOnce.js 1659 2017-05-09 14:26:57Z cxh $$">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The output port">
            </property>
            <property name="delay (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The delay in milliseconds before the value is outputk.">
            </property>
            <property name="value (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The value to be output after the delay.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[85.0, 280.0]">
        </property>
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="FileReader" class="ptolemy.actor.lib.io.FileReader">
        <property name="fileOrURL" class="ptolemy.data.expr.FileParameter" value="GDPAuthorization.txt">
        </property>
        <doc>Read an entire file and output as a string</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[220.0, 290.0]">
        </property>
    </entity>
    <entity name="AuthFormatter" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Put your JavaScript program here.&#10;// Add ports and parameters.&#10;// Define JavaScript functions initialize(), fire(), and/or wrapup().&#10;// Refer to parameters in scope using dollar-sign{parameterName}.&#10;// In the fire() function, use get(parameterName, channel) to read inputs.&#10;// Send to output ports using send(value, portName, channel).&#10;&#10;exports.setup = function() {&#10;	this.input('input');&#10;	this.output('output');&#10;};&#10;&#10;exports.initialize = function() {&#10;	// Delete any leading/trailing whitespace.&#10;	var self = this;&#10;	this.addInputHandler('input', function() {&#10;		self.send('output', self.get('input').trim());&#10;	});&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[310.0, 290.0]">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Gateway" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Test accessor that spontaneously produces outputs once.&#10;//&#10;// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Test accessor that spontaneously produces outputs once per time interval.&#10; *  This implementation produces a counting sequence.&#10; *&#10; *  @accessor test/TestSpontaneousOnce&#10; *  @parameter delay The delay in milliseconds before the value is outputk.&#10; *  @parameter value The value to be output after the delay.&#10; *  @output output The output port&#10; *  @author Christopher Brooks and Edward A. Lee. Based on TestSpontaneous by Edward A. Lee&#10; *  @version $$Id: TestSpontaneousOnce.js 1659 2017-05-09 14:26:57Z cxh $$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, require, setTimeout */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.parameter('delay', {&#10;        'type': 'number',&#10;        'value': 1000&#10;    });&#10;    this.parameter('value', {&#10;        'value': true&#10;    }); &#10;    this.output('output');&#10;};&#10;&#10;// These variables will not be visible to subclasses.&#10;var handle = null;&#10;&#10;exports.initialize = function () {&#10;    // Need to record 'this' for use in the callback.&#10;    var thiz = this;&#10;    handle = setTimeout(function () {&#10;        thiz.send('output', thiz.getParameter('value'));&#10;    }, this.getParameter('delay'));&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (handle) {&#10;        clearTimeout(handle);&#10;        handle = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TestSpontaneousOnce.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Test accessor that spontaneously produces outputs once per time interval.&#10; This implementation produces a counting sequence.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks and Edward A. Lee. Based on TestSpontaneous by Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: TestSpontaneousOnce.js 1659 2017-05-09 14:26:57Z cxh $$">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The output port">
            </property>
            <property name="delay (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The delay in milliseconds before the value is outputk.">
            </property>
            <property name="value (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The value to be output after the delay.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[315.0, 210.0]">
        </property>
        <property name="value" class="ptolemy.data.expr.Parameter" value="&quot;https://gdp-rest-01.eecs.berkeley.edu&quot;">
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Trigger" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Test accessor that spontaneously produces outputs once.&#10;//&#10;// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Test accessor that spontaneously produces outputs once per time interval.&#10; *  This implementation produces a counting sequence.&#10; *&#10; *  @accessor test/TestSpontaneousOnce&#10; *  @parameter delay The delay in milliseconds before the value is outputk.&#10; *  @parameter value The value to be output after the delay.&#10; *  @output output The output port&#10; *  @author Christopher Brooks and Edward A. Lee. Based on TestSpontaneous by Edward A. Lee&#10; *  @version $$Id: TestSpontaneousOnce.js 1659 2017-05-09 14:26:57Z cxh $$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, require, setTimeout */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.parameter('delay', {&#10;        'type': 'number',&#10;        'value': 1000&#10;    });&#10;    this.parameter('value', {&#10;        'value': true&#10;    }); &#10;    this.output('output');&#10;};&#10;&#10;// These variables will not be visible to subclasses.&#10;var handle = null;&#10;&#10;exports.initialize = function () {&#10;    // Need to record 'this' for use in the callback.&#10;    var thiz = this;&#10;    handle = setTimeout(function () {&#10;        thiz.send('output', thiz.getParameter('value'));&#10;    }, this.getParameter('delay'));&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (handle) {&#10;        clearTimeout(handle);&#10;        handle = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TestSpontaneousOnce.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Test accessor that spontaneously produces outputs once per time interval.&#10; This implementation produces a counting sequence.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks and Edward A. Lee. Based on TestSpontaneous by Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: TestSpontaneousOnce.js 1659 2017-05-09 14:26:57Z cxh $$">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The output port">
            </property>
            <property name="delay (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The delay in milliseconds before the value is outputk.">
            </property>
            <property name="value (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The value to be output after the delay.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[85.0, 510.0]">
        </property>
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="delay" class="ptolemy.data.expr.Parameter" value="1000">
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
            </property>
        </port>
    </entity>
    <entity name="RandomLogNameGenerator" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Put your JavaScript program here.&#10;// Add ports and parameters.&#10;// Define JavaScript functions initialize(), fire(), and/or wrapup().&#10;// Refer to parameters in scope using dollar-sign{parameterName}.&#10;// In the fire() function, use get(parameterName, channel) to read inputs.&#10;// Send to output ports using send(value, portName, channel).&#10;&#10;exports.setup = function() {&#10;	this.input('trigger');&#10;	this.output('output');&#10;};&#10;&#10;exports.initialize = function() {&#10;	var self = this;&#10;	this.addInputHandler('trigger', function() {&#10;		var d = new Date();&#10;		var n = d.getTime();&#10;		self.send('output', 'edu.berkeley.eecs.ectest.deleteme' + n % 10000000);&#10;	});&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[235.0, 510.0]">
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TestDisplay" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Display data on the console.&#10;//&#10;// Copyright (c) 2016-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Display data on the console using util.inspect().&#10; *&#10; *  @accessor test/TestDisplay&#10; *  @param input The output&#10; *  @author Christopher Brooks&#10; *  @version $$Id: TestDisplay.js 2003 2017-08-03 14:47:31Z eal $$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals console, error, exports, require */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var util = require('util');&#10;&#10;exports.setup = function () {&#10;    this.input('input');&#10;    this.output('output');&#10;};&#10;&#10;exports.initialize = function () {&#10;    this.addInputHandler('input', function () {&#10;        var inputValue = this.get('input');&#10;        console.log(util.inspect(inputValue));&#10;        this.send('output', inputValue);&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TestDisplay.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Display data on the console using util.inspect().&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: TestDisplay.js 2003 2017-08-03 14:47:31Z eal $$">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[405.0, 510.0]">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Trigger2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Test accessor that spontaneously produces outputs once.&#10;//&#10;// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Test accessor that spontaneously produces outputs once per time interval.&#10; *  This implementation produces a counting sequence.&#10; *&#10; *  @accessor test/TestSpontaneousOnce&#10; *  @parameter delay The delay in milliseconds before the value is outputk.&#10; *  @parameter value The value to be output after the delay.&#10; *  @output output The output port&#10; *  @author Christopher Brooks and Edward A. Lee. Based on TestSpontaneous by Edward A. Lee&#10; *  @version $$Id: TestSpontaneousOnce.js 1659 2017-05-09 14:26:57Z cxh $$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, require, setTimeout */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.parameter('delay', {&#10;        'type': 'number',&#10;        'value': 1000&#10;    });&#10;    this.parameter('value', {&#10;        'value': true&#10;    }); &#10;    this.output('output');&#10;};&#10;&#10;// These variables will not be visible to subclasses.&#10;var handle = null;&#10;&#10;exports.initialize = function () {&#10;    // Need to record 'this' for use in the callback.&#10;    var thiz = this;&#10;    handle = setTimeout(function () {&#10;        thiz.send('output', thiz.getParameter('value'));&#10;    }, this.getParameter('delay'));&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (handle) {&#10;        clearTimeout(handle);&#10;        handle = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TestSpontaneousOnce.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Test accessor that spontaneously produces outputs once per time interval.&#10; This implementation produces a counting sequence.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks and Edward A. Lee. Based on TestSpontaneous by Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: TestSpontaneousOnce.js 1659 2017-05-09 14:26:57Z cxh $$">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The output port">
            </property>
            <property name="delay (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The delay in milliseconds before the value is outputk.">
            </property>
            <property name="value (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The value to be output after the delay.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[340.0, 405.0]">
        </property>
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="delay" class="ptolemy.data.expr.Parameter" value="2000.0">
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
            </property>
        </port>
    </entity>
    <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Put your JavaScript program here.&#10;// Add ports and parameters.&#10;// Define JavaScript functions initialize(), fire(), and/or wrapup().&#10;// Refer to parameters in scope using dollar-sign{parameterName}.&#10;// In the fire() function, use get(parameterName, channel) to read inputs.&#10;// Send to output ports using send(value, portName, channel).&#10;&#10;exports.setup = function() {&#10;	this.input('_logname', {'type' : 'string'});&#10;	this.input('_logdname', {'type' : 'string'});&#10;	this.output('_lognameNotEmpty', {'type' : 'boolean'});&#10;	this.output('_logdnameNotEmpty', {'type' : 'boolean'});&#10;};&#10;&#10;exports.initialize = function() {&#10;	var self = this;&#10;	this.addInputHandler('_logname', function() {&#10;		var logname = self.get('_logname');&#10;		if (logname !== null &amp;&amp; typeof logname !== 'undefined' &amp;&amp;&#10;				logname.length &gt; 0) {&#10;			self.send('_lognameNotEmpty', true);&#10;		} else {&#10;			self.send('_lognameNotEmpty', false);&#10;		}&#10;	});&#10;	&#10;	this.addInputHandler('_logdname', function() {&#10;		var logdname = self.get('_logdname');&#10;		if (logdname !== null &amp;&amp; typeof logdname !== 'undefined' &amp;&amp;&#10;				logdname.length &gt; 0) {&#10;			self.send('_logdnameNotEmpty', true);&#10;		} else {&#10;			self.send('_logdnameNotEmpty', false);&#10;		}&#10;	});&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[685.0, 310.0]">
        </property>
        <port name="_logname" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="_logdname" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="_lognameNotEmpty" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="_logdnameNotEmpty" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TrainableTest" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;/** Compare the input with a known good input.&#10; *  If you set ''trainingMode'' to true and provide inputs, then the&#10; *  inputs will be recorded in the ''correctValues'' parameters.&#10; *  Otherwise, the inputs will be compared against those in the&#10; *  ''correctValue'' parameter.&#10; *&#10; *  @accessor test/TrainableTest&#10; *  @input input The input value.&#10; *  @output output False as long as there is data to compare against the input&#10; *  @param correctValues a JSON array of the correct values.&#10; *  @param trainingMode true if the input is being trained.&#10; *  @author Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee&#10; *  @version $$Id: TrainableTest.js 2058 2017-08-16 23:26:01Z cxh $$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, exports*/&#10;/*jshint globalstrict: true*/&#10;/*jslint plusplus: true */&#10;'use strict';&#10;&#10;exports.setup = function () {&#10;    this.parameter('correctValues', {&#10;        'value': [0]&#10;    });&#10;    this.input('input');&#10;    this.output('output', {&#10;        'type': 'boolean'&#10;    });&#10;    this.parameter('tolerance', {&#10;        'type': 'number',&#10;        'value': 0.000000001&#10;    });&#10;    this.parameter('trainingMode', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;};&#10;&#10;// Input, parameter and variable names match those in $PTII/ptolemy/actor/lib/NonStrictTest.java&#10;&#10;// Set to true if an input is handled.  If no inputs are handled, then&#10;// throw an exception in wrapup().&#10;var inputHandled = false;&#10;&#10;// Set to true when initialize() is called.&#10;var initialized = false;&#10;&#10;// The number of input tokens that have been read in.&#10;var numberOfInputTokensSeen = 0;&#10;&#10;// If trainingMode is true, then inputs that have been seen so far.&#10;var trainingTokens = [];&#10;&#10;// Set to false in initialize() and true at the end of wrapup().&#10;// FIXME: We should have an exit hook that checks that wrapup() is called for all the actors.&#10;var wrappedUp = false;&#10;&#10;// So we can test this in hosts/node/test/mocha/testMain.js to test that wrapup was called.&#10;exports.wrappedUp = wrappedUp;&#10;&#10;/** Create an input handler to compare the input with the appropriate element(s)&#10; *  from correctValues.&#10; */&#10;exports.initialize = function () {&#10;    //console.log(&quot;Test initialize(): typeof correctValues: &quot; + typeof this.getParameter('correctValues'))&#10;    var inputValueValue,&#10;        self = this;&#10;&#10;    trainingTokens = [];&#10;    exports.wrappedUp = false;&#10;    numberOfInputTokensSeen = 0;&#10;&#10;    this.addInputHandler('input', function () {&#10;        var cache = [],&#10;            inputValue = self.get('input'),&#10;            inputValueValue;&#10;        inputHandled = true;&#10;&#10;        // If the input is not connected, then inputValue will be null.&#10;        if (self.getParameter('trainingMode')) {&#10;            trainingTokens.push(inputValue);&#10;            self.send('output', false);&#10;            return;&#10;        }&#10;        var correctValuesValues = self.getParameter('correctValues');&#10;&#10;        if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;            var referenceToken = correctValuesValues[numberOfInputTokensSeen];&#10;            //console.log(&quot;Test: &quot; + numberOfInputTokensSeen + &quot;, input: &quot; + inputValue&#10;            //+ &quot;, referenceToken: &quot; + referenceToken);&#10;            if (typeof inputValue !== 'boolean' &amp;&amp;&#10;                typeof inputValue !== 'number' &amp;&amp;&#10;                typeof inputValue !== 'object' &amp;&amp;&#10;                typeof inputValue !== 'string') {&#10;                if (inputValue === null) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                        ' tokens, the value of the input was null?  ' +&#10;                        'Perhaps the input is not connected?'&#10;                    );&#10;                }&#10;                cache = [];&#10;                inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;                if (inputValueValue.length &gt; 100) {&#10;                    inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                }&#10;                cache = null; // Enable garbage collection&#10;&#10;&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                    ' tokens, the input &quot;' + inputValue +&#10;                    '&quot; is neither a number nor a string, it is a ' +&#10;                    typeof inputValue + ' with value ' + inputValueValue);&#10;            }&#10;            if (typeof referenceToken === 'boolean') {&#10;                // If the input not a boolean, then throw an error.&#10;                if (typeof inputValue !== 'boolean') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a boolean, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;                if (inputValue !== referenceToken) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not equal to &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'number') {&#10;                // If the input not a number, then throw an error.&#10;                if (typeof inputValue !== 'number') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a number, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;&#10;                var difference = Math.abs(inputValue - referenceToken);&#10;                if (isNaN(difference)) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the absolute value of the input &quot;' +&#10;                                    inputValue + '&quot; - the referenceToken &quot;' +&#10;                                    referenceToken + '&quot; is NaN?  It should be less than ' +&#10;                                    self.getParameter('tolerance'));&#10;                }&#10;                if (difference &gt; self.getParameter('tolerance')) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not within &quot;' +&#10;                                    self.getParameter('tolerance') +&#10;                                    '&quot; of the expected value &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'string') {&#10;                if (inputValue !== referenceToken) {&#10;                    // devices/test/auto/WatchEmulator.js needs this test for object because&#10;                    // if we receive a JSON object, then we should try to stringify it.&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = null;&#10;                        try {&#10;                            inputValueValue = JSON.stringify(inputValue);&#10;                        } catch (err) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken + '&quot;.  The input was an object, and a string was expected.');&#10;                        }&#10;                        if (inputValueValue !== referenceToken) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValueValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken +&#10;                                            '&quot;.  The input was an object and JSON.stringify() did not throw an exception.' +&#10;                                            'A string was expected.');&#10;                        }&#10;                    }&#10;                }&#10;            } else if (typeof referenceToken === 'object') {&#10;                cache = [];&#10;                inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;                cache = [];&#10;                var referenceTokenValue = JSON.stringify(referenceToken, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;&#10;                cache = null; // Enable garbage collection&#10;&#10;                // If we are comparing longs from CapeCode, then the values will be like &quot;1L&quot;,&#10;                // and stringify will return undefined.&#10;                if (inputValueValue === undefined) {&#10;                    inputValueValue = inputValue;&#10;                }&#10;                if (referenceTokenValue === undefined) {&#10;                    referenceTokenValue = referenceToken;&#10;                }&#10;&#10;                if (inputValueValue !== referenceTokenValue) {&#10;                    // inputValueValue could still be undefined here if inputValue&#10;                    // was undefined.&#10;                    if (inputValueValue !== undefined &amp;&amp; inputValueValue.length &gt; 100) {&#10;                        inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                    }&#10;                    if (referenceTokenValue !== undefined &amp;&amp; referenceTokenValue.length &gt; 100) {&#10;                        referenceTokenValue = referenceTokenValue.substring(0, 100) + '...';&#10;                    }&#10;                    // Deal with referenceTokens with value 1L.&#10;                    if (typeof inputValueValue !== 'object' || typeof referenceTokenValue !== 'object' &amp;&amp;&#10;                        inputValueValue.toString() !== referenceTokenValue.toString) {&#10;                        throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                        'tokens, the input &quot;' + inputValueValue +&#10;                                        '&quot; is !== to the expected value &quot;' +&#10;                                        referenceTokenValue + '&quot; typeof inputValueValue: ' + typeof inputValueValue + ' typeof referenceTokenValue: ' + typeof referenceTokenValue);&#10;                    }&#10;                }&#10;            } else {&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                    ' tokens, the referenceToken &quot;' + referenceToken +&#10;                    '&quot; is not a number, it is a ' +&#10;                    typeof referenceToken);&#10;            }&#10;            numberOfInputTokensSeen += 1;&#10;            // If we are past the end of the expected inputs, then read&#10;            if (numberOfInputTokensSeen &gt;= correctValuesValues.length) {&#10;                self.send('output', true);&#10;            } else {&#10;                self.send('output', false);&#10;            }&#10;        } else {&#10;            self.send('output', true);&#10;        }&#10;    });&#10;    initialized = true;&#10;};&#10;&#10;/** If trainingMode is true, then updated the correctValues. */&#10;exports.wrapup = function () {&#10;    if (this.getParameter('trainingMode')) {&#10;        this.setParameter('correctValues', trainingTokens);&#10;    } else {&#10;        if (initialized) {&#10;            if (!inputHandled) {&#10;                initialized = false;&#10;                throw new Error(this.accessorName + ': The input handler of this accessor was never invoked. ' +&#10;                    'Usually, this is an error indicating that ' +&#10;                    'starvation is occurring.');&#10;            }&#10;            var correctValuesValues = this.getParameter('correctValues');&#10;            if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;                throw new Error(this.accessorName + ': The test produced only ' +&#10;                    numberOfInputTokensSeen +&#10;                    ' tokens, yet the correctValues parameter was ' +&#10;                    'expecting ' +&#10;                    correctValuesValues.length +&#10;                    ' tokens');&#10;            }&#10;        }&#10;        initialized = false;&#10;    }&#10;    var name = this.accessorName;&#10;&#10;    // FIXME: Should we check to see if the name has no dots in and if&#10;    // it does not, add the container name?&#10;&#10;    //if (this.container) {&#10;    //    name = this.container.accessorName + &quot;.&quot; + name;&#10;    //}&#10;&#10;    //&#10;    exports.wrappedUp = true;&#10;    // console.log(&quot;TrainableTest.js: wrapup() finished: &quot; + name + &quot;, exports.wrappedUp: &quot; + exports.wrappedUp);&#10;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TrainableTest.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Compare the input with a known good input.&#10; If you set ''trainingMode'' to true and provide inputs, then the&#10; inputs will be recorded in the ''correctValues'' parameters.&#10; Otherwise, the inputs will be compared against those in the&#10; ''correctValue'' parameter.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: TrainableTest.js 2058 2017-08-16 23:26:01Z cxh $$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="The input value.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="False as long as there is data to compare against the input">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{850, 300}">
        </property>
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="trainingMode" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TrainableTest2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;/** Compare the input with a known good input.&#10; *  If you set ''trainingMode'' to true and provide inputs, then the&#10; *  inputs will be recorded in the ''correctValues'' parameters.&#10; *  Otherwise, the inputs will be compared against those in the&#10; *  ''correctValue'' parameter.&#10; *&#10; *  @accessor test/TrainableTest&#10; *  @input input The input value.&#10; *  @output output False as long as there is data to compare against the input&#10; *  @param correctValues a JSON array of the correct values.&#10; *  @param trainingMode true if the input is being trained.&#10; *  @author Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee&#10; *  @version $$Id: TrainableTest.js 2058 2017-08-16 23:26:01Z cxh $$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, exports*/&#10;/*jshint globalstrict: true*/&#10;/*jslint plusplus: true */&#10;'use strict';&#10;&#10;exports.setup = function () {&#10;    this.parameter('correctValues', {&#10;        'value': [0]&#10;    });&#10;    this.input('input');&#10;    this.output('output', {&#10;        'type': 'boolean'&#10;    });&#10;    this.parameter('tolerance', {&#10;        'type': 'number',&#10;        'value': 0.000000001&#10;    });&#10;    this.parameter('trainingMode', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;};&#10;&#10;// Input, parameter and variable names match those in $PTII/ptolemy/actor/lib/NonStrictTest.java&#10;&#10;// Set to true if an input is handled.  If no inputs are handled, then&#10;// throw an exception in wrapup().&#10;var inputHandled = false;&#10;&#10;// Set to true when initialize() is called.&#10;var initialized = false;&#10;&#10;// The number of input tokens that have been read in.&#10;var numberOfInputTokensSeen = 0;&#10;&#10;// If trainingMode is true, then inputs that have been seen so far.&#10;var trainingTokens = [];&#10;&#10;// Set to false in initialize() and true at the end of wrapup().&#10;// FIXME: We should have an exit hook that checks that wrapup() is called for all the actors.&#10;var wrappedUp = false;&#10;&#10;// So we can test this in hosts/node/test/mocha/testMain.js to test that wrapup was called.&#10;exports.wrappedUp = wrappedUp;&#10;&#10;/** Create an input handler to compare the input with the appropriate element(s)&#10; *  from correctValues.&#10; */&#10;exports.initialize = function () {&#10;    //console.log(&quot;Test initialize(): typeof correctValues: &quot; + typeof this.getParameter('correctValues'))&#10;    var inputValueValue,&#10;        self = this;&#10;&#10;    trainingTokens = [];&#10;    exports.wrappedUp = false;&#10;    numberOfInputTokensSeen = 0;&#10;&#10;    this.addInputHandler('input', function () {&#10;        var cache = [],&#10;            inputValue = self.get('input'),&#10;            inputValueValue;&#10;        inputHandled = true;&#10;&#10;        // If the input is not connected, then inputValue will be null.&#10;        if (self.getParameter('trainingMode')) {&#10;            trainingTokens.push(inputValue);&#10;            self.send('output', false);&#10;            return;&#10;        }&#10;        var correctValuesValues = self.getParameter('correctValues');&#10;&#10;        if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;            var referenceToken = correctValuesValues[numberOfInputTokensSeen];&#10;            //console.log(&quot;Test: &quot; + numberOfInputTokensSeen + &quot;, input: &quot; + inputValue&#10;            //+ &quot;, referenceToken: &quot; + referenceToken);&#10;            if (typeof inputValue !== 'boolean' &amp;&amp;&#10;                typeof inputValue !== 'number' &amp;&amp;&#10;                typeof inputValue !== 'object' &amp;&amp;&#10;                typeof inputValue !== 'string') {&#10;                if (inputValue === null) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                        ' tokens, the value of the input was null?  ' +&#10;                        'Perhaps the input is not connected?'&#10;                    );&#10;                }&#10;                cache = [];&#10;                inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;                if (inputValueValue.length &gt; 100) {&#10;                    inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                }&#10;                cache = null; // Enable garbage collection&#10;&#10;&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                    ' tokens, the input &quot;' + inputValue +&#10;                    '&quot; is neither a number nor a string, it is a ' +&#10;                    typeof inputValue + ' with value ' + inputValueValue);&#10;            }&#10;            if (typeof referenceToken === 'boolean') {&#10;                // If the input not a boolean, then throw an error.&#10;                if (typeof inputValue !== 'boolean') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a boolean, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;                if (inputValue !== referenceToken) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not equal to &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'number') {&#10;                // If the input not a number, then throw an error.&#10;                if (typeof inputValue !== 'number') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a number, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;&#10;                var difference = Math.abs(inputValue - referenceToken);&#10;                if (isNaN(difference)) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the absolute value of the input &quot;' +&#10;                                    inputValue + '&quot; - the referenceToken &quot;' +&#10;                                    referenceToken + '&quot; is NaN?  It should be less than ' +&#10;                                    self.getParameter('tolerance'));&#10;                }&#10;                if (difference &gt; self.getParameter('tolerance')) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not within &quot;' +&#10;                                    self.getParameter('tolerance') +&#10;                                    '&quot; of the expected value &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'string') {&#10;                if (inputValue !== referenceToken) {&#10;                    // devices/test/auto/WatchEmulator.js needs this test for object because&#10;                    // if we receive a JSON object, then we should try to stringify it.&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = null;&#10;                        try {&#10;                            inputValueValue = JSON.stringify(inputValue);&#10;                        } catch (err) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken + '&quot;.  The input was an object, and a string was expected.');&#10;                        }&#10;                        if (inputValueValue !== referenceToken) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValueValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken +&#10;                                            '&quot;.  The input was an object and JSON.stringify() did not throw an exception.' +&#10;                                            'A string was expected.');&#10;                        }&#10;                    }&#10;                }&#10;            } else if (typeof referenceToken === 'object') {&#10;                cache = [];&#10;                inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;                cache = [];&#10;                var referenceTokenValue = JSON.stringify(referenceToken, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;&#10;                cache = null; // Enable garbage collection&#10;&#10;                // If we are comparing longs from CapeCode, then the values will be like &quot;1L&quot;,&#10;                // and stringify will return undefined.&#10;                if (inputValueValue === undefined) {&#10;                    inputValueValue = inputValue;&#10;                }&#10;                if (referenceTokenValue === undefined) {&#10;                    referenceTokenValue = referenceToken;&#10;                }&#10;&#10;                if (inputValueValue !== referenceTokenValue) {&#10;                    // inputValueValue could still be undefined here if inputValue&#10;                    // was undefined.&#10;                    if (inputValueValue !== undefined &amp;&amp; inputValueValue.length &gt; 100) {&#10;                        inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                    }&#10;                    if (referenceTokenValue !== undefined &amp;&amp; referenceTokenValue.length &gt; 100) {&#10;                        referenceTokenValue = referenceTokenValue.substring(0, 100) + '...';&#10;                    }&#10;                    // Deal with referenceTokens with value 1L.&#10;                    if (typeof inputValueValue !== 'object' || typeof referenceTokenValue !== 'object' &amp;&amp;&#10;                        inputValueValue.toString() !== referenceTokenValue.toString) {&#10;                        throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                        'tokens, the input &quot;' + inputValueValue +&#10;                                        '&quot; is !== to the expected value &quot;' +&#10;                                        referenceTokenValue + '&quot; typeof inputValueValue: ' + typeof inputValueValue + ' typeof referenceTokenValue: ' + typeof referenceTokenValue);&#10;                    }&#10;                }&#10;            } else {&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                    ' tokens, the referenceToken &quot;' + referenceToken +&#10;                    '&quot; is not a number, it is a ' +&#10;                    typeof referenceToken);&#10;            }&#10;            numberOfInputTokensSeen += 1;&#10;            // If we are past the end of the expected inputs, then read&#10;            if (numberOfInputTokensSeen &gt;= correctValuesValues.length) {&#10;                self.send('output', true);&#10;            } else {&#10;                self.send('output', false);&#10;            }&#10;        } else {&#10;            self.send('output', true);&#10;        }&#10;    });&#10;    initialized = true;&#10;};&#10;&#10;/** If trainingMode is true, then updated the correctValues. */&#10;exports.wrapup = function () {&#10;    if (this.getParameter('trainingMode')) {&#10;        this.setParameter('correctValues', trainingTokens);&#10;    } else {&#10;        if (initialized) {&#10;            if (!inputHandled) {&#10;                initialized = false;&#10;                throw new Error(this.accessorName + ': The input handler of this accessor was never invoked. ' +&#10;                    'Usually, this is an error indicating that ' +&#10;                    'starvation is occurring.');&#10;            }&#10;            var correctValuesValues = this.getParameter('correctValues');&#10;            if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;                throw new Error(this.accessorName + ': The test produced only ' +&#10;                    numberOfInputTokensSeen +&#10;                    ' tokens, yet the correctValues parameter was ' +&#10;                    'expecting ' +&#10;                    correctValuesValues.length +&#10;                    ' tokens');&#10;            }&#10;        }&#10;        initialized = false;&#10;    }&#10;    var name = this.accessorName;&#10;&#10;    // FIXME: Should we check to see if the name has no dots in and if&#10;    // it does not, add the container name?&#10;&#10;    //if (this.container) {&#10;    //    name = this.container.accessorName + &quot;.&quot; + name;&#10;    //}&#10;&#10;    //&#10;    exports.wrappedUp = true;&#10;    // console.log(&quot;TrainableTest.js: wrapup() finished: &quot; + name + &quot;, exports.wrappedUp: &quot; + exports.wrappedUp);&#10;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TrainableTest.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Compare the input with a known good input.&#10; If you set ''trainingMode'' to true and provide inputs, then the&#10; inputs will be recorded in the ''correctValues'' parameters.&#10; Otherwise, the inputs will be compared against those in the&#10; ''correctValue'' parameter.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: TrainableTest.js 2058 2017-08-16 23:26:01Z cxh $$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="The input value.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="False as long as there is data to compare against the input">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[850.0, 380.0]">
        </property>
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="trainingMode" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[360.0, 290.0]">
        </vertex>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation9" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation10" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation11" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation12" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="GDPCreateViaGW.gateway" relation="relation4"/>
    <link port="GDPCreateViaGW.auth" relation="relation3"/>
    <link port="GDPCreateViaGW.trigger" relation="relation8"/>
    <link port="GDPCreateViaGW.logname" relation="relation7"/>
    <link port="GDPCreateViaGW._logname" relation="relation9"/>
    <link port="GDPCreateViaGW._logdname" relation="relation10"/>
    <link port="AuthFilename.output" relation="relation"/>
    <link port="FileReader.output" relation="relation2"/>
    <link port="FileReader.trigger" relation="relation"/>
    <link port="AuthFormatter.input" relation="relation2"/>
    <link port="AuthFormatter.output" relation="relation3"/>
    <link port="Gateway.output" relation="relation4"/>
    <link port="Trigger.output" relation="relation5"/>
    <link port="RandomLogNameGenerator.trigger" relation="relation5"/>
    <link port="RandomLogNameGenerator.output" relation="relation6"/>
    <link port="TestDisplay.input" relation="relation6"/>
    <link port="TestDisplay.output" relation="relation7"/>
    <link port="Trigger2.output" relation="relation8"/>
    <link port="JavaScript._logname" relation="relation9"/>
    <link port="JavaScript._logdname" relation="relation10"/>
    <link port="JavaScript._lognameNotEmpty" relation="relation11"/>
    <link port="JavaScript._logdnameNotEmpty" relation="relation12"/>
    <link port="TrainableTest.input" relation="relation11"/>
    <link port="TrainableTest2.input" relation="relation12"/>
</entity>
