<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="IoTClient" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[40.0, 155.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={263, 190, 1198, 748}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[964, 638]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0073065858260897">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{452.5400390625, 438.90401434748424}">
    </property>
    <property name="PROJECT_PATH" class="ptolemy.data.expr.Parameter" value="&quot;/Users/hokeunkim/Development/iotauth/&quot;">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[80.0, 320.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To run this demo, an open-source local authorization entity (Auth) should be running.&#10;The Auth can be obtained in the github repository, https://github.com/iotauth/iotauth.&#10;&#10;NOTE2: The parameter PROJECT_PATH in this demo should be set to the repository directory of iotauth.&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-25.0, 550.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Hokeun Kim">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-25.0, 625.0]">
        </property>
    </property>
    <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="&quot;use strict&quot;;&#10;&#10;var socket = require('socket');&#10;var buffer = require('buffer');&#10;var iotAuth = require('iotAuth');&#10;var crypto = require('crypto');&#10;var msgType = iotAuth.msgType;&#10;&#10;exports.setup = function() {&#10;    this.input('purpose');&#10;    this.output('sessionKey', {&#10;        type : 'string'&#10;    });&#10;    &#10;    this.parameter('authHost', {&#10;        type : 'string',&#10;        value : 'localhost'&#10;    });&#10;    this.parameter('authPort', {&#10;        value: -1,&#10;        type: 'int'&#10;    });&#10;    this.parameter('authCertPath', {&#10;        value: '',&#10;        type: 'string'&#10;    });&#10;    &#10;    this.parameter('entityName', {&#10;        value: '',&#10;        type: 'string'&#10;    });&#10;    this.parameter('entityPrivateKeyPath', {&#10;        value: '',&#10;        type: 'string'&#10;    });&#10;    &#10;    this.parameter('publicCipherAlgorithm', {&#10;        value: '',&#10;        type: 'string'&#10;    });&#10;    this.parameter('signAlgorithm', {&#10;        value: '',&#10;        type: 'string'&#10;    });&#10;    this.parameter('distCipherAlgorithm', {&#10;        value: '',&#10;        type: 'string'&#10;    });&#10;    this.parameter('distHashAlgorithm', {&#10;        value: '',&#10;        type: 'string'&#10;    });&#10;};&#10;&#10;// Auth &amp; entity keys&#10;var authPublicKey;&#10;var entityPrivateKey;&#10;&#10;// local variables&#10;var self;&#10;var currentDistributionKey = null;&#10;var currentSessionKeyList = [];&#10;&#10;function outputSessionKey(sessionKey) {&#10;    sessionKey.val = sessionKey.val.getArray();&#10;    self.send('sessionKey', JSON.stringify(sessionKey));&#10;};&#10;&#10;function sessionKeyRespCallback(status, distributionKey, sessionKeyList) {&#10;    if (status.error) {&#10;        console.log(status.error);&#10;        console.log('session key request failed...');&#10;        return;&#10;    }&#10;    console.log('session key request succeeded');&#10;&#10;    if (distributionKey) {&#10;        console.log('Updating to a new distribution key key');&#10;        currentDistributionKey = distributionKey;&#10;        console.log(currentDistributionKey);&#10;    }&#10;&#10;    console.log('received ' + sessionKeyList.length + ' session keys');&#10;    for (var i = 0; i &lt; sessionKeyList.length; i++) {&#10;        currentSessionKeyList.push(sessionKeyList[i]);&#10;    }&#10;    if (currentSessionKeyList.length &gt; 0) {&#10;        outputSessionKey(currentSessionKeyList.shift());&#10;    }&#10;}&#10;&#10;exports.purposeInputHandler = function() {&#10;    if (currentSessionKeyList.length &gt; 0) {&#10;        outputSessionKey(currentSessionKeyList.shift());&#10;    }&#10;    else {&#10;        var options = {&#10;            authHost: this.getParameter('authHost'),&#10;            authPort: this.getParameter('authPort'),&#10;            entityName: this.getParameter('entityName'),&#10;            numKeys: 2,&#10;            purpose: this.get('purpose'),&#10;            distributionKey: currentDistributionKey,&#10;            distCipherAlgorithm: this.getParameter('distCipherAlgorithm'),&#10;            distHashAlgorithm: this.getParameter('distHashAlgorithm'),&#10;            publicCipherAlgorithm: this.getParameter('publicCipherAlgorithm'),&#10;            signAlgorithm: this.getParameter('signAlgorithm'),&#10;            authPublicKey: authPublicKey,&#10;            entityPrivateKey: entityPrivateKey&#10;        };&#10;        iotAuth.sendSessionKeyReq(options, sessionKeyRespCallback);&#10;        //sendSessionKeyReq(this.getParameter('authHost'), this.getParameter('authPort'),&#10;        //  2, this.get('purpose'));&#10;    }&#10;};&#10;&#10;exports.initialize = function () {&#10;    authPublicKey = crypto.loadPublicKey(this.getParameter('authCertPath'));&#10;    entityPrivateKey = crypto.loadPrivateKey(this.getParameter('entityPrivateKeyPath'));&#10;        &#10;    self = this;&#10;    &#10;    this.addInputHandler('purpose',&#10;        this.exports.purposeInputHandler.bind(this));&#10;};&#10;&#10;exports.wrapup = function () {&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{335.0, 245.0}">
        </property>
        <property name="authHost" class="ptolemy.data.expr.Parameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="authPort" class="ptolemy.data.expr.Parameter" value="21900">
        </property>
        <property name="authCertPath" class="ptolemy.data.expr.Parameter" value="$PROJECT_PATH/entity/auth_certs/Auth101EntityCert.pem">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="entityName" class="ptolemy.data.expr.Parameter" value="net1.ptClient">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="entityPrivateKeyPath" class="ptolemy.data.expr.Parameter" value="$PROJECT_PATH/entity/credentials/keys/net1/PtClientKey.der">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="publicCipherAlgorithm" class="ptolemy.data.expr.Parameter" value="RSA/ECB/PKCS1PADDING">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="signAlgorithm" class="ptolemy.data.expr.Parameter" value="SHA256withRSA">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="distCipherAlgorithm" class="ptolemy.data.expr.Parameter" value="AES-128-CBC">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="distHashAlgorithm" class="ptolemy.data.expr.Parameter" value="SHA-256">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="purpose" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="sessionKey" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="3.0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[40.0, 250.0]">
        </property>
    </entity>
    <entity name="Const" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="{group=&quot;PtServers&quot;}">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{195, 245}">
        </property>
    </entity>
    <entity name="TimedDisplay" class="ptolemy.actor.lib.gui.TimedDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={541, 692, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[595.0, 245.0]">
        </property>
    </entity>
    <entity name="JavaScript2" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="&quot;use strict&quot;;&#10;&#10;var socket = require('socket');&#10;var buffer = require('buffer');&#10;var crypto = require('crypto');&#10;var iotAuth = require('iotAuth');&#10;var msgType = iotAuth.msgType;&#10;&#10;exports.setup = function() {&#10;    this.input('sessionKey', {&#10;        type : 'string'&#10;    });&#10;    this.input('toSend', {&#10;        type : 'string'&#10;    });&#10;    this.output('connected', {&#10;        type: 'boolean'&#10;    });&#10;    this.output('received', {&#10;        type : 'string'&#10;    });&#10;    &#10;    this.parameter('serverHost', {&#10;        type : 'string',&#10;        value : 'localhost'&#10;    });&#10;    this.parameter('serverPort', {&#10;        value: -1,&#10;        type: 'int'&#10;    });&#10;    &#10;    this.parameter('sessionCipherAlgorithm', {&#10;        value: '',&#10;        type: 'string'&#10;    });&#10;    this.parameter('sessionHashAlgorithm', {&#10;        value: '',&#10;        type: 'string'&#10;    });&#10;};&#10;&#10;// crypto info&#10;var sessionCipherAlgorithm;&#10;var sessionHashAlgorithm;&#10;&#10;// client communication state&#10;var clientCommState = {&#10;    IDLE: 0,&#10;    HANDSHAKE_1_SENT: 10,&#10;    IN_COMM: 30                    // Session message&#10;};&#10;&#10;// local variables&#10;var self;&#10;var currentSecureClient = null;&#10;var sessionKey = null;&#10;var currentState = clientCommState.IDLE;&#10;var writeSeqNum = 0;&#10;var readSeqNum = 0;&#10;&#10;function initComm(serverHost, serverPort) {&#10;    if (currentSecureClient) {&#10;        // Either the host or the port has changed. Close the previous socket.&#10;        currentSecureClient.close();&#10;    }&#10;    var initClient = new socket.SocketClient(serverPort, serverHost,&#10;    {&#10;        //'connectTimeout' : this.getParameter('connectTimeout'),&#10;        'discardMessagesBeforeOpen' : false,&#10;        'emitBatchDataAsAvailable' : true,&#10;        //'idleTimeout' : this.getParameter('idleTimeout'),&#10;        //'keepAlive' : false,&#10;        //'maxUnsentMessages' : this.getParameter('maxUnsentMessages'),&#10;        //'noDelay' : this.getParameter('noDelay'),&#10;        //'pfxKeyCertPassword' : this.getParameter('pfxKeyCertPassword'),&#10;        //'pfxKeyCertPath' : this.getParameter('pfxKeyCertPath'),&#10;        'rawBytes' : true,&#10;        //'receiveBufferSize' : this.getParameter('receiveBufferSize'),&#10;        'receiveType' : 'byte',&#10;        //'reconnectAttempts' : this.getParameter('reconnectAttempts'),&#10;        //'reconnectInterval' : this.getParameter('reconnectInterval'),&#10;        //'sendBufferSize' : this.getParameter('sendBufferSize'),&#10;        'sendType' : 'byte',&#10;        //'sslTls' : this.getParameter('sslTls'),&#10;        //'trustAll' : this.getParameter('trustAll'),&#10;        //'trustedCACertPath' : this.getParameter('trustedCACertPath')&#10;    });&#10;    &#10;    var myNonce;&#10;    initClient.on('open', function() {&#10;        console.log('connected to server');&#10;        if (sessionKey == null) {&#10;            console.log('No available key');&#10;            return;&#10;        }&#10;        myNonce = new buffer.Buffer(crypto.randomBytes(iotAuth.HANDSHAKE_NONCE_SIZE));&#10;        console.log('chosen nonce: ' + myNonce.inspect());&#10;        var handshake1 = {nonce: myNonce};&#10;        var buf = iotAuth.serializeHandshake(handshake1);&#10;        var encBuf = new buffer.Buffer(crypto.symmetricEncryptWithHash(buf.getArray(),&#10;            sessionKey.val, sessionCipherAlgorithm, sessionHashAlgorithm));&#10;        &#10;        var keyIdBuf = new buffer.Buffer(iotAuth.SESSION_KEY_ID_SIZE);&#10;        keyIdBuf.writeUIntBE(sessionKey.id, 0, iotAuth.SESSION_KEY_ID_SIZE);&#10;        var msg = {&#10;            msgType: msgType.SKEY_HANDSHAKE_1,&#10;            payload: buffer.concat([keyIdBuf, encBuf])&#10;        };&#10;        var toSend = iotAuth.serializeIoTSP(msg).getArray();&#10;        initClient.send(toSend);&#10;        console.log('switching to HANDSHAKE_1_SENT');&#10;        currentState = clientCommState.HANDSHAKE_1_SENT;&#10;    });&#10;    initClient.on('data', function(data) {&#10;        console.log('data received from server');&#10;        var obj = iotAuth.parseIoTSP(new buffer.Buffer(data));&#10;        if (obj.msgType == msgType.SKEY_HANDSHAKE_2) {&#10;            console.log('received session key handshake2!');&#10;            if (currentState != clientCommState.HANDSHAKE_1_SENT) {&#10;                console.log('Error: wrong sequence of handshake, disconnecting...');&#10;                currentState = clientCommState.IDLE;&#10;                initClient.close();&#10;                return;&#10;            }&#10;            var ret = crypto.symmetricDecryptWithHash(obj.payload.getArray(),&#10;                sessionKey.val, sessionCipherAlgorithm, sessionHashAlgorithm);&#10;            if (!ret.hashOk) {&#10;                console.log('Received hash for handshake2 is NOT ok');&#10;                return;&#10;            }&#10;            console.log('Received hash for handshake2 is ok');&#10;            var buf = new buffer.Buffer(ret.data);&#10;            var handshake2 = iotAuth.parseHandshake(buf);&#10;            if (!handshake2.replyNonce.equals(myNonce)) {&#10;                console.log('Server nonce NOT verified');&#10;                return;&#10;            }&#10;            console.log('Server nonce verified');&#10;            var theirNonce = handshake2.nonce;&#10;            var handshake3 = {replyNonce: theirNonce};&#10;            buf = iotAuth.serializeHandshake(handshake3);&#10;            var encBuf = new buffer.Buffer(crypto.symmetricEncryptWithHash(buf.getArray(),&#10;                sessionKey.val, sessionCipherAlgorithm, sessionHashAlgorithm));&#10;            var msg = {&#10;                msgType: msgType.SKEY_HANDSHAKE_3,&#10;                payload: encBuf&#10;            };&#10;            initClient.send(iotAuth.serializeIoTSP(msg).getArray());&#10;            console.log('switching to IN_COMM');&#10;            currentState = clientCommState.IN_COMM;&#10;            writeSeqNum = 0;&#10;            readSeqNum = 0;&#10;            self.send('connected', true);&#10;            currentSecureClient = initClient;&#10;        }&#10;        else if (obj.msgType == msgType.SECURE_COMM_MSG) {&#10;            console.log('received secure communication message!');&#10;            if (currentState != clientCommState.IN_COMM) {&#10;                console.log('Error: it is not in IN_COMM state, disconecting...');&#10;                currentState = clientCommState.IDLE;&#10;                initClient.close();&#10;                return;&#10;            }&#10;            var ret = crypto.symmetricDecryptWithHash(obj.payload.getArray(),&#10;                sessionKey.val, sessionCipherAlgorithm, sessionHashAlgorithm);&#10;            if (!ret.hashOk) {&#10;                console.log('Received hash for secure comm msg is NOT ok');&#10;                return;&#10;            }&#10;            console.log('Received hash for secure comm msg is ok');&#10;            var buf = new buffer.Buffer(ret.data);&#10;            ret = iotAuth.parseSessionMessage(buf);&#10;            &#10;            if (ret.seqNum != readSeqNum) {&#10;                console.log('seqNum does not match! expected: ' + readSeqNum + ' received: ' + ret.seqNum);&#10;            }&#10;            readSeqNum++;&#10;            console.log('seqNum: ' + ret.seqNum + ' data: ' + ret.data);&#10;            &#10;            self.send('received', ret.data.toString());&#10;        }&#10;    });&#10;    initClient.on('close', function() {&#10;        console.log('disconnected from server');&#10;        console.log('switching to IDLE');&#10;        currentState = clientCommState.IDLE;&#10;    });&#10;    initClient.on('error', function(message) {&#10;        console.log('an error occurred');&#10;        self.error(message);&#10;    });&#10;    initClient.open();&#10;}&#10;&#10;exports.sessionKeyInputHandler = function() {&#10;    sessionKey = JSON.parse(this.get('sessionKey'));&#10;    sessionKey.absValidity = new Date(sessionKey.absValidity);&#10;    console.log(sessionKey);&#10;    initComm(this.getParameter('serverHost'), this.getParameter('serverPort'));&#10;};&#10;&#10;exports.toSendInputHandler = function () {&#10;    var toSend = this.get('toSend');&#10;    // May be receiving inputs before client has been set.&#10;    if (currentSecureClient &amp;&amp; currentState == clientCommState.IN_COMM) {&#10;        var buf = iotAuth.serializeSessionMessage({seqNum: writeSeqNum, data: new buffer.Buffer(toSend)});&#10;        var encBuf = new buffer.Buffer(crypto.symmetricEncryptWithHash(buf.getArray(),&#10;            sessionKey.val, sessionCipherAlgorithm, sessionHashAlgorithm));&#10;        writeSeqNum++;&#10;        var msg = {&#10;            msgType: msgType.SECURE_COMM_MSG,&#10;            payload: encBuf&#10;        };&#10;        var toSend = iotAuth.serializeIoTSP(msg).getArray();&#10;        currentSecureClient.send(toSend);&#10;    }&#10;    else {&#10;        console.log('Discarding data because socket is not open.');&#10;    }&#10;};&#10;&#10;exports.initialize = function () {&#10;    currentState = clientCommState.IDLE;&#10;    writeSeqNum = 0;&#10;    readSeqNum = 0;&#10;    sessionKey = null;&#10;    &#10;    sessionCipherAlgorithm = this.getParameter('sessionCipherAlgorithm');&#10;    sessionHashAlgorithm = this.getParameter('sessionHashAlgorithm');&#10;    &#10;    self = this;&#10;    &#10;    this.addInputHandler('sessionKey',&#10;        this.exports.sessionKeyInputHandler.bind(this));&#10;    this.addInputHandler('toSend',&#10;        this.exports.toSendInputHandler.bind(this));&#10;};&#10;&#10;/** Close the web socket connection. */&#10;exports.wrapup = function () {&#10;    if (currentSecureClient) {&#10;        currentSecureClient.close();&#10;        console.log('Status: Connection closed in wrapup.');&#10;        console.log('switching to IDLE state.');&#10;        currentState = clientCommState.IDLE;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{525.0, 310.0}">
        </property>
        <property name="serverHost" class="ptolemy.data.expr.Parameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="serverPort" class="ptolemy.data.expr.Parameter" value="21200">
        </property>
        <property name="sessionCipherAlgorithm" class="ptolemy.data.expr.Parameter" value="AES-128-CBC">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sessionHashAlgorithm" class="ptolemy.data.expr.Parameter" value="SHA-256">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="sessionKey" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Connected" class="ptolemy.actor.lib.gui.TimedDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={941, 692, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[835.0, 300.0]">
        </property>
    </entity>
    <entity name="Received" class="ptolemy.actor.lib.gui.TimedDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[660.0, 365.0]">
        </property>
    </entity>
    <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="{750, 380}">
        </property>
    </entity>
    <entity name="DiscreteClock2" class="ptolemy.actor.lib.DiscreteClock">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="Infinity">
        </property>
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="0.5">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[860.0, 410.0]">
        </property>
    </entity>
    <entity name="Ramp" class="ptolemy.actor.lib.Ramp">
        <property name="init" class="ptolemy.actor.parameters.PortParameter" value="0">
        </property>
        <doc>Create a sequence of tokens with increasing value</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[755.0, 515.0]">
        </property>
        <property name="_flipPortsHorizontal" class="ptolemy.data.expr.Parameter" value="true">
        </property>
    </entity>
    <entity name="Const2" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="&quot;PtClient message # &quot;">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[605.0, 435.0]">
        </property>
        <property name="_flipPortsHorizontal" class="ptolemy.data.expr.Parameter" value="true">
        </property>
    </entity>
    <entity name="AddSubtract" class="ptolemy.actor.lib.AddSubtract">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[465.0, 440.0]">
        </property>
        <property name="_flipPortsHorizontal" class="ptolemy.data.expr.Parameter" value="true">
        </property>
    </entity>
    <entity name="TimeDelay" class="ptolemy.actor.lib.TimeDelay">
        <property name="delay" class="ptolemy.actor.parameters.PortParameter" value="1.6">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[865.0, 350.0]">
        </property>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{465.0, 245.0}">
        </vertex>
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{680.0, 305.0}">
        </vertex>
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{894.4989682404891, 462.4925890549369}">
        </vertex>
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation9" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation10" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation11" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{805.0, 395.0}">
        </vertex>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="JavaScript.purpose" relation="relation3"/>
    <link port="JavaScript.sessionKey" relation="relation4"/>
    <link port="DiscreteClock.output" relation="relation"/>
    <link port="Const.output" relation="relation3"/>
    <link port="Const.trigger" relation="relation"/>
    <link port="TimedDisplay.input" relation="relation4"/>
    <link port="JavaScript2.sessionKey" relation="relation4"/>
    <link port="JavaScript2.toSend" relation="relation10"/>
    <link port="JavaScript2.connected" relation="relation6"/>
    <link port="JavaScript2.received" relation="relation5"/>
    <link port="Connected.input" relation="relation6"/>
    <link port="Received.input" relation="relation5"/>
    <link port="MicrostepDelay.input" relation="relation6"/>
    <link port="MicrostepDelay.output" relation="relation11"/>
    <link port="DiscreteClock2.output" relation="relation8"/>
    <link port="DiscreteClock2.start" relation="relation11"/>
    <link port="DiscreteClock2.stop" relation="relation2"/>
    <link port="Ramp.output" relation="relation9"/>
    <link port="Ramp.trigger" relation="relation8"/>
    <link port="Const2.output" relation="relation7"/>
    <link port="Const2.trigger" relation="relation8"/>
    <link port="AddSubtract.plus" relation="relation7"/>
    <link port="AddSubtract.plus" relation="relation9"/>
    <link port="AddSubtract.output" relation="relation10"/>
    <link port="TimeDelay.input" relation="relation11"/>
    <link port="TimeDelay.output" relation="relation2"/>
</entity>
