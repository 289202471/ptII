#!/bin/sh
# $Id$
# Reload all the accessors in the models that have JSAccessors actors
# See https://accessors.org/wiki/Main/CapeCodeHost#ReloadAllAccessors
#
# Usage: $PTII/bin/reloadAllAccessors  [-cg] [-commit]

cg=false
commit=false
reload=false
for arg in "$@"
do
    case "$arg" in
        -cg)
            echo "$0: Code will be generated after reloading."
            cg="true"
            ;;
        -commit)
            echo "$0: Will commit any changed models."
            commit="true"
            ;;
        -reload)
            echo "$0: Will reload accessors."
            reload="true"
            ;;
        *)
            echo "$0: Usage: $0 [-cg] [-commit] [-reload]"
            exit 2
            ;;
    esac
done

modelsFile=/tmp/reloadAllAccessors.models.$$

echo "$0: This script reloads all the JSAccessors in all the .xml files that are part of the ptII tree."
echo "    -cg: regenerate the composite accessors if AccessorCodeGenerator is present."
echo "    -commit: commit any changed files."
echo "    -reload: reload accessors."
echo "To reload just a few files, try:"
echo "  $PTII/bin/ptinvoke ptolemy.vergil.basic.imprt.accessor.ReloadAccessors model1.xml model2.xml"

if [ "$commit" = "true" ]; then
    echo "Updating the accessors and ptII repos."
    (cd $PTII/org/terraswarm/accessor/accessors/web; svn update)
    (cd $PTII; svn update)
fi

echo ""
echo "$0: Generating the list of .xml files"
cd $PTII
$PTII/adm/bin/ptIItxtfiles | egrep '.xml$' | grep -v ' ' | grep -v 'findbugsOut.xml' | grep -v ptolemy/apps | grep -v bin/reloadAllAccessors | grep -v vendors > $modelsFile

echo "$0: Generating the list of .xml files that contain JSAccessor.  This will take a moment."

jsaccessors=/tmp/reloadAllAccessors.jsaccessors.$$
cat $modelsFile | xargs grep 'org.terraswarm.accessor.JSAccessor' | awk -F : '{print $1}' | sort | uniq > $jsaccessors

overallReturnValue=0
failedModels=""

if [ "$reload" = "true" ]; then
    echo "$0: Reloading Accessors in `wc -l $jsaccessors | awk '{print $1}'` models."
    cat $jsaccessors | xargs $PTII/bin/ptinvoke ptolemy.vergil.basic.imprt.accessor.ReloadAccessors

    reloadReturnValue=$?
    if [ "$reloadReturnValue" != "0" ]; then
        overallReturnValue=$reloadReturnValue;
        reloadAccessorMessage="Reloading accessors failed."
    fi
fi


if [ "$cg" = "true" ]; then
    echo "$0: Generating a list of models that contain AccessorCodeGenerator"
    cgModels=`cat $jsaccessors | xargs grep AccessorCodeGenerator | awk -F : '{print $1}' | sort | uniq`
    echo "$0: Regenerating code for `echo "$cgModels" | wc -l ` models that contain AccessorCodeGenerator"
    for cgModel in $cgModels
    do
        echo $cgModel | grep -q knownFailedTests
        retval=$?
        if [ $retval = 0 ]; then
            echo "$0: $cgModel is in knownFailedTests, so we won't generate code."
        else
            TIMEOUT=30
            ($PTII/bin/ptinvoke ptolemy.cg.kernel.generic.accessor.AccessorCodeGenerator -language accessor $cgModel) & pid=$!
            ( sleep $TIMEOUT && kill -HUP $pid ) 2>/dev/null & watcher=$!
            wait $pid 2>/dev/null
            cgReturnValue=$?
            pkill -HUP -P $watcher
            echo "cgReturnValue = $cgReturnValue"
            if [ "$cgReturnValue" != "0" ]; then
                overallReturnValue=$cgReturnValue;
                failedModels="$failedModels $cgModel"
            fi            
        fi
    done        
fi    

if [ "$commit" = "true" ]; then
    # Commit only models that are marked with M in svn status so that we avoid
    # attempting to commit models that have not been checked in.
    jsaccessorsNoVendors=`cat $jsaccessors | grep -v /vendors/`
    jsaccessorsToBeCommitted=`svn status $jsaccessorsNoVendors | egrep "^M" | awk '{print $2}' | grep -v diva.jar`

    accessorsRepoCommits=`echo $jsaccessorsToBeCommitted | grep org/terraswarm/accessor/accessors/web | sed 's@org/terraswarm/accessors/accessors/web@@g'`
    if [ ! -z "$accessorsRepoCommits" ]; then
        echo "$0: Commit to the accessor repo"
        echo "$0: accessorsRepoCommits: $accessorsRepoCommits"
        (cd $PTII/org/terraswarm/accessor/accessors/web; svn commit -m "Reloaded accessors using $PTII/bin/reloadAllAccessors."  $accessorsRepoCommits)
    else
        echo "$0: No files need be committed in the accessors repo."
    fi 

    ptIIRepoCommits=`echo $jsaccessorsToBeCommitted | grep -v org/terraswarm/accessor/accessors/web`
    if [ ! -z "$ptIIRepoCommits" ]; then
        echo "$0: Commit to the ptII repo."
        echo "$0: ptIIRepoCommits: $ptIIRepoCommits"
        (cd $PTII; svn commit -m "Reloaded accessors using $PTII/bin/reloadAllAccessors." `echo $jsaccessorsToBeCommitted | grep -v org/terraswarm/accessor/accessors/web`)
    else
        echo "$0: No files need be committed in the ptII repo."
    fi        
fi

rm -f $modelsFiles $jsaccessors

if [ "$overallReturnValue" != "0" ]; then
    echo "$0: a subprocess returned a non-zero value of $overallReturnValue"
    echo "$0: $reloadAccessorMessage"
    if [ "$cg" = "true" ]; then
        echo "$0: The following models returned non-zero $failedModels"
    fi
fi    
