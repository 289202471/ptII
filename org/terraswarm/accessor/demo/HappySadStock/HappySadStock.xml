<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="HappySadStock" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={2, 23, 1119, 738}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[885, 628]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0788212951139586">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{327.47402569602747, 303.605352688785}">
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="true">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This model uses a StockTick accessor to read the stock values&#10;of the publicly-held sponsors of the TerraSwarm project.&#10;It then averages the prices, and if the average is greater than the&#10;previous average, it sets the color of a Hue lightbulb to green.&#10;If is going down, it sets it to red. If it is unchanged, it is white.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-60.0, 315.0]">
        </property>
    </property>
    <property name="stocks" class="ptolemy.data.expr.Parameter" value="{&quot;AMAT&quot;,&quot;IBM&quot;, &quot;INTC&quot;, &quot;MU&quot;, &quot;RTN&quot;, &quot;TXN&quot;, &quot;UTX&quot;}">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[95.0, 45.0]">
        </property>
    </property>
    <property name="bridgeIPAddress" class="ptolemy.data.expr.StringParameter" value="128.32.171.111:80">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.0, 0.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:red" y="20">-S-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-50.0, 445.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.2,0.2,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Set the IP address of the Hue Bridge and light ID of the lightbulb here:">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-60.0, 410.0]">
        </property>
    </property>
    <property name="lightID" class="ptolemy.data.expr.Parameter" value="1">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-50.0, 465.0]">
        </property>
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[15.0, 45.0]">
        </property>
    </property>
    <entity name="ArrayToSequence" class="ptolemy.domains.sdf.lib.ArrayToSequence">
        <property name="arrayLength" class="ptolemy.data.expr.Parameter" value="stocks.length()">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[165.0, 110.0]">
        </property>
    </entity>
    <entity name="Const" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="stocks">
        </property>
        <doc>Create a constant sequence.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[80.0, 110.0]">
        </property>
    </entity>
    <entity name="Expression" class="ptolemy.actor.lib.Expression">
        <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="(currentAverage &gt; previousAverage)?&#10;  46920&#10;: (currentAverage == previousAverage)?&#10;  12750&#10;  : 0">
            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                </property>
            </property>
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
            <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[331.0, 240.0]">
        </property>
        <port name="currentAverage" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="previousAverage" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="ArrayAverage" class="ptolemy.actor.lib.ArrayAverage">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[525.0, 125.0]">
        </property>
    </entity>
    <entity name="SequenceToArray" class="ptolemy.domains.sdf.lib.SequenceToArray">
        <property name="arrayLength" class="ptolemy.actor.parameters.PortParameter" value="stocks.length()">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[430.0, 110.0]">
        </property>
    </entity>
    <entity name="SampleDelay2" class="ptolemy.domains.sdf.lib.SampleDelay">
        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="initialOutputs">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="displayWidth">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[55.0, 250.0]">
        </property>
    </entity>
    <entity name="Hue" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;//  FIXME: Allow an IP address to be dynamically provided.&#10;&#10;/** This accessor controls a Philips Hue lightbulb via a Hue Bridge.&#10; *  To use it, you need to know the IP address of the Hue Bridge, which is&#10; *  unfortunately, somewhat hard to find out.  See below for some hints.&#10; *&#10; *  Upon initialization, this accessor will use the userName parameter to&#10; *  contact the Hue Bridge. If the userName is invalid, then the accessor will&#10; *  engage in a dialog with the Bridge to create a new user. This will require&#10; *  the user to push the button on the Hue Bridge when the alert to do so appears.&#10; *  The assigned userName will be recorded in the userName parameter.&#10; *&#10; *  Upon authenticating with the Bridge, this accessor will output a data&#10; *  structure that reports all the lights that have been registered with the Bridge.&#10; *  These lights each have a number ID, such as '1'.  The state of each light&#10; *  will be reported in this output. The most important property of the state&#10; *  is the 'reachable' property. If this has value false, then the light is not&#10; *  reachable by the Bridge and therefore cannot be controlled.&#10; *&#10; *  The *commands* input is either a single command or an array of commands,&#10; *  where each command can have the following properties:&#10; *&#10; *  * id (required):  The id of the light to manipulate, which is a number.&#10; *  * on: true to turn on; false to turn off.&#10; *  * bri: Brightness.  0-255.&#10; *  * hue: Color, for bulbs that support color. This is a number in the&#10; *    range 0-65280.&#10; *  * sat: Saturation, for bulbs that support color. This is a number in the&#10; *    range 0-255.&#10; *  * transitiontime: The time in ms for the bulb to make the transition.&#10; *&#10; *  Please see Hue docs for mapping colors to hue/saturation values:&#10; *  http://www.developers.meethue.com/documentation/core-concepts&#10; *&#10; *  If a light is not accessible, this accessor warns but does not error.&#10; *  FIXME: Where is the warning appearing?&#10; *  Sometimes Hue lights are transient (get unplugged, become temporarily&#10; *  disconnected) and may be valid in the future. Rather than terminating the&#10; *  model, we hope that the lights come back.&#10; *&#10; *  Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; *  The bridge acquires its address via DHCP, so the address will typically change&#10; *  each time the bridge is rebooted. Moreover, the address will likely not be&#10; *  accessible except on the local network.  The bridge responds to UPnP packets&#10; *  (universal plug-and-play), so it is possible to use software such as&#10; *  &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; *  Another option is to use the Discovery accessor and look for a device named&#10; *  philips-hue (or the name assigned to your bridge if assigned manually).&#10; *&#10; *  @accessor devices/Hue&#10; *  @input {JSON} commands JSON commands for the Hue, for example,&#10; *                {&quot;id&quot; : 1, &quot;on&quot; : true, &quot;hue&quot; : 120}&#10; *  @input {string} bridgeIP The bridge IP address (and port, if needed).&#10; *  @parameter {string} userName The username for logging on to the Hue Bridge.&#10; *   This must be at least 11 characters, or the Hue regards it as invalid.&#10; A username will be automatically generated if none is available.&#10; *  @author Edward A. Lee, Marcus Pan, Elizabeth Osyk, Marten Lohstroh&#10; *  @version $$Id: Hue.js 1496 2017-04-08 19:21:11Z cxh $$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals alert, clearTimeout, console, error, exports, httpRequest, require, setTimeout  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var http = require('httpClient');&#10;&#10;// Node Host needs util defined.&#10;var util = require('util');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;&#10;    this.input('commands');&#10;    this.parameter('bridgeIP', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('userName', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;ptolemyuser&quot;&#10;    });&#10;    this.parameter('onWrapup', {&#10;        value: &quot;turn off&quot;,&#10;        type: &quot;string&quot;,&#10;        options: [&quot;none&quot;, &quot;restore&quot;, &quot;turn off&quot;]&#10;    });&#10;    this.output('lights');&#10;    this.output('assignedUserName', {&#10;        type: &quot;string&quot;&#10;    });&#10;};&#10;&#10;/** Define a Hue function using a variant of the Module pattern.  The function&#10; *  returns a hue object which offers a public connect() function.&#10; *  This will create an object with its own local state, allowing multiple&#10; *  Hue accessors to run concurrently without interfering with each other on&#10; *  hosts with a shared Javascript engine (such as the browser host).&#10; *&#10; *  An instance of the returned hue object implements the following public functions:&#10; *&#10; *  * connect(): Contact the bridge and register the user, if needed.  Add an&#10; *    input handler to the trigger input to submit commands to the bridge. &lt;/li&gt;&#10; *  * issueCommand():  Issue a command to the bridge.  A command is an object&#10; *    that may contain the following fields:&#10; *&#10; *    * id (required):  The id of the light to manipulate.&#10; *    * on: true to turn on; false to turn off.&#10; *    * bri: Brightness.  0-255.&#10; *    * hue: Hue (for bulbs that support color).  0-65280.&#10; *    * sat: Saturation (for bulbs that support color). 0-255.&#10; *    * transitiontime:  The delay before the bulb responds to the command.  In ms.&#10; *&#10; *  For example, {&quot;id&quot; : 1, &quot;on&quot; : true, &quot;hue&quot; : 120}&#10; *&#10; */&#10;function Hue() {&#10;    var hue = {};&#10;&#10;    // Public variables.&#10;    hue.changedLights = [];&#10;    hue.lights = {};&#10;&#10;    // Private variables.&#10;    var authenticated = false;&#10;    var debug = true;&#10;    var handleRegisterUser;&#10;    var ipAddress = &quot;&quot;;&#10;    var maxRegisterAttempts = 10;&#10;    var maxRetries = 5;&#10;    var registerInterval = 5000;&#10;    var registerAttempts = 0;&#10;    var retryCount = 0;&#10;    var retryTimeout = 1000;&#10;    var timeout = 3000;&#10;    var url = &quot;&quot;;&#10;    var userName = &quot;&quot;;&#10;    var pendingCommands = [];&#10;    var alerted = false;&#10;    var errorOccurred = false;&#10;&#10;    // Use self in contained functions so the caller does not have to bind &quot;this&quot;&#10;    // on each function call.&#10;    var self = this;&#10;&#10;    // Public functions.&#10;    // Available to be used for e.g. inputHandlers.&#10;&#10;    /** Utility function to check that an object is a nonempty array.&#10;     *  @param obj The object.&#10;     */&#10;    function isNonEmptyArray(obj) {&#10;        return (obj instanceof Array &amp;&amp; obj.length &gt; 0);&#10;    }&#10;&#10;    var bridgeRequestErrorHandler;&#10;    var registerUser;&#10;&#10;    /** Contact the bridge.  Register the user, if needed.&#10;     */&#10;    function contactBridge() {&#10;        console.log(&quot;Attempting to connect to: &quot; + url + &quot;/&quot; + userName + &quot;/lights/&quot;);&#10;        var bridgeRequest = http.get(url + &quot;/&quot; + userName + &quot;/lights/&quot;, function (response) {&#10;            if (response !== null) {&#10;                console.log(&quot;Got a response from the bridge: &quot; + response.body);&#10;                if (errorOccurred) {&#10;                    // Fatal error has occurred. Ignore response.&#10;                    self.error('Error occurred before response arrive. Response ignored');&#10;                    return;&#10;                }&#10;                if (response.statusCode !== 200) {&#10;                    // Response is other than OK. Retry if not a fatal error.&#10;                    bridgeRequestErrorHandler(response.statusMessage);&#10;                } else {&#10;                    var lights = JSON.parse(response.body);&#10;&#10;                    if (isNonEmptyArray(lights) &amp;&amp; lights[0].error) {&#10;                        var description = lights[0].error.description;&#10;&#10;                        if (description.match(&quot;unauthorized user&quot;)) {&#10;                            // Add this user.&#10;                            // Prevent the alert from coming up more than once.&#10;                            alerted = true;&#10;                            alert(userName + &quot; is not a registered user.\n&quot; +&#10;                                &quot;Push the link button on the Hue bridge to register.&quot;);&#10;                            // Oddly, the invalid userName, which has the right form,&#10;                            // is not an acceptable parameter value. Since it is invalid&#10;                            // anyway, discard it and replace.&#10;                            userName = 'ptolemy_user';&#10;                            // It takes two successive posts to register a new user.&#10;                            // Issue the first one now, then attempt again later.&#10;                            registerUser();&#10;                            console.log(&quot;Will register user in &quot; + registerInterval + &quot; ms&quot;);&#10;                            handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;                        } else {&#10;                            console.error('Error occurred when trying to get Hue light status:' + description);&#10;                            self.error(description);&#10;                            errorOccurred = true;&#10;                        }&#10;                    } else if (lights) {&#10;                        console.log(&quot;Authenticated!&quot;);&#10;                        authenticated = true;&#10;&#10;                        // Process any previously queued requests.&#10;                        if (pendingCommands) {&#10;                            for (var i = 0; i &lt; pendingCommands.length; i++) {&#10;                                hue.processCommands(pendingCommands[i]);&#10;                            }&#10;                            pendingCommands = [];&#10;                        }&#10;                        hue.lights = lights;&#10;                        self.send('lights', lights);&#10;                    }&#10;                }&#10;            } else {&#10;                self.error(&quot;Unable to connect to bridge.&quot;);&#10;                errorOccurred = true;&#10;            }&#10;        });&#10;    }&#10;&#10;    /** Contact the bridge and register the user, if needed. */&#10;    hue.connect = function () {&#10;        ipAddress = self.getParameter('bridgeIP');&#10;        userName = self.getParameter('userName');&#10;&#10;        if (userName.length &lt; 11) {&#10;            throw &quot;Username too short. Hue only accepts usernames that contain at least 11 characters.&quot;;&#10;        }&#10;&#10;        if (ipAddress === null || ipAddress.trim() === &quot;&quot;) {&#10;            throw &quot;No IP Address is given for the Hue Bridge.&quot;;&#10;        }&#10;&#10;        url = &quot;http://&quot; + ipAddress + &quot;/api&quot;;&#10;&#10;        contactBridge();&#10;    };&#10;&#10;    /** Issue a command to the bridge.  Commands are queued if not yet authenticated. */&#10;    hue.issueCommand = function () {&#10;        if (errorOccurred) {&#10;            return;&#10;        }&#10;        var commands = self.get('commands');&#10;        if (debug) {&#10;            console.log(&quot;Hue.js: issueCommand(): &quot; + util.inspect(commands));&#10;        }&#10;&#10;        // (Re)connect with the bridge&#10;        if (ipAddress !== self.getParameter('bridgeIP') ||&#10;            userName !== self.getParameter('userName')) {&#10;            console.log(&quot;New bridge parameters detected. Need to re-authenticate.&quot;);&#10;            authenticated = false;&#10;            hue.connect();&#10;        }&#10;&#10;        // If not yet connected, queue the command.&#10;        if (!authenticated) {&#10;            console.log(&quot;Not authenticated; queueing command.&quot;);&#10;            pendingCommands.push(commands);&#10;            return;&#10;        }&#10;        hue.processCommands(commands);&#10;    };&#10;&#10;    /** Utility function to limit the range of a number&#10;     *  and to force it to be an integer. If the value argument&#10;     *  is a string, then it will be converted to a Number.&#10;     *  @param value The value to limit.&#10;     *  @param low The low value.&#10;     *  @param high The high value.&#10;     */&#10;    function limit(value, low, high) {&#10;        var parsed = parseInt(value, 10);&#10;        if (typeof parsed === 'undefined') {&#10;            parsed = parseFloat(value);&#10;            if (typeof parsed === 'undefined') {&#10;                self.error(&quot;Expected a number between &quot; + low + &quot; and &quot; + high + &quot;, but got &quot; + value);&#10;                return 0;&#10;            } else {&#10;                parsed = Math.floor(parsed);&#10;            }&#10;        }&#10;        if (parsed &lt; low) {&#10;            return low;&#10;        } else if (parsed &gt; high) {&#10;            return high;&#10;        } else {&#10;            return parsed;&#10;        }&#10;    }&#10;&#10;    /** If the response indicates an error, report it.&#10;     *  Return true if the response is an error.&#10;     */&#10;    function reportIfError(response) {&#10;        var body = response.body;&#10;        if (typeof body == &quot;string&quot;) {&#10;            body = JSON.parse(body);&#10;        }&#10;        if (isNonEmptyArray(body) &amp;&amp; body[0].error) {&#10;            self.error(&quot;Server responds with error: &quot; +&#10;                body[0].error.description);&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    /** Process the specified commands. The argument can be a single object&#10;     *  with properties for the command, or an array of such objects.&#10;     */&#10;    hue.processCommands = function (commands) {&#10;        if (typeof commands === 'string') {&#10;            commands = JSON.parse(commands);&#10;        }&#10;        if (debug) {&#10;            console.log(&quot;Hue.js: processCommands() commands: &quot; + util.inspect(commands));&#10;        }&#10;        // Accept both arrays and non-arrays.&#10;        // The following concatenates the input with an empty array, ensuring the result&#10;        // is an array.&#10;        commands = [].concat(commands);&#10;&#10;        // Iterate over commands (assuming input is an array of commands)&#10;        for (var i = 0; i &lt; commands.length; i++) {&#10;            var command = {};&#10;            if (typeof commands[i] === 'string') {&#10;                commands[i] = JSON.parse(commands);&#10;            }&#10;            var lightID = commands[i].id;&#10;&#10;            // Check whether input is valid&#10;            if (typeof lightID === 'undefined') {&#10;                self.error(&quot;Invalid command (no light id): &quot; + commands[i]);&#10;            } else {&#10;&#10;                // Keep track of changed lights to turn off during wrap up.&#10;                if (hue.changedLights.indexOf(lightID) == -1) {&#10;                    hue.changedLights.push(lightID);&#10;                }&#10;&#10;                // Pack properties into object&#10;                if (typeof commands[i].on !== 'undefined') {&#10;                    command.on = commands[i].on;&#10;                }&#10;                if (typeof commands[i].bri !== 'undefined') {&#10;                    command.bri = limit(commands[i].bri, 0, 255);&#10;                }&#10;                if (typeof commands[i].hue !== 'undefined') {&#10;                    command.hue = limit(commands[i].hue, 0, 65280);&#10;                }&#10;                if (typeof commands[i].sat !== 'undefined') {&#10;                    command.sat = limit(commands[i].sat, 0, 255);&#10;                }&#10;                if (typeof commands[i].transitiontime !== 'undefined') {&#10;                    command.transitiontime = commands[i].transitiontime;&#10;                }&#10;            }&#10;&#10;            if (Object.keys(command).length &lt; 1) {&#10;                self.error(&quot;Invalid command (no properties): &quot; + JSON.stringify(commands[i]));&#10;            } else {&#10;                if (debug) {&#10;                    console.log(&quot;Hue.js: processCommands() command: &quot; + JSON.stringify(command));&#10;                }&#10;                var options = {&#10;                    body: JSON.stringify(command),&#10;                    timeout: 10000,&#10;                    url: url + &quot;/&quot; + userName + &quot;/lights/&quot; + encodeURIComponent(lightID) + &quot;/state/&quot;&#10;                };&#10;                if (debug) {&#10;                    console.log(&quot;Hue.js: processCommands(): PUT request: options: &quot; + JSON.stringify(options));&#10;                }&#10;                http.put(options, function (response) {&#10;                    if (debug) {&#10;                        console.log(&quot;Hue.js: processCommands(): response status: &quot; + response.statusMessage);&#10;                        console.log(&quot;Hue.js: processCommands(): response body: &quot; + response.body);&#10;                    }&#10;                    reportIfError(response);&#10;                });&#10;            }&#10;        }&#10;    };&#10;&#10;    // Private functions.&#10;&#10;    /** Handle an error. This will report it on the console and then retry a&#10;     *  fixed number of times before giving up.  A retry is a re-invocation of&#10;     *  registerUser().&#10;     */&#10;    bridgeRequestErrorHandler = function (err) {&#10;        // FIXME: We should do a UPnP discovery here and find a bridge.&#10;        // Could not connect to the bridge&#10;        console.error('Error connecting to Hue Bridge:');&#10;        console.error(err);&#10;        if (retryCount &lt; maxRetries) {&#10;            console.log('Will retry');&#10;            retryCount++;&#10;            setTimeout(contactBridge, retryTimeout);&#10;        } else {&#10;            self.error('Could not reach the Hue Bridge at ' + url +&#10;                ' after ' + retryCount + ' attempts.');&#10;            errorOccurred = true;&#10;        }&#10;    };&#10;&#10;    /** Register a new user.&#10;     *  This function repeats at registerInterval until successful or until&#10;     *  maxRegisterAttempts.  Some wait time is given between attempts for the&#10;     *  user to click the button on the Hue bridge.&#10;     */&#10;    registerUser = function () {&#10;&#10;        // Should be of the format {&quot;devicetype&quot;:&quot;my_hue_app#iphone peter&quot;}&#10;        // http://www.developers.meethue.com/documentation/getting-started&#10;        // (free registration required).&#10;        var registerData = {&#10;            devicetype: &quot;hue_accessor#&quot; + userName&#10;        };&#10;        var options = {&#10;            body: JSON.stringify(registerData),&#10;            timeout: 10000,&#10;            url: url&#10;        };&#10;        http.post(options, function (response) {&#10;            var rsp = JSON.parse(response.body);&#10;            if (debug) {&#10;                console.log(&quot;Hue.js registerUser(): Response &quot; + JSON.stringify(rsp));&#10;            }&#10;            if (isNonEmptyArray(rsp) &amp;&amp; rsp[0].error) {&#10;&#10;                var description = rsp[0].error.description;&#10;&#10;                if (description.match(&quot;link button not pressed&quot;) ||&#10;                    description.match(&quot;invalid value&quot;)) {&#10;                    // Retry registration for the given number of attempts.&#10;                    console.log(&quot;Please push the link button on the Hue bridge.&quot;);&#10;                    registerAttempts++;&#10;&#10;                    if (registerAttempts &lt; maxRegisterAttempts) {&#10;                        handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;                    } else {&#10;                        errorOccurred = true;&#10;                        throw &quot;Failed to create user after &quot; + registerAttempts +&#10;                            &quot; attempt(s).&quot;;&#10;                    }&#10;                    return;&#10;                } else {&#10;                    errorOccurred = true;&#10;                    throw description;&#10;                }&#10;            } else if ((isNonEmptyArray(rsp) &amp;&amp; rsp[0].success)) {&#10;                authenticated = true;&#10;&#10;                // The bridge will return a username.  Save it.&#10;                userName = rsp[0].success.username;&#10;                self.setParameter('userName', userName);&#10;                self.send('assignedUserName', userName);&#10;                if (handleRegisterUser !== null) {&#10;                    clearTimeout(handleRegisterUser);&#10;                }&#10;                // contact the bridge and find the available lights&#10;                contactBridge();&#10;            } else {&#10;                throw &quot;Unknown error registering new user&quot;;&#10;            }&#10;        });&#10;    };&#10;&#10;    return hue;&#10;}&#10;&#10;/** Add an input handler to react to commands.&#10; *  Commands will be ignored until the user is authenticated.&#10; *  If a bridge IP address has been given, contact the bridge to check if it is&#10; *  present.  Next, register the user if not already registered.&#10; */&#10;exports.initialize = function () {&#10;    // Call the Hue function binding &quot;this&quot;, to create local state variables&#10;    // while providing access to accessor functions.&#10;    // Setting &quot;this.hue&quot; makes hue available in other accessor functions, e.g.&#10;    // initialize().&#10;    // TODO:  Test with two accessors to make sure each has separate state.&#10;    this.hue = Hue.call(this);&#10;&#10;    // FIXME:  We need a way to dynamically supply the IP address.&#10;    // Recommend using a separate port.&#10;    this.addInputHandler('commands', this.hue.issueCommand);&#10;    this.hue.connect();&#10;};&#10;&#10;/** Turn off changed lights on wrapup. */&#10;exports.wrapup = function () {&#10;    var action = this.getParameter('onWrapup'),&#10;        cmd = JSON.stringify({&#10;            on: false&#10;        }),&#10;        debug = false,&#10;        errorLights = [],&#10;        options = {};&#10;&#10;    if (action !== &quot;none&quot;) {&#10;        // wrapup() gets called by the code generator after setting&#10;        // the types, so there is a chance that changedLights has not been set.&#10;        if (typeof this.hue !== 'undefined' &amp;&amp; typeof this.hue.changedLights !== 'undefined') {&#10;&#10;            for (var i = 0; i &lt; this.hue.changedLights.length; i++) {&#10;                options = {&#10;                    body: cmd,&#10;                    timeout: 10000,&#10;                    url: &quot;http://&quot; + this.get(&quot;bridgeIP&quot;) + &quot;/api/&quot; +&#10;                        this.getParameter(&quot;userName&quot;) + &quot;/lights/&quot; + this.hue.changedLights[i] +&#10;                        &quot;/state/&quot;&#10;                };&#10;&#10;                var self = this;&#10;&#10;                http.put(options, function (response) {&#10;                    if (debug) {&#10;                        console.log(&quot;Hue.js wrapup(): Response &quot; + JSON.stringify(response));&#10;                    }&#10;                    if (this.hue.reportIfError(response)) {&#10;                        errorLights.push(this.lightID);&#10;                    }&#10;                });&#10;            }&#10;        }&#10;        if (errorLights.length !== 0) {&#10;            error(&quot;Error turning off lights &quot; + errorLights.toString());&#10;        }&#10;    }&#10;};&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/devices/Hue.js">
        </property>
        <property name="bridgeIPAddress" class="ptolemy.actor.parameters.PortParameter" value="bridgeIPAddress">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="userName" class="ptolemy.data.expr.StringParameter" value="ptolemyuser">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="lightID" class="ptolemy.actor.parameters.PortParameter" value="lightID">
        </property>
        <property name="brightness" class="ptolemy.actor.parameters.PortParameter" value="255">
        </property>
        <property name="hue" class="ptolemy.actor.parameters.PortParameter" value="65280">
        </property>
        <property name="saturation" class="ptolemy.actor.parameters.PortParameter" value="255">
        </property>
        <property name="on" class="ptolemy.actor.parameters.PortParameter" value="false">
        </property>
        <property name="transitionTime" class="ptolemy.actor.parameters.PortParameter" value="4">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[565.0, 250.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor controls a Philips Hue lightbulb via a Hue Bridge.&#10; To use it, you need to know the IP address of the Hue Bridge, which is&#10; unfortunately, somewhat hard to find out.  See below for some hints.&lt;/p&gt;&#10;&lt;p&gt; Upon initialization, this accessor will use the userName parameter to&#10; contact the Hue Bridge. If the userName is invalid, then the accessor will&#10; engage in a dialog with the Bridge to create a new user. This will require&#10; the user to push the button on the Hue Bridge when the alert to do so appears.&#10; The assigned userName will be recorded in the userName parameter.&lt;/p&gt;&#10;&lt;p&gt; Upon authenticating with the Bridge, this accessor will output a data&#10; structure that reports all the lights that have been registered with the Bridge.&#10; These lights each have a number ID, such as '1'.  The state of each light&#10; will be reported in this output. The most important property of the state&#10; is the 'reachable' property. If this has value false, then the light is not&#10; reachable by the Bridge and therefore cannot be controlled.&lt;/p&gt;&#10;&lt;p&gt; The &lt;em&gt;commands&lt;/em&gt; input is either a single command or an array of commands,&#10; where each command can have the following properties:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;id (required):  The id of the light to manipulate, which is a number.&lt;/li&gt;&#10;&lt;li&gt;on: true to turn on; false to turn off.&lt;/li&gt;&#10;&lt;li&gt;bri: Brightness.  0-255.&lt;/li&gt;&#10;&lt;li&gt;hue: Color, for bulbs that support color. This is a number in the&#10;range 0-65280.&lt;/li&gt;&#10;&lt;li&gt;sat: Saturation, for bulbs that support color. This is a number in the&#10;range 0-255.&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;transitiontime: The time in ms for the bulb to make the transition.&lt;/p&gt;&#10;&lt;p&gt;Please see Hue docs for mapping colors to hue/saturation values:&#10;http://www.developers.meethue.com/documentation/core-concepts&lt;/p&gt;&#10;&lt;p&gt;If a light is not accessible, this accessor warns but does not error.&#10;FIXME: Where is the warning appearing?&#10;Sometimes Hue lights are transient (get unplugged, become temporarily&#10;disconnected) and may be valid in the future. Rather than terminating the&#10;model, we hope that the lights come back.&lt;/p&gt;&#10;&lt;p&gt;Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10;The bridge acquires its address via DHCP, so the address will typically change&#10;each time the bridge is rebooted. Moreover, the address will likely not be&#10;accessible except on the local network.  The bridge responds to UPnP packets&#10;(universal plug-and-play), so it is possible to use software such as&#10;&lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10;Another option is to use the Discovery accessor and look for a device named&#10;philips-hue (or the name assigned to your bridge if assigned manually).&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee, Marcus Pan, Elizabeth Osyk, Marten Lohstroh">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: Hue.js 1117 2016-11-23 00:59:47Z cxh $$">
            </property>
            <property name="userName (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The username for logging on to the Hue Bridge.&#10;  This must be at least 11 characters, or the Hue regards it as invalid.&#10; A username will be automatically generated if none is available.">
            </property>
            <property name="bridgeIPAddress (port)" class="ptolemy.kernel.util.StringAttribute" value="The bridge IP address (and port, if needed).">
            </property>
            <property name="lightID (port)" class="ptolemy.kernel.util.StringAttribute" value="The light identifier (an integer beginning with 1).">
            </property>
            <property name="brightness (port)" class="ptolemy.kernel.util.StringAttribute" value="The brightness (an integer between 0 and 255).">
            </property>
            <property name="hue (port)" class="ptolemy.kernel.util.StringAttribute" value="The hue (an integer between 0 and 62580).">
            </property>
            <property name="saturation (port)" class="ptolemy.kernel.util.StringAttribute" value="The saturation (an integer between 0 and 255).">
            </property>
            <property name="transitionTime (port)" class="ptolemy.kernel.util.StringAttribute" value="The transition time, in multiples of 100ms.">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="Triggers a PUT request with all the light settings. Can be any type.">
            </property>
            <property name="on (port)" class="ptolemy.kernel.util.StringAttribute" value="Whether the light is on (true) or off (false).">
            </property>
            <property name="commands (port)" class="ptolemy.kernel.util.StringAttribute" value="JSON commands for the Hue, for example,&#10;               {&quot;id&quot; : 1, &quot;on&quot; : true, &quot;hue&quot; : 120}">
            </property>
            <property name="bridgeIP (port)" class="ptolemy.kernel.util.StringAttribute" value="The bridge IP address (and port, if needed).">
            </property>
        </property>
        <property name="bridgeIP" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="onWrapup" class="ptolemy.data.expr.Parameter" value="turn off">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="trigger" class="ptolemy.actor.parameters.PortParameter">
        </property>
        <port name="bridgeIPAddress" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="lightID" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="brightness" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="hue" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="saturation" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="on" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="transitionTime" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="commands" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="lights" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="assignedUserName" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.Clock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="5.0">
        </property>
        <property name="offsets" class="ptolemy.data.expr.Parameter" value="{0.0}">
        </property>
        <property name="values" class="ptolemy.data.expr.Parameter" value="{true}">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-19.421875, 110.0]">
        </property>
    </entity>
    <entity name="StockTick2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Retrieve a stock price from a Yahoo server.&#10; *  This accessor reacts to a *symbol* input by issuing a query to a web server&#10; *  for the most recent trade prices of the common stock whose symbol is given&#10; *  by the input. When the server replies, this accessor produces the most&#10; *  recent trade price on the *price* output.&#10; *&#10; *  This accessor does not block waiting for the response, but if any additional&#10; *  *symbol* input is received before a pending request has received a response&#10; *  or timed out, then the new request will be queued and sent out only after&#10; *  the pending request has completed. This strategy ensures that outputs are&#10; *  produced in the same order as the input requests.&#10; *&#10; *  This accessor requires the optional 'httpClient' module, which may or may&#10; *  not be provided by an accessor host. Most hosts will provide this module.&#10; *&#10; *  @accessor services/StockTick&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @version $$Id: StockTick.js 1354 2017-02-21 16:50:07Z cxh $$&#10; *  @input {string} symbol The stock symbol. Default value is 'YHOO'.&#10; *  @output {number} price The most recent trade price for the stock.&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, get, error, exports, extend, get, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var http = require('httpClient');&#10;&#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function () {&#10;    this.extend('net/REST');&#10;    this.input('symbol', {&#10;        'value': 'YHOO',&#10;        'type': 'string'&#10;    });&#10;    this.output('price', {&#10;        'type': 'number'&#10;    });&#10;    // Change default values of the base class inputs.&#10;    // Also, hide base class inputs, except trigger.&#10;    this.input('options', {&#10;        'visibility': 'expert',&#10;        'value': '&quot;https://query.yahooapis.com&quot;'&#10;    });&#10;    this.input('command', {&#10;        'visibility': 'expert',&#10;        'value': '/v1/public/yql'&#10;    });&#10;    this.input('arguments', {&#10;        'visibility': 'expert',&#10;        'value': '{&quot;env&quot;:&quot;store://datatables.org/alltableswithkeys&quot;, &quot;format&quot;:&quot;json&quot;}'&#10;    });&#10;    this.input('body', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.input('trigger', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.output('headers', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.output('status', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.parameter('outputCompleteResponsesOnly', {&#10;        'visibility': 'expert'&#10;    });&#10;};&#10;&#10;/** Initialize the accessor by attaching an input handler to the *symbol* input. */&#10;exports.initialize = function () {&#10;    // Be sure to call the superclass so that the trigger input handler gets registered.&#10;    this.exports.ssuper.initialize.call(this);&#10;&#10;    // Capture 'this' for use in callback.&#10;    var self = this;&#10;&#10;    // Invoke the getPrice function each time a 'symbol' input arrives.&#10;    this.addInputHandler('symbol', function () {&#10;        // Read the current value of the 'symbol' input.&#10;        var stock = self.get('symbol');&#10;        var args = self.get('arguments');&#10;        args.q = 'select * from yahoo.finance.quotes where symbol in (&quot;' +&#10;            stock +&#10;            '&quot;)';&#10;        self.send('arguments', args);&#10;        self.send('trigger', true);&#10;    });&#10;};&#10;&#10;/** Filter the response, extracting the stock tick information and&#10; *  outputting it on the price output. The full response is produced&#10; *  on the 'response' output.&#10; */&#10;exports.filterResponse = function (response) {&#10;    if (response) {&#10;        try {&#10;            // Check if response is JSON or stringified JSON.  If stringified, parse.&#10;            var parsed;&#10;            if (typeof response == &quot;object&quot;) {&#10;                parsed = response;&#10;            } else {&#10;                parsed = JSON.parse(response);&#10;            }&#10;&#10;            // Extract the last trade price from the JSON record.&#10;            var price = parseFloat(parsed.query.results.quote.LastTradePriceOnly);&#10;            // Send the price to the 'price' output.&#10;            this.send('price', price);&#10;        } catch (err) {&#10;            error('StockTick: Unable to parse response: ' + err.message);&#10;            this.send('price', null);&#10;        }&#10;    } else {&#10;        this.send('price', null);&#10;    }&#10;    return response;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/services/StockTick.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Retrieve a stock price from a Yahoo server.&#10; This accessor reacts to a &lt;em&gt;symbol&lt;/em&gt; input by issuing a query to a web server&#10; for the most recent trade prices of the common stock whose symbol is given&#10; by the input. When the server replies, this accessor produces the most&#10; recent trade price on the &lt;em&gt;price&lt;/em&gt; output.&lt;/p&gt;&#10;&lt;p&gt; This accessor does not block waiting for the response, but if any additional&#10; &lt;em&gt;symbol&lt;/em&gt; input is received before a pending request has received a response&#10; or timed out, then the new request will be queued and sent out only after&#10; the pending request has completed. This strategy ensures that outputs are&#10; produced in the same order as the input requests.&lt;/p&gt;&#10;&lt;p&gt; This accessor requires the optional 'httpClient' module, which may or may&#10; not be provided by an accessor host. Most hosts will provide this module.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: StockTick.js 1354 2017-02-21 16:50:07Z cxh $$">
            </property>
            <property name="symbol (port)" class="ptolemy.kernel.util.StringAttribute" value="The stock symbol. Default value is 'YHOO'.">
            </property>
            <property name="price (port)" class="ptolemy.kernel.util.StringAttribute" value="The most recent trade price for the stock.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="&quot;http://query.yahooapis.com&quot;">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="command" class="ptolemy.actor.parameters.PortParameter" value="/v1/public/yql">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="{&quot;env&quot;:&quot;http://datatables.org/alltables.env&quot;, &quot;format&quot;:&quot;json&quot;}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="symbol" class="ptolemy.actor.parameters.PortParameter" value="YHOO">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="outputCompleteResponsesOnly" class="ptolemy.data.expr.Parameter">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[295.0, 110.0]">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="symbol" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="body" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="status" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="price" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;ArrayToSequence.input&quot;,x=140.0,y=115.0}, tail={id=&quot;Const.output&quot;,x=55.0,y=115.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[175.0, 170.0]">
        </vertex>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="ArrayToSequence.input" relation="relation"/>
    <link port="ArrayToSequence.output" relation="relation5"/>
    <link port="Const.output" relation="relation"/>
    <link port="Const.trigger" relation="relation6"/>
    <link port="Expression.output" relation="relation3"/>
    <link port="Expression.currentAverage" relation="relation7"/>
    <link port="Expression.previousAverage" relation="relation2"/>
    <link port="ArrayAverage.input" relation="relation4"/>
    <link port="ArrayAverage.output" relation="relation7"/>
    <link port="SequenceToArray.input" relation="relation8"/>
    <link port="SequenceToArray.output" relation="relation4"/>
    <link port="SampleDelay2.input" relation="relation7"/>
    <link port="SampleDelay2.output" relation="relation2"/>
    <link port="Hue.hue" relation="relation3"/>
    <link port="DiscreteClock.output" relation="relation6"/>
    <link port="StockTick2.symbol" relation="relation5"/>
    <link port="StockTick2.price" relation="relation8"/>
</entity>
