<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="WatchHue" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="startTime" class="ptolemy.data.expr.Parameter" value="">
        </property>
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[77.5, 40.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={349, 29, 949, 676}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[715, 566]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.7859199646618721">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{438.8236408919739, 365.2568359375}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Read Moto Watch Gesture Data via UDP.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[145.0, 10.0]">
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Listen for messages.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[30.0, 450.0]">
        </property>
    </property>
    <property name="AccessorCodeGenerator" class="ptolemy.cg.kernel.generic.accessor.AccessorCodeGenerator">
        <property name="run" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="runCommand" class="ptolemy.data.expr.StringParameter" value="node nodeHostInvoke.js -timeout 12000 hosts/node/@modelName@">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[525.0, 45.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Authors: Edward A. Lee, Beth Osyk, Christopher Brooks&#10;This demo uses software developed by Ziwei Zhu&#10;and others in Roozbeh Jafari's group at Texas A&amp;M">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[15.0, 660.0]">
        </property>
    </property>
    <property name="_layoutConfiguration" class="ptolemy.vergil.basic.layout.ActorLayoutConfiguration">
        <property name="spacing" class="ptolemy.actor.parameters.DoubleRangeParameter" value="2.0">
            <display name="Object spacing"/>
        </property>
        <property name="logAspectRatio" class="ptolemy.actor.parameters.DoubleRangeParameter" value="0.1200000000000001">
            <display name="Aspect ratio"/>
        </property>
    </property>
    <property name="Annotation5" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Edit the listeningPort parameter of the Moto360SensorListener actor.&#10;&#10;The listeningPort is a UDP port number that should match &#10;the port number programmed in to the Moto Watch App">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[40.0, 245.0]">
        </property>
    </property>
    <property name="Annotation4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="If you have a TerraSwarm account, click here to open up&#10;https://www.terraswarm.org/urbanheartbeat/wiki/Main/WatchAndroidStudioSetup">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[40.0, 155.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="https://www.terraswarm.org/urbanheartbeat/wiki/Main/WatchAndroidStudioSetup#WatchSoftwareRepo#in_browser">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{265, 55}">
            </property>
        </property>
    </property>
    <property name="Annotation7" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This demo requires a Moto 360 Watch that has been programmed with the WearUDPDemo.&#10;Click here to open up https://github.com/terraswarm/WatchSoftware">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[40.0, 90.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="https://github.com/terraswarm/WatchSoftware#in_browser">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{265, 55}">
            </property>
        </property>
    </property>
    <property name="Annotation6" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.2,0.2,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Type in IP address of Hue bridge.&#10;One way to find the IP address is to use nmap:&#10;  nmap 10.42.0.1/24&#10;Code generation does not currently support &#10;using a parameter value.">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[-116.74369182180851, -236.62844498005313]">
            <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="Hue">
            </property>
            <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
            </property>
        </property>
    </property>
    <property name="Annotation8" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.2,0.2,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Edit code and type in light IDs.&#10;Only ints supported currently (why?).">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[330.0, 615.0]">
        </property>
    </property>
    <entity name="Moto360SensorListener" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** &#10; * Read sensor data from a Moto 360 watch that is broadcasting the data via&#10; * UDP on the local network.&#10; *&#10; * FIXME: Give the app that needs to be running on the watch.&#10; *&#10; * Each sensor has its own output port.  The outputs will be objects with&#10; * fields 'watchID', a four-character string, and 'timestamp' representing&#10; * FIXME: what information is this?&#10; *&#10; * See https://www.terraswarm.org/urbanheartbeat/wiki/Main/WatchSoftware&#10; * for details on the software that runs on the watch.&#10; *  &#10; * @accessor devices/Moto360SensorListener&#10; *&#10; * @output message The received message as a raw byte array.&#10; * @output {boolean} listening True to indicate that listening has begun, false to&#10; *   indicate that it has stopped.&#10; * @output accelerometer The accelerometer data from the watch. This is an object&#10; *   with fields x, y, z representing measured acceleration (or the earth's gravitational&#10; *   field, which is indistinguishable from acceleration). These will be in SI units&#10; *   of meters per second squared. The 'z' field points into&#10; *   the watch face, so it will be roughly +9.8 (one g) when the watch is facing up.&#10; *   The 'x' field is transverse to the watch, where +9.8 occurs roughly when 9 o'clock&#10; *   is pointing straight down. The 'y' axis is along band axis, where +9.8 will occur&#10; *   roughly when the 12 o'clock is pointing straight up.&#10; * @output gyro The gyroscope data from the watch. This is an object&#10; *   with fields x, y, z representing measured angular rotation (in radians per second).&#10; *   The 'z' field represents rotation around an axis pointing into the watch face.&#10; *   The 'x' field axis transverse to the watch, and the 'y' axis is along band axis.&#10; *   These are the same axes as for the accelerometer.&#10; *&#10; * @input {string} listeningAddress The interface to listen on for incoming messages.&#10; *   This defaults to &quot;0.0.0.0&quot;, which means to listen on all network interfaces.&#10; * @input {int} listeningPort The port to listen on for incoming messages.&#10; *   This defaults to 4567.&#10; *&#10; * @parameter accelerometerSensitivity If this is set to something other than zero,&#10; *   then this accessor will output accelerometer data only when the accelerometer&#10; *   reading differs in some axis by more than the specified sensitivity.&#10; *   A small number means high sensitivity (lots of outputs) and a larger number&#10; *   means low sensitivity (fewer outputs).&#10; * @parameter gyroSensitivity If this is set to something other than zero,&#10; *   then this gyroscope will output data only when the gyro&#10; *   reading differs in some axis by more than the specified sensitivity.&#10; *   A small number means high sensitivity (lots of outputs) and a larger number&#10; *   means low sensitivity (fewer outputs).&#10; *  &#10; * @author Christopher Brooks and Edward A. Lee&#10; * @version $$Id: Moto360SensorListener.js 1003 2016-10-16 16:09:48Z eal $$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, httpRequest, require, setTimeout  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;// This accessor requires the optional 'udpSocket' module, which may or may&#10;// not be provided by an accessor host. Most hosts will provide this module.&#10;var UDPSocket = require('udpSocket');&#10;&#10;// FIXME: Use built in debug capability.&#10;var debug = false;&#10;&#10;// Initialize these to large numbers so that the first output always appears.&#10;// Accelerometer values.&#10;var previousX = -100.0;&#10;var previousY = -100.0;&#10;var previousZ = -100.0;&#10;// Gyro values.&#10;var previousGX = -100.0;&#10;var previousGY = -100.0;&#10;var previousGZ = -100.0;&#10;&#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function () {&#10;    this.extend('net/UDPSocketListener');&#10;&#10;    // Override the value of listeningPort in the parent.&#10;    this.input('listeningPort', {&#10;        'value': 4567, // 4567 is the value found in https://github.com/Zziwei/PackageSendTest&#10;        'type': 'int'&#10;    });&#10;    &#10;    // Accelerometer output port.&#10;    this.output('accelerometer');&#10;    this.parameter('accelerometerSensitivity', {&#10;        type: 'number',&#10;        value: 0.0&#10;    });&#10;&#10;    // Gyro output port.&#10;    this.output('gyro');&#10;    this.parameter('gyroSensitivity', {&#10;        type: 'number',&#10;        value: 0.0&#10;    });&#10;&#10;    this.parameter('receiveType', {&#10;        type: 'string',&#10;        value: 'unsignedbyte',&#10;        visibility:'expert'&#10;    });&#10;};&#10;&#10;exports.initialize = function () {&#10;    // FIXME: Is this needed?&#10;    exports.ssuper.initialize.call(this);&#10;};&#10;&#10;// Convert the 2 bytes data to a integer.&#10;// The first argument is the higher-order byte, and the second is the lower-order byte.&#10;// These are assumed to be non-negative numbers between 0 and 255.&#10;// If the result is greater than or equal to 2^15 = 32768, then the two bytes are&#10;// interpreted as a two's complement negative number and a negative integer is returned.&#10;// The returned result always lies between -32768 and 32767, inclusive.&#10;function bytesToInt(a, b) {&#10;    if (debug) {&#10;	    console.log('******** translating: ' + a + ', ' + b);&#10;	}&#10;    var c = a * Math.pow(2, 8);&#10;    c = c + b;&#10;    if (c &gt;= Math.pow(2, 15)) { &#10;        c = (Math.pow(2, 16) - c) * -1;&#10;    }&#10;    return c;&#10;}&#10;&#10;// Convert a timestamp to time string.&#10;function timestamp2string(time_stamp) {&#10;    try {&#10;        // Python time is in seconds.  JavaScript milliseconds.&#10;        //d = datetime.fromtimestamp(time_stamp / 1000.0);&#10;        time_stamp = Math.round(time_stamp * 1000);&#10;        var d = new Date(time_stamp);&#10;        //str1 = d.strftime(&quot;%Y-%m-%d %H:%M:%S.%f&quot;);&#10;        var str1 = d.toISOString();&#10;        //console.log(&quot;timestamp2string(&quot; + time_stamp + &quot;)&quot; + d + &quot; &quot; + Date.now());&#10;        &#10;        // Python: 2015-08-28 16:43:37.283000&#10;        // JavaScript: 2016-10-05T03:21:09.617Z &#10;        return str1;&#10;    } catch (e) {&#10;        console.log(e);&#10;        return '';&#10;    }&#10;}&#10;&#10;// Convert the 8 bytes timestamp to float.&#10;function bytes2float(byte_array) {&#10;    var value = (byte_array[0] &amp; 0xff) | ((byte_array[1] &lt;&lt; 8) &amp; 0xff00) | ((byte_array[2] &lt;&lt; 16) &amp; 0xff0000) | ((byte_array[3] &lt;&lt; 24) &amp; 0xff000000);&#10;    value += ((((byte_array[4]) &amp; 0xff) | ((byte_array[5] &lt;&lt; 8) &amp; 0xff00)) / 1000);&#10;    return value;&#10;}&#10;&#10;// Override the base class to attach a message listening function.&#10;exports.closeAndOpen = function () {&#10;&#10;    exports.ssuper.closeAndOpen.call(this);&#10;    var self = this;&#10;&#10;    exports.ssuper.socket.on('message', function (message) {&#10;        if (exports.ssuper.running) {&#10;            // Send out the raw message.&#10;            self.send('message', message);&#10;&#10;            var watchID = String.fromCharCode(message[0]) + String.fromCharCode(message[1]) +&#10;            		String.fromCharCode(message[2]) + String.fromCharCode(message[3]);&#10;            // Get the timestamp.&#10;            var timestamp = timestamp2string(bytes2float(message.slice(11, 17)));&#10;&#10;            if (debug) {&#10;                console.log(&quot;Message received: &quot; + message);&#10;                console.log('Watch ID: ' + watchID);&#10;                console.log('Message type: ' + String.fromCharCode(message[4]));&#10;            }&#10;            // Check for accelerometer data.&#10;            if (message[4] == &quot;a&quot;.charCodeAt(0)) {&#10;            	// Received accelerometer data.&#10;            	// To get SI units of m/s^2, the scaling factor needs to match&#10;            	// what is used in the watch application's SCALE_ACCELEROMETER&#10;            	// variable.&#10;            	var SCALE_ACCELEROMETER = 836;&#10;            	var x = bytesToInt(message[6], message[5]) / SCALE_ACCELEROMETER;&#10;                var y = bytesToInt(message[8], message[7]) / SCALE_ACCELEROMETER;&#10;                var z = bytesToInt(message[10], message[9]) / SCALE_ACCELEROMETER;&#10;                &#10;                // Compare current data against previous data.&#10;                var sensitivity = self.getParameter('accelerometerSensitivity');&#10;                if (sensitivity == 0.0&#10;                        || Math.abs(x - previousX) &gt; sensitivity&#10;                        || Math.abs(y - previousY) &gt; sensitivity&#10;                        || Math.abs(z - previousZ) &gt; sensitivity) {&#10;                        &#10;                    // Output is to be produced.&#10;                    previousX = x;&#10;                    previousY = y;&#10;                    previousZ = z;&#10;                    &#10;                    var json = {&#10;                        watchID: watchID,&#10;                        'x': x,&#10;                        'y': y,&#10;                        'z': z,&#10;                        'timestamp': timestamp&#10;                    };&#10;                    if (debug) {&#10;                        console.log(&quot;Accelerometer output: &quot; + JSON.stringify(json));&#10;                    }&#10;                    self.send(&quot;accelerometer&quot;, json);&#10;                }&#10;            } else if (message[4] == &quot;g&quot;.charCodeAt(0)) {&#10;            	// Received gyro data.&#10;            	// To get units of radians per second, the scaling factor needs to match&#10;            	// what is used in the watch application's SCALE_GYRO&#10;            	// variable.&#10;            	var SCALE_GYRO = 5208;&#10;            	var x = bytesToInt(message[6], message[5]) / SCALE_GYRO;&#10;                var y = bytesToInt(message[8], message[7]) / SCALE_GYRO;&#10;                var z = bytesToInt(message[10], message[9]) / SCALE_GYRO;&#10;                &#10;                // Compare current data against previous data.&#10;                var sensitivity = self.getParameter('gyroSensitivity');&#10;                if (sensitivity == 0.0&#10;                        || Math.abs(x - previousGX) &gt; sensitivity&#10;                        || Math.abs(y - previousGY) &gt; sensitivity&#10;                        || Math.abs(z - previousGZ) &gt; sensitivity) {&#10;                        &#10;                    // Output is to be produced.&#10;                    previousGX = x;&#10;                    previousGY = y;&#10;                    previousGZ = z;&#10;                    &#10;                    var json = {&#10;                        watchID: watchID,&#10;                        'x': x,&#10;                        'y': y,&#10;                        'z': z,&#10;                        'timestamp': timestamp&#10;                    };&#10;                    if (debug) {&#10;                        console.log(&quot;Gyro output: &quot; + JSON.stringify(json));&#10;                    }&#10;                    self.send(&quot;gyro&quot;, json);&#10;                }&#10;            }&#10;            if (debug) {&#10;                console.log(&quot;---------&quot;);&#10;            }&#10;        }&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/devices/Moto360SensorListener.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Read sensor data from a Moto 360 watch that is broadcasting the data via&#10;UDP on the local network.&lt;/p&gt;&#10;&lt;p&gt;FIXME: Give the app that needs to be running on the watch.&lt;/p&gt;&#10;&lt;p&gt;Each sensor has its own output port.  The outputs will be objects with&#10;fields 'watchID', a four-character string, and 'timestamp' representing&#10;FIXME: what information is this?&lt;/p&gt;&#10;&lt;p&gt;See https://www.terraswarm.org/urbanheartbeat/wiki/Main/WatchSoftware&#10;for details on the software that runs on the watch.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks and Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: Moto360SensorListener.js 1003 2016-10-16 16:09:48Z eal $$">
            </property>
            <property name="listeningAddress (port)" class="ptolemy.kernel.util.StringAttribute" value="The interface to listen on for incoming messages.&#10;  This defaults to &quot;0.0.0.0&quot;, which means to listen on all network interfaces.">
            </property>
            <property name="listeningPort (port)" class="ptolemy.kernel.util.StringAttribute" value="The port to listen on for incoming messages.&#10;  This defaults to 4567.">
            </property>
            <property name="message (port)" class="ptolemy.kernel.util.StringAttribute" value="The received message as a raw byte array.">
            </property>
            <property name="listening (port)" class="ptolemy.kernel.util.StringAttribute" value="True to indicate that listening has begun, false to&#10;  indicate that it has stopped.">
            </property>
            <property name="accelerometer (port)" class="ptolemy.kernel.util.StringAttribute" value="The accelerometer data from the watch. This is an object&#10;  with fields x, y, z representing measured acceleration (or the earth's gravitational&#10;  field, which is indistinguishable from acceleration). These will be in SI units&#10;  of meters per second squared. The 'z' field points into&#10;  the watch face, so it will be roughly +9.8 (one g) when the watch is facing up.&#10;  The 'x' field is transverse to the watch, where +9.8 occurs roughly when 9 o'clock&#10;  is pointing straight down. The 'y' axis is along band axis, where +9.8 will occur&#10;  roughly when the 12 o'clock is pointing straight up.">
            </property>
            <property name="gyro (port)" class="ptolemy.kernel.util.StringAttribute" value="The gyroscope data from the watch. This is an object&#10;  with fields x, y, z representing measured angular rotation (in radians per second).&#10;  The 'z' field represents rotation around an axis pointing into the watch face.&#10;  The 'x' field axis transverse to the watch, and the 'y' axis is along band axis.&#10;  These are the same axes as for the accelerometer.">
            </property>
            <property name="accelerometerSensitivity (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If this is set to something other than zero,&#10;  then this accessor will output accelerometer data only when the accelerometer&#10;  reading differs in some axis by more than the specified sensitivity.&#10;  A small number means high sensitivity (lots of outputs) and a larger number&#10;  means low sensitivity (fewer outputs).">
            </property>
            <property name="gyroSensitivity (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If this is set to something other than zero,&#10;  then this gyroscope will output data only when the gyro&#10;  reading differs in some axis by more than the specified sensitivity.&#10;  A small number means high sensitivity (lots of outputs) and a larger number&#10;  means low sensitivity (fewer outputs).">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="listeningAddress" class="ptolemy.actor.parameters.PortParameter" value="0.0.0.0">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="unsignedbyte">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[100.0, 380.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <property name="listeningPort" class="ptolemy.actor.parameters.PortParameter" value="4568">
        </property>
        <property name="accelerometerSensitivity" class="ptolemy.data.expr.Parameter" value="0.0">
        </property>
        <property name="gyroSensitivity" class="ptolemy.data.expr.Parameter" value="0.0">
        </property>
        <port name="listeningAddress" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="listeningPort" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="message" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="listening" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="accelerometer" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="gyro" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;	this.input('a');&#10;	this.output('hand');&#10;}&#10;exports.initialize = function () {&#10;	var count = 0;&#10;	var self = this;&#10;	var raised = false;&#10;	this.addInputHandler('a', function() {&#10;		var a = this.get('a');&#10;		if (!raised &amp;&amp; a.x &gt; 8.0) {&#10;			raised = true;&#10;			self.send('hand', 'Edward raised his hand: ' + count++);&#10;		} else if (raised &amp;&amp; a.x &lt; 5.0) {&#10;			raised = false;&#10;			self.send('hand', 'Edward lowered his hand: ' + count++);&#10;		}&#10;	});&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[280.0, 390.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="a" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="hand" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TestDisplay" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Display data on the console.&#10;//&#10;// Copyright (c) 2016. The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Display data on the console.&#10; *&#10; *  @accessor test/TestDisplay&#10; *  @param input The output&#10; *  @author Christopher Brooks&#10; *  @version $$Id: TestDisplay.js 748 2016-04-29 21:51:14Z cxh $$&#10; */&#10;&#10;exports.setup = function() {&#10;    this.input('input');&#10;    this.output('output');&#10;};&#10;&#10;exports.initialize = function() {&#10;    this.addInputHandler('input', function() {&#10;        var inputValue = this.get('input');&#10;        console.log(inputValue);&#10;        this.send('output', inputValue);&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/test/TestDisplay.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Display data on the console.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: TestDisplay.js 748 2016-04-29 21:51:14Z cxh $$">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[440.0, 386.640625]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Command" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/** Generate Hue commands.&#10; *&#10; *  @accessor Command&#10; *  @input trigger When an input is received, output a series of Hue commands.&#10; *  @output output A series of Hue commands.&#10; *  @author Elizabeth Osyk&#10; *  @version $$Id: TestHue.xml 75267 2016-10-15 15:21:04Z beth@berkeley.edu $$&#10; */&#10;exports.setup = function() {&#10;    this.input('trigger');&#10;    this.output('output', {'type' : 'JSON'});&#10;};&#10;&#10;exports.initialize = function() {&#10;    var self = this;&#10;    this.addInputHandler('trigger', function() {&#10;    	// On, off, on, off&#10;       var data = [{'id':1, 'on':true}, {'id':2, 'on':true}];&#10;	   self.send('output', data);&#10;	   &#10;	   setTimeout(function() {&#10;	   	data = [{'id':1, 'on':false}, {'id':2, 'on':false}];&#10;	    self.send('output', data);&#10;	    &#10;	    setTimeout(function() {&#10;		   	data = [{'id':1, 'on':true}, {'id':2, 'on':true}];&#10;		    self.send('output', data);&#10;		    &#10;		    setTimeout(function() {&#10;	   			data = [{'id':1, 'on':false}, {'id':2, 'on':false}];&#10;	    		self.send('output', data);&#10;		   		}, 3000);&#10;	    }, 3000);&#10;	   }, 3000);&#10;	   &#10;&#10;	   &#10;    });&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[510.0, 570.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="Hue" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2014-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;//  FIXME: Allow an IP address to be dynamically provided.&#10;/** This accessor controls a Philips Hue lightbulb.&#10; *  &#10; *  Initialization:  Hue checks for a value of the &quot;bridgeIP&quot; input in &#10; *  initialize().  If a default value is present, Hue initiates a connection to &#10; *  the bridge.  &#10; *  FIXME:  Allow an IP address to be dynamically provided.&#10; *  Otherwise, Hue waits for an IP address to be supplied as part&#10; *  of a command.  Commands are ignored until an IP address is supplied.  If the&#10; *  accessor fails to reach the bridge, it will retry a few times, then give up.&#10; *  &#10; *  User registration:&#10; *  The Hue bridge automatically generates usernames.  If you have already &#10; *  generated a username, enter the value in the &quot;userName&quot; parameter.  &#10; *  Otherwise, the accessor contacts the bridge to obtain a username, which is &#10; *  output on the &quot;assignedUserName&quot; port.  An alert dialog will pop up &#10; *  instructing the user to push the link button on the bridge.  Then, the &#10; *  bridge will respond to the accessor with a new username.  &#10; *  This username will be remembered while the swarmlet is active; however, &#10; *  there is no persistent storage yet.  Please copy the assigned username to &#10; *  the &quot;userName&quot; parameter and save the accessor code. &#10; *  &#10; *  Bridge state: The final initialization step is to get a list of accessible &#10; *  lights.  &#10; *  &#10; *  Commands: A command is an object that may contain the following fields.  &#10; *  The &quot;command&quot; port accepts an array of commands.&#10; *  id (required):  The id of the light to manipulate. &#10; *  on: true to turn on; false to turn off.&#10; *  bri: Brightness.  0-255.&#10; *  hue: Hue (for bulbs that support color).  0-65280.&#10; *  sat: Saturation (for bulbs that support color). 0-255.&#10; *  transitiontime:  The delay before the bulb responds to the command.  In ms.&#10; *  &#10; *  Please see Hue docs for mapping colors to hue/saturation values:&#10; *  http://www.developers.meethue.com/documentation/core-concepts&#10; *  &#10; *  If a light is not accessible, this accessor warns but does not error.&#10; *  Sometimes Hue lights are transient (get unplugged, become temporarily &#10; *  disconnected) and may be valid in the future. Rather than terminating the &#10; *  model, we hope that the lights come back.&#10; *  &#10; *  Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; *  The bridge acquires its address via DHCP, so the address will typically change&#10; *  each time the bridge is rebooted. Moreover, the address will likely not be&#10; *  accessible except on the local network.  The bridge responds to UPnP packets&#10; *  (universal plug-and-play), so it is possible to use software such as&#10; *  &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; *  Another option is to use the Discovery accessor and look for a device named&#10; *  philips-hue (or the name assigned to your bridge if assigned manually).&#10; *  &#10; *  @accessor devices/Hue&#10; *  @input {JSON} commands JSON commands for the Hue, for example, {&quot;id&quot; : 1, &quot;on&quot; : true, &quot;hue&quot; : 120}&#10; *  @input {string} bridgeIP The bridge IP address (and port, if needed).&#10; *  @parameter {string} userName The username for logging on to the Hue Bridge.&#10; *   This must be at least 11 characters, or the Hue regards it as invalid.&#10;     A username will be automatically generated if none is available.&#10; *  @author Edward A. Lee, Marcus Pan, Elizabeth Osyk, Marten Lohstroh&#10; *  @version $$Id: TestHue.xml 75267 2016-10-15 15:21:04Z beth@berkeley.edu $$ &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, httpRequest, require, setTimeout  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var http = require('httpClient');&#10;&#10;/** Define a Hue function using a variant of the Module pattern.  The function&#10; *  returns a hue object which offers a public connect() function.  &#10; *  This will create an object with its own local state, allowing multiple &#10; *  Hue accessors to run concurrently without interfering with each other on&#10; *  hosts with a shared Javascript engine (such as the browser host).&#10; *  &#10; *  An instance of the returned hue object implements the following public functions:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt; connect(): Contact the bridge and register the user, if needed.  Add an&#10; *        input handler to the trigger input to submit commands to the bridge.&#10; *  &lt;/li&gt;&#10; *  &lt;li&gt; issueCommand():  Issue a command to the bridge.  A command is an object &#10; *  that may contain the following fields.  &#10; *  For example, {&quot;id&quot; : 1, &quot;on&quot; : true, &quot;hue&quot; : 120}&#10; *  &#10; *  id (required):  The id of the light to manipulate. &#10; *  on: true to turn on; false to turn off.&#10; *  bri: Brightness.  0-255.&#10; *  hue: Hue (for bulbs that support color).  0-65280.&#10; *  sat: Saturation (for bulbs that support color). 0-255.&#10; *  transitiontime:  The delay before the bulb responds to the command.  In ms.&#10; *  &lt;/li&gt;&#10; *  &lt;/ul&gt;&#10; * &#10; */&#10;&#10;function Hue() {&#10;    var hue = {};&#10;    &#10;    // Public variables. &#10;    hue.changedLights = [];&#10;    hue.lights = {};&#10;&#10;    // Private variables.&#10;    var authenticated = false;&#10;    var debug = true;&#10;    var handleRegisterUser;&#10;    var ipAddress = &quot;&quot;;&#10;    var maxRegisterAttempts = 3;&#10;    var maxRetries = 5;&#10;    var registerInterval = 10000;&#10;    var registerAttempts = 0;&#10;    var retryCount = 0;&#10;    var retryTimeout = 1000;&#10;    var timeout = 3000;&#10;    var url = &quot;&quot;;&#10;    var userName = &quot;&quot;; &#10;    &#10;    // Use self in contained functions so the caller does not have to bind &quot;this&quot;&#10;    // on each function call.&#10;    var self = this;&#10;    &#10;    // Public functions. &#10;    // Available to be used for e.g. inputHandlers.&#10;    &#10;    /** Contact the bridge and register the user, if needed.  Add an input &#10;     * handler to the trigger input to submit commands to the bridge.&#10;     */&#10;    hue.connect = function() {&#10;        ipAddress = self.getParameter('bridgeIP');&#10;        userName = self.getParameter('userName');&#10;	&#10;        if (userName.length &lt; 11) {&#10;            throw &quot;Username too short. Hue only accepts usernames that contain at least 11 characters.&quot;;&#10;        }&#10;&#10;        if (ipAddress === null || ipAddress.trim() === &quot;&quot;) {&#10;            throw &quot;No IP Address is given for the Hue Bridge.&quot;;&#10;        }&#10;&#10;        url = &quot;http://&quot; + ipAddress + &quot;/api&quot;;&#10;        &#10;        contactBridge();&#10;    };&#10;    &#10;    /** Issue a command to the bridge.  Commands are ignored if not yet&#10;     * authenticated. */	&#10;    hue.issueCommand = function() {&#10;    	var commands = self.get('commands');&#10;        if (debug) {&#10;	    console.log(&quot;Hue.js: issueCommand():&quot;);&#10;        }&#10;&#10;	// (Re)connect with the bridge&#10;    	if (ipAddress !== self.getParameter('bridgeIP') || &#10;    			userName !== self.getParameter('userName')) {&#10;    	    console.log(&quot;New bridge parameters detected.&quot;);&#10;    	    hue.connect();&#10;    	}&#10;&#10;    	// FIXME:  If not yet connected, wait a bit for connection instead of &#10;    	// just discarding the command.&#10;    	// No connection to the bridge, ignore request.&#10;    	if (!authenticated) {&#10;   	    console.log(&quot;Not authenticated, ignoring command.&quot;);&#10;    	    return;&#10;    	}&#10;    	&#10;        if (debug) {&#10;    	    // FIXME: Type check input&#10;	    console.log(&quot;Hue.js: issueCommand() commands: &quot; + console.log(JSON.stringify(commands)));&#10;        }&#10;	// FIXME: If only one record, also accept input!!!&#10;&#10;    	// Iterate over commands (assuming input is an array of commands)&#10;	for (var i = 0; i &lt; commands.length; i++) {&#10;    	    var command = {};&#10;    	    var lightID = commands[i].id;&#10;    	    &#10;    	    // Check whether input is valid&#10;    	    if (typeof lightID === 'undefined') {&#10;    		self.error(&quot;Invalid command (&quot; + i + &quot;): please specify light id.&quot;);&#10;    	    } else {&#10;&#10;	    	// Keep track of changed lights to turn off during wrap up.&#10;	    	if (hue.changedLights.indexOf(lightID) == -1) {&#10;	            hue.changedLights.push(lightID);&#10;	    	}&#10;	        &#10;	    	// Pack properties into object&#10;	    	if (typeof commands[i].on !== 'undefined') {&#10;	    	    command.on = commands[i].on;&#10;	    	}&#10;	    	if (typeof commands[i].bri !== 'undefined') {&#10;	    	    command.bri = limit(commands[i].bri, 0, 255);&#10;	    	}&#10;	    	if (typeof commands[i].hue !== 'undefined') {&#10;	    	    command.hue = limit(commands[i].hue, 0, 65280);&#10;	    	}&#10;	    	if (typeof commands[i].sat !== 'undefined') {&#10;	    	    command.sat = limit(commands[i].sat, 0, 255);&#10;	    	}&#10;	    	if (typeof commands[i].transitiontime !== 'undefined') {&#10;	    	    command.transitiontime = commands[i].transitiontime;&#10;	    	}&#10;    	    }&#10;&#10;    	    if (Object.keys(command).length &lt; 1) {&#10;    		//console.log(&quot;ERROR&quot;);&#10;    		self.error(&quot;Invalid command (&quot; + i + &quot;): please specify at least one property.&quot;);&#10;    	    }&#10;    	    else {&#10;                if (debug) {&#10;	            console.log(&quot;Hue.js: issueCommand() command: &quot; + JSON.stringify(command));&#10;                }&#10;    		var options = {&#10;	    	    body : JSON.stringify(command),&#10;	    	    timeout : 10000,&#10;	    	    url : url + &quot;/&quot; + userName + &quot;/lights/&quot; + lightID + &quot;/state/&quot;&#10;	    	};&#10;                if (debug) {&#10;	            console.log(&quot;Hue.js: issueCommand(): PUT request: options: &quot; + JSON.stringify(options));&#10;                }&#10;	    	http.put(options, function(response) {&#10;&#10;                if (debug) {&#10;	    	        console.log(&quot;Hue.js: issueCommand(): response status: &quot; + response.statusMessage);&#10;	    	        console.log(&quot;Hue.js: issueCommand(): response body: &quot; + JSON.stringify(response.body));&#10;                }&#10;                    &#10;	            if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;	            	self.error(&quot;Server responds with error: &quot; + &#10;	            		   response[0].error.description);&#10;	            }&#10;	    	});&#10;    	    }&#10;    	}&#10;    };&#10;&#10;    // Private functions.&#10;    &#10;    /** Handle an error. This will report it on the console and then retry a &#10;     * fixed number of times before giving up.  A retry is a re-invocation of &#10;     * registerUser().&#10;     */&#10;    function bridgeRequestErrorHandler(err) {&#10;	&#10;	// FIXME: We should do a UPnP discovery here and find a bridge.&#10;	// Could not connect to the bridge&#10;	console.log('Error connecting to Hue basestation.');&#10;	console.error(err);&#10;	if (retryCount &lt; maxRetries) {&#10;	    console.log('Will retry');&#10;	    retryCount++;&#10;	    setTimeout(function() {&#10;	        contactBridge;&#10;	    }, retryTimeout);&#10;	} else {&#10;	    self.error('Could not reach the Hue basestation at ' + url +&#10;	               ' after ' + retryCount + ' attempts.');&#10;	}&#10;    }&#10;    &#10;    /** Contact the bridge to ensure it is operating.  Register the user, if&#10;     * needed.&#10;     */&#10;    function contactBridge() {&#10;	console.log(&quot;Attempting to connecting to: &quot; + url + &quot;/&quot; + userName + &quot;/lights/&quot;);&#10;        var bridgeRequest = http.get(url + &quot;/&quot; + userName + &quot;/lights/&quot;, function (response) {&#10;            if (response !== null) {&#10;        	if (response.statusCode != 200) {&#10;        	    // Response is other than OK.&#10;    	            bridgeRequestErrorHandler(response.statusMessage);&#10;    	        } else {&#10;    	            console.log(&quot;Got a response from the bridge...&quot;);&#10;    	            &#10;    		    var lights = JSON.parse(response.body);&#10;    		    console.log(&quot;Reponse: &quot; + response.body);&#10;&#10;    		    if (isNonEmptyArray(lights) &amp;&amp; lights[0].error) {&#10;    		        var description = lights[0].error.description;&#10;    		        &#10;    		        if (description.match(&quot;unauthorized user&quot;)) {&#10;    		            // Add this user.&#10;    		            alert(userName + &quot; is not a registered user.\n&quot; +&#10;    		            	  &quot;Push the link button on the Hue bridge to register.&quot;);&#10;    		            //self.error(userName + &quot; is not a registered user.\n&quot; +&#10;    		            //&quot; Push the link button on the Hue bridge to register.&quot;);&#10;    		            //handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;    		            registerUser();&#10;    		        } else {&#10;    		            console.error('Error occurred when trying to get Hue light status.');&#10;    		            self.error(description);&#10;    		        }&#10;    		    } else if (lights) {&#10;    		        console.log(&quot;Authenticated!&quot;);&#10;    		        authenticated = true;&#10;    		        hue.lights = lights;&#10;    		    }&#10;    		}&#10;    	    } else {&#10;    		self.error(&quot;Unable to connect to bridge.&quot;);&#10;    	    }&#10;    	}).on('error', bridgeRequestErrorHandler);&#10;        bridgeRequest.on('error', bridgeRequestErrorHandler);&#10;    }&#10;    &#10;    /** Utility function to check that an object is a nonempty array.&#10;     *  @param obj The object.&#10;     */&#10;    function isNonEmptyArray(obj) {&#10;	return (obj instanceof Array &amp;&amp; obj.length &gt; 0);&#10;    }&#10;&#10;    /** Utility function to limit the range of a number&#10;     *  and to force it to be an integer. If the value argument&#10;     *  is a string, then it will be converted to a Number.&#10;     *  @param value The value to limit.&#10;     *  @param low The low value.&#10;     *  @param high The high value.&#10;     */&#10;    function limit(value, low, high) {&#10;	var parsed = parseInt(value);&#10;	if (typeof parsed === 'undefined') {&#10;	    parsed = parseFloat(value);&#10;	    if (typeof parsed === 'undefined') {&#10;	        self.error(&quot;Expected a number between &quot; + low + &quot; and &quot; + high + &quot;, but got &quot; + value);&#10;	        return 0;&#10;	    } else {&#10;	        parsed = Math.floor(parsed);&#10;	    }&#10;	}&#10;	if (parsed &lt; low) {&#10;	    return low;&#10;	} else if (parsed &gt; high) {&#10;	    return high;&#10;	} else {&#10;	    return parsed;&#10;	}&#10;    }&#10;    &#10;    /** Register a new user.  &#10;     *  This function repeats at registerInterval until successful or until&#10;     *  maxRegisterAttempts.  Some wait time is given between attempts for the &#10;     *  user to click the button on the Hue bridge.&#10;     */&#10;    function registerUser() {&#10;    &#10;	    // Should be of the format {&quot;devicetype&quot;:&quot;my_hue_app#iphone peter&quot;}&#10;	    // http://www.developers.meethue.com/documentation/getting-started&#10;	    // (free registration required).&#10;		var registerData = {&#10;		    devicetype : &quot;hue_accessor#&quot; + userName,&#10;		};&#10;		var options = {&#10;		    body : JSON.stringify(registerData),&#10;		    timeout: 10000,&#10;		    url : url&#10;		};&#10;		http.post(options, function(response) {&#10;		    var rsp = JSON.parse(response.body);&#10;	        if (debug) {&#10;		        console.log(&quot;Hue.js registerUser(): Response &quot; + JSON.stringify(rsp));&#10;	        }&#10;		    if (isNonEmptyArray(rsp) &amp;&amp; rsp[0].error) {&#10;		        &#10;		        var description = rsp[0].error.description;&#10;	&#10;		        if (description.match(&quot;link button not pressed&quot;)) {&#10;		            // Retry registration for the given number of attempts.&#10;		            console.log(&quot;Please push the link button on the Hue bridge.&quot;);&#10;		            registerAttempts++;&#10;		            &#10;		            if (registerAttempts &lt; maxRegisterAttempts){&#10;		            	handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;		            } else {&#10;		                throw &quot;Failed to create user after &quot; + registerAttempts +&#10;	                    &quot; attempt(s).&quot;;&#10;		            }&#10;		            return;&#10;		        } else {&#10;		            throw description;&#10;		        }&#10;		    } else if ((isNonEmptyArray(rsp) &amp;&amp; rsp[0].success)) {&#10;		    	authenticated = true;&#10;		    	&#10;		    	// The bridge will return a username.  Save it.&#10;		    	userName = rsp[0].success.username;&#10;		    	self.setParameter('userName', userName);&#10;		    	self.send('assignedUserName', userName);&#10;		        if (handleRegisterUser !== null) {&#10;		            clearTimeout(handleRegisterUser);&#10;		        }&#10;			// contact the bridge and find the available lights&#10;			contactBridge();&#10;		    } else {&#10;	                if (debug) {&#10;		            console.log(&quot;Hue.js registerUser(): Response2 &quot; + JSON.stringify(response));&#10;	                }&#10;		        console.log(JSON.stringify(JSON.parse(response.body)[0].success));&#10;		        throw &quot;Unknown error registering new user&quot;;&#10;		    }&#10;		});&#10;    }&#10;    &#10;    return hue;&#10;}&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function() {&#10;    &#10;    this.input('commands', {&#10;    	type: &quot;JSON&quot;,&#10;    	value: &quot;{}&quot;&#10;    });&#10;    this.parameter('bridgeIP', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('userName', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;ptolemyuser&quot;&#10;    });&#10;    this.parameter('onWrapup', {&#10;        value : &quot;turn off&quot;,&#10;        type: &quot;string&quot;,&#10;        options : [&quot;none&quot;, &quot;restore&quot;, &quot;turn off&quot;]&#10;    });&#10;    this.output('assignedUserName', {&#10;    	type: &quot;string&quot;&#10;    });&#10;    &#10;    // Call the Hue function binding &quot;this&quot;, to create local state variables &#10;    // while providing access to accessor functions.  &#10;    // Setting &quot;this.hue&quot; makes hue available in other accessor functions, e.g.&#10;    // initialize().&#10;    // TODO:  Test with two accessors to make sure each has separate state.&#10;    this.hue = Hue.call(this);&#10;};&#10;&#10;/** Add an input handler to react to commands.  &#10; *  If a bridge IP address has been given, contact the bridge to check if it is&#10; *  present.  Next, register the user if not already registered.  &#10; */&#10;&#10;exports.initialize = function() {&#10;	this.authenticated = false;&#10;	&#10;	// FIXME:  Wait until autheticated to provide commands?  We need a way to &#10;	// dynamically supply the IP address.  Recommend using a separate port.&#10;    this.addInputHandler('commands', this.hue.issueCommand);&#10;    this.registerAttempts = 0;&#10;    &#10;    if (this.getParameter('bridgeIP') !== null &amp;&amp; &#10;    		this.getParameter('bridgeIP') !== &quot;&quot;) {&#10;    			this.hue.connect();&#10;    }&#10;};&#10;&#10;/** Turn off changed lights on wrapup. */&#10;// TODO:  Test restore feature?&#10;exports.wrapup = function() {&#10;    var errorLights = [];&#10;    var cmd = JSON.stringify({on:false});&#10;    var options = { };&#10;    &#10;    var action = this.getParameter('onWrapup');&#10;    if (action !== &quot;none&quot;) {&#10;	    for (var i = 0; i &lt; this.hue.changedLights.length; i++) {&#10;	        options = {&#10;	            body : cmd,&#10;	            timeout : 10000, &#10;	            url : &quot;http://&quot; + this.get(&quot;bridgeIP&quot;) + &quot;/api/&quot; + &#10;	            	this.getParameter(&quot;userName&quot;) + &quot;/lights/&quot; + this.hue.changedLights[i] + &#10;	            	&quot;/state/&quot;&#10;	        };&#10;	        &#10;	        var self = this;&#10;	        &#10;	        http.put(options, function(response) {&#10;	            if (debug) {&#10;	        		console.log(&quot;Hue.js wrapup(): Response &quot; + JSON.stringify(response));&#10;            	}&#10;	            if (isNonEmptyArray(response) &amp;&amp; response[0].error) {&#10;	                var lightID = self.get('lightID').toString();&#10;	                errorLights.push(lightID);&#10;	            }&#10;	        });&#10;	    }&#10;	&#10;	    if (errorLights.length !== 0) {&#10;	        error(&quot;Error turning off lights &quot; + errorLights.toString());&#10;	    }&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/devices/Hue.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[650.0, 570.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <property name="commands" class="ptolemy.actor.parameters.PortParameter" value="{}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="bridgeIP" class="ptolemy.data.expr.Parameter" value="10.42.0.235">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="userName" class="ptolemy.data.expr.Parameter" value="tvLr3UYsvlPCsOe4EfoIzpIXt5YPrOkKHDGLGVrK">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="onWrapup" class="ptolemy.data.expr.Parameter" value="none">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="commands" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="assignedUserName" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TestDisplay2" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Display data on the console.&#10;//&#10;// Copyright (c) 2016. The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Display data on the console.&#10; *&#10; *  @accessor test/TestDisplay&#10; *  @param input The output&#10; *  @author Christopher Brooks&#10; *  @version $$Id: TestHue.xml 75267 2016-10-15 15:21:04Z beth@berkeley.edu $$&#10; */&#10;&#10;exports.setup = function() {&#10;    this.input('input');&#10;    this.output('output');&#10;};&#10;&#10;exports.initialize = function() {&#10;    this.addInputHandler('input', function() {&#10;        var inputValue = this.get('input');&#10;        console.log(inputValue);&#10;        this.send('output', inputValue);&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://www.terraswarm.org/accessors/test/TestDisplay.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[815.0, 575.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Moto360SensorListener.accelerometer" relation="relation"/>
    <link port="JavaScript.a" relation="relation"/>
    <link port="JavaScript.hand" relation="relation2"/>
    <link port="TestDisplay.input" relation="relation2"/>
    <link port="TestDisplay.output" relation="relation5"/>
    <link port="Command.output" relation="relation3"/>
    <link port="Command.trigger" relation="relation5"/>
    <link port="Hue.commands" relation="relation3"/>
    <link port="Hue.assignedUserName" relation="relation4"/>
    <link port="TestDisplay2.input" relation="relation4"/>
</entity>
