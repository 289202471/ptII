<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="BrowserFixedPage" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={162, 46, 1065, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[831, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.193469804945913">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{295.95507812499994, 247.52014264235692}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This model displays a fixed, static web page that&#10;is opened when the model initializes. The content&#10;of the web page is given by the parameters of the&#10;Browser accessor.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-40.0, 200.0]">
        </property>
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{5.0, 60.0}">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="18">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Basic display in a web page.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[65.0, 50.0]">
        </property>
    </property>
    <entity name="Browser" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor that connects with a browser on the local host.&#10;//&#10;// Copyright (c) 2016-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Accessor that connects with a browser on the local host.&#10; *  This is intended to be used by a swarmlet to interact with users,&#10; *  for example by displaying content and providing forms to be filled in.&#10; *  Initial content on the page may be specified using the *content*&#10; *  parameter and HTML header content may be specified using *header*.&#10; *  &#10; *  Whatever text is received on the *html* input port will replace the content&#10; *  of the web page. Normally, this will be HTML text without any DOCTYPE or&#10; *  header and without a body tag. Each time new text is received, the content&#10; *  of the page will be updated.&#10; *  &#10; *  The page will be opened upon initialize if *content* is not empty.&#10; *  Otherwise, it will be opened when the first *html* input is received.&#10; *  &#10; *  The *resources* input can be used to provide resources, such as images,&#10; *  that will be used by the HTML content provided on the *html* input.&#10; *  Note that updating a resource with the same name will not normally result&#10; *  in the web page being updated because browsers normally cache such resources.&#10; *  If HTML content refers to a resource that has already been loaded (or more&#10; *  precisely, that has the same name as a resource that has already been loaded),&#10; *  then the browser will not load the resource again, but rather will use the&#10; *  previous version.  You can force the browser to reload a resource by augmenting&#10; *  the name with parameters (which will be ignored). For example, if you have&#10; *  a resource named &quot;image.jpg&quot; that you wish to update it, then you can&#10; *  specify HTML like this:&#10; *  &#10; *     &amp;lt;img src=&quot;image.jpg?count=n&quot;/&amp;gt;&#10; *  &#10; *  where *n* is a unique integer not previously seen by the browser.&#10; *  This will force the browser to go back to the server to retrieve the resource.&#10; *&#10; *  The way this accessor works on most hosts is that it starts a web server on localhost&#10; *  at the specified port that serves the specified web page and then instructs&#10; *  the system default browser to load the default page from that server.&#10; *  The page served by the server includes a script that listens for websocket&#10; *  connections that are used to provide HTML content to display on the page.&#10; *  Some hosts, however, such as the cordova and browser hosts, natively use&#10; *  a browser as part of the host, so in these cases, no web server nor socket&#10; *  connection is needed and the *port* parameter will be ignored.&#10; *  &#10; *  @accessor utilities/Browser&#10; *  @input {string} html HTML content to render in the body of the page displayed&#10; *   by the browser.&#10; *  @input resources An object where each named property is an object containing&#10; *   two properties, 'data' and 'contentType'. The name of the named property is&#10; *   the path to be used to access the resource. The 'data' property is the resource&#10; *   itself, an arbitrary collection of bytes. The 'contentType' is the MIME&#10; *   type of the data.&#10; *  @parameter {string} header HTML content to include in the header part of the web page.&#10; *   This is a good place to script definitions.&#10; *  @parameter {string} content HTML content to include in the main body of the page.&#10; *   If this is non-empty, then the page is opened upon initialize.&#10; *   Otherwise, the page is opened when the first *html* input is received.&#10; *  @parameter {int} port The port to use, if needed, for websocket communication between this&#10; *   accessor (which updates the HTML content of the web page) and the browser.&#10; *   The web page will listen on this socket for content and display whatever arrives&#10; *   on that port. This is ignored on hosts that do not need to invoke an external browser.&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should be no&#10;// space between the / and the * and global. See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*global  exports, require */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var Browser = require('browser');&#10;var browser = null;&#10;&#10;exports.setup = function () {&#10;    this.parameter('header', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.parameter('content', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.input('html', {&#10;        'type': 'string'&#10;    });&#10;    this.input('resources');&#10;    this.output('post', {&#10;        'type': 'JSON'&#10;    });&#10;    this.parameter('port', {&#10;        'type': 'int',&#10;        'value': 8080&#10;    });&#10;};&#10;&#10;var display = function () {&#10;    // Check for any new resources.&#10;    var resources = this.get('resources');&#10;    if (resources) {&#10;        for (var name in resources) {&#10;            browser.addResource(name, resources[name].data, resources[name].contentType);&#10;        }&#10;    }&#10;&#10;    var toDisplay = this.get('html');&#10;    browser.display(toDisplay);&#10;};&#10;&#10;&#10;exports.initialize = function () {&#10;    var self = this;&#10;    &#10;    browser = new Browser.Browser(&#10;            {'port': self.getParameter('port')},&#10;            self.getParameter('header'),&#10;            self.getParameter('content')&#10;    );&#10;    // Listen for any POST to the server.&#10;    browser.addListener('/', function(data) {&#10;        self.send('post', JSON.parse(data));&#10;    });&#10;&#10;    this.addInputHandler('html', display.bind(this));&#10;&#10;    this.addInputHandler('resources', function() {&#10;        var resources = this.get('resources');&#10;        for (var name in resources) {&#10;            browser.addResource(name, resources[name].data, resources[name].contentType);&#10;        }&#10;    });&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (browser) {&#10;        browser.stop();&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/Browser.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[75.0, 150.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor that connects with a browser on the local host.&#10; This is intended to be used by a swarmlet to interact with users,&#10; for example by displaying contents and providing forms to be filled in.&#10; Whatever text is received on the &lt;strong&gt;html&lt;/strong&gt; input port will replace the main content&#10; of the web page. Normally, this will be HTML text without any DOCTYPE or&#10; header and without a body tag. Each time new text is received, the content&#10; of the page will be updated.&lt;/p&gt;&#10;&lt;p&gt; The &lt;strong&gt;resources&lt;/strong&gt; input can be used to provide resources, such as images,&#10; that will be used by the HTML content provided on the &lt;strong&gt;html&lt;/strong&gt; input.&#10; Note that updating a resource with the same name will not normally result&#10; in the web page being updated because browsers normally cache such resources.&#10; If HTML content refers to a resource that has already been loaded (or more&#10; precisely, that has the same name as a resource that has already been loaded),&#10; then the browser will not load the resource again, but rather will use the&#10; previous version.  You can force the browser to reload a resource by augmenting&#10; the name with parameters (which will be ignored). For example, if you have&#10; a resource named &amp;quot;image.jpg&amp;quot; that you wish to update it, then you can&#10; specify HTML like this:&#10; &lt;pre&gt;&#10;    &lt;img src=&quot;image.jpg?count=n&quot;/&gt;&#10; &lt;pre&gt;&#10; where &lt;em&gt;n&lt;/em&gt; is a unique integer not previously seen by the browser.&#10; This will force the browser to go back to the server to retrieve the resource.&lt;/p&gt;&#10;&lt;p&gt; The way this accessor works on most hosts is that it starts a web server on localhost&#10; at the specified port that serves the specified web page and then instructs&#10; the system default browser to load the default page from that server.&#10; The page served by the server includes a script that listens for websocket&#10; connections that are used to provide HTML content to display on the page.&#10; Some hosts, however, such as the cordova and browser hosts, natively use&#10; a browser as part of the host, so in these cases, no web server nor socket&#10; connection is needed and the &lt;strong&gt;port&lt;/strong&gt; parameter will be ignored.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="html (port)" class="ptolemy.kernel.util.StringAttribute" value="HTML content to render in the body of the page displayed&#10;  by the browser.">
            </property>
            <property name="resources (port)" class="ptolemy.kernel.util.StringAttribute" value="An object where each named property is an object containing&#10;  two properties, 'data' and 'contentType'. The name of the named property is&#10;  the path to be used to access the resource. The 'data' property is the resource&#10;  itself, an arbitrary collection of bytes. The 'contentType' is the MIME&#10;  type of the data.">
            </property>
            <property name="header (parameter)" class="ptolemy.kernel.util.StringAttribute" value="HTML content to include in the header part of the web page.&#10;  This is a good place to script definitions.">
            </property>
            <property name="port (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The port to use, if needed, for websocket communication between this&#10;  accessor (which updates the HTML content of the web page) and the browser.&#10;  The web page will listen on this socket for content and display whatever arrives&#10;  on that port. This is ignored on hosts that do not need to invoke an external browser.">
            </property>
        </property>
        <property name="header" class="ptolemy.data.expr.Parameter" value="&lt;title&gt;Graph2d or Basic Example&lt;/title&gt;&#10;&lt;style type=&quot;text/css&quot;&gt;&#10;      body, html {font-family: sans-serif;}&#10;&lt;/style&gt;&#10;&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis.min.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;&#10;&lt;script&gt;&#10;// Use jQuery (included automatically by the Browser accessor) to execute after page load.&#10;// Note that we really want a single dollar sign here, but CapeCode uses a dollar sign to signal&#10;// a reference to externally defined parameter. It converts double dollar signs to single ones.&#10;$$(function() {&#10;    var container = document.getElementById('visualization');&#10;    var items = [&#10;        {x: '2014-06-11', y: 10},&#10;        {x: '2014-06-12', y: 25},&#10;        {x: '2014-06-13', y: 30},&#10;        {x: '2014-06-14', y: 10},&#10;        {x: '2014-06-15', y: 15},&#10;        {x: '2014-06-16', y: 30}&#10;    ];&#10;    var dataset = new vis.DataSet(items);&#10;    var options = {&#10;        start: '2014-06-10',&#10;        end: '2014-06-18'&#10;    };&#10;    var Graph2d = new vis.Graph2d(container, dataset, options);&#10;});&#10;&lt;/script&gt;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                </property>
            </property>
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="content" class="ptolemy.data.expr.Parameter" value="&lt;div id=&quot;visualization&quot;&gt;&lt;/div&gt;">
            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                </property>
            </property>
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="html" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="resources" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="post" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
    </entity>
</entity>
