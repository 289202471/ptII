<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="kubi" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-250.0, -10.0]">
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 22, 1280, 774}, maximized=true}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1046, 664]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.5120000000000023">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{523.0000000000031, 331.9999999999991}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Victor Nouvellet">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-45.0, 175.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="tag36_11_00586.pdf">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-25.0, 90.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="tag36_11_00586.pdf">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{150, 310}">
            </property>
        </property>
    </property>
    <property name="KubiServerIPAddress" class="ptolemy.data.expr.Parameter" value="&quot;10.123.45.678&quot;">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-75.0, 150.0]">
        </property>
    </property>
    <entity name="ClockKubiInterface" class="ptolemy.actor.lib.jjs.JavaScript">
        <display name="Clock Kubi Interface"/>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;	this.input('tags');&#10;	this.parameter('speed', {type: 'string', value: 100});&#10;	this.parameter('width', {value: 360});&#10;	this.parameter('height', {value: 480});&#10;	this.parameter('precision', {value: 10});&#10;	this.output('movement');&#10;}&#10;&#10;var last_move_ts = new Date();&#10;var network_time = 500;&#10;&#10;function tagsReaction() {&#10;	var width = this.getParameter('width');&#10;	var height = this.getParameter('height');&#10;	var precision = this.getParameter('precision');;&#10;	var speed = this.getParameter('speed');&#10;	&#10;	var tags = this.get('tags');&#10;	&#10;	var x = (width/2) - tags[0].center[0];&#10;	var y = (height/2) - tags[0].center[1];&#10;&#10;	var absX = Math.abs(x);&#10;	var absY = Math.abs(y);&#10;	console.log(&quot;April is &quot; + ((x &gt; 0) ? &quot;right&quot; : &quot;left&quot;) + &quot; by &quot; + absX + &quot;px&quot;);&#10;	&#10;	var pan = Math.log(precision*absX)*(x/absX);&#10;	var tilt = Math.log(precision*absY)*(y/absY);&#10;	if ((new Date()-last_move_ts) &gt; network_time) {&#10;		this.send('movement', {pan: pan, panSpeed: speed, tilt: tilt, tiltSpeed: speed});&#10;		console.log(&quot;Movement sent&quot; + pan);&#10;		last_move_ts = new Date();&#10;	}&#10;}&#10;&#10;exports.initialize = function () {&#10;	this.addInputHandler('tags', tagsReaction);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[305.0, 340.0]">
        </property>
        <property name="speed" class="ptolemy.data.expr.Parameter" value="200">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_rotatePorts" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="precision" class="ptolemy.data.expr.Parameter" value="10">
        </property>
        <port name="script" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="movement" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="tags" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="Kubi" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** &#10; * Controls a Revolverobotics's Kubi via a iOS Kubi Server app.&#10; * To use it, you need to provide the IP address of the iOS device &#10; * which you can find in Wifi's settings.&#10; * &#10; * First, follow iOS Kubi Server simple steps to start the server given in&#10; * the app itself. Autoconnect toggle lets you start this setup automaticaly&#10; * next time you open the app. CAUTION: Camera streaming will start too &#10; * if Autoconnect is activated!&#10; * &#10; * Second,&#10; * FIXME: What to do next?&#10; *  &#10; * @author Victor Nouvellet &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, httpRequest, require, setTimeout  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var http = require('httpClient');&#10;&#10;// Node Host needs util defined.&#10;var util = require('util');&#10;&#10;/** Inputs and outputs definition **/&#10;exports.setup = function() {&#10;    this.input('command');&#10;    this.parameter('kubiLocalServerIP', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('kubiLocalServerPort', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;8080&quot;&#10;    });&#10;    this.parameter('incremental', {type: 'boolean', value: true});&#10;    this.output('urlRequested', {&#10;        type: &quot;string&quot;&#10;    });&#10;};&#10;&#10;function Kubi() {&#10;    var kubi = {};&#10;    &#10;    kubi.lastUrlRequested = &quot;&quot;;&#10;&#10;    // Private variables&#10;    var debug = true;&#10;    var ipAddress = &quot;&quot;;&#10;    var port = &quot;&quot;;&#10;    var path = &quot;&quot;;&#10;    var url = &quot;&quot;;&#10;    var connected = false;&#10;    &#10;    // Use self in contained functions so the caller does not have to bind &quot;this&quot;&#10;    // on each function call.&#10;    var self = this;&#10;    &#10;    //Private functions.&#10;&#10;     /**&#10;     *  Parse command to create a command object&#10;     */&#10;     function parseCommand(command) {&#10;        var commandObject = {};&#10;&#10;        if (typeof command === 'string') {&#10;            command = JSON.parse(command);&#10;        }&#10;&#10;        // Check whether input is valid&#10;        if (Object.keys(command).length &lt; 1) {&#10;            self.error(&quot;Command is empty: &quot; + command);&#10;        } else {&#10;            // Get interresting properties&#10;            if (typeof command.pan !== 'undefined') {&#10;                commandObject.pan = command.pan;&#10;            }&#10;            if (typeof command.panDelta !== 'undefined') {&#10;                commandObject.pan = command.panDelta;&#10;            }&#10;            if (typeof command.tilt !== 'undefined') {&#10;                commandObject.tilt = command.tilt;&#10;            }&#10;            if ( typeof command.tiltDelta !== 'undefined') {&#10;                commandObject.tilt = command.tiltDelta;&#10;            }&#10;            if (typeof command.tiltSpeed !== 'undefined') {&#10;                commandObject.tiltSpeed = command.tiltSpeed;&#10;            }&#10;            if (typeof command.panSpeed !== 'undefined') {&#10;                commandObject.panSpeed = command.panSpeed;&#10;            }&#10;            //FIXME: Use commandObject.pan = command.pan || command.panDelta || 0; instead?&#10;        }&#10;&#10;        return commandObject;&#10;     }&#10;&#10;     /**&#10;     *  Build URL to request with commands&#10;     */&#10;     function buildGetUrl(incremental, correctCommand) {&#10;        var requestUrl = url;&#10;        var panVar, tiltVar;&#10;        var panSpeedVar = &quot;panSpeed&quot;;&#10;        var tiltSpeedVar = &quot;tiltSpeed&quot;;&#10;&#10;        console.log(&quot;Building URL...&quot;);&#10;&#10;        if (incremental == true) {&#10;            panVar = &quot;panDelta&quot;;&#10;            tiltVar = &quot;tiltDelta&quot;;&#10;        } else {&#10;            panVar = &quot;pan&quot;;&#10;            tiltVar = &quot;tilt&quot;;&#10;        }&#10;        requestUrl += &quot;?&quot; + panVar + &quot;=&quot; + correctCommand.pan + &quot;&amp;&quot;&#10;                                             + panSpeedVar + &quot;=&quot; + correctCommand.panSpeed + &quot;&amp;&quot;&#10;                                             + tiltVar + &quot;=&quot; + correctCommand.tilt + &quot;&amp;&quot;&#10;                                             + tiltSpeedVar + &quot;=&quot; + correctCommand.tiltSpeed;&#10;        return requestUrl;&#10;     }&#10;&#10;     /**&#10;     *  Report all server errors if they exist and return true in this case.&#10;     */&#10;     function reportIfError(response) {&#10;        var body = response.body;&#10;        //FIXME: Server not ready to give json...&#10;        return true; //Remove this line after server update&#10;        &#10;        if (typeof body == &quot;string&quot;) {&#10;            body = JSON.parse(body);&#10;        }&#10;&#10;        if (body instanceof Array &amp;&amp; obj.length &gt; 0 &amp;&amp; body[0].error) {&#10;            self.error(&quot;Server error report: &quot; + error.description);&#10;            return true;&#10;        }&#10;        return false;&#10;     }&#10;    &#10;    // Public functions.&#10;    &#10;    kubi.connect = function() {&#10;        if (debug) {&#10;            console.log(&quot;Kubi.js: Connecting...&quot;);&#10;        }&#10;        ipAddress = self.getParameter('kubiLocalServerIP');&#10;        port = self.getParameter('kubiLocalServerPort') || &quot;8080&quot;;&#10;        path = self.getParameter('incremental') ? &quot;/incremental&quot; : &quot;/absolute&quot;;&#10;        &#10;        if (ipAddress === null || ipAddress.trim() === &quot;&quot;) {&#10;            throw &quot;No IP Address is given for the Kubi server.&quot;;&#10;        }&#10;        &#10;        url = &quot;http://&quot; + ipAddress + &quot;:&quot; + port + path;&#10;        &#10;        connected = true;&#10;        //TODO: Implement token auth on server side&#10;     };&#10;     &#10;     /**&#10;     *  Issue a command to the server.&#10;     */&#10;     kubi.issueCommand = function () {&#10;        var command = self.get('command');&#10;        if (debug) {&#10;            console.log(&quot;Kubi.js: issueCommand(): &quot; + util.inspect(command));&#10;        }&#10;         //TODO: check authentification, queue command until server authentification&#10;         &#10;         kubi.processCommand(command);&#10;     };&#10;     &#10;     /**&#10;     *  Process received command after authentification and connectivity checks.&#10;     */&#10;     kubi.processCommand = function (command) {&#10;        console.log(&quot;Proccessing command&quot;);&#10;        var commandObject = parseCommand(command);&#10;        console.log(&quot;Got command object &quot;);&#10;        if (typeof commandObject !== 'undefined') {&#10;            var requestUrl = buildGetUrl(self.getParameter('incremental'), commandObject);&#10;            &#10;            http.get(requestUrl, function(response) {&#10;            	if (response !== null) {&#10;	                if (false) {&#10;	                    console.log(&quot;Kubi.js: processCommands(): response status: &quot; + response.statusMessage);&#10;	                    console.log(&quot;Kubi.js: processCommands(): response body: &quot; + response.body);&#10;	                }&#10;	                kubi.lastUrlRequested = requestUrl;&#10;	                reportIfError(response);&#10;            	} else {&#10;            		self.error(&quot;Unable to connect to the server on &quot; + requestUrl);&#10;            	}&#10;            	&#10;            	self.send('urlRequested', requestUrl);&#10;            });&#10;            &#10;            return;&#10;        } else {&#10;            console.log(&quot;commandObject undefined&quot;);&#10;        }&#10;     };&#10;     &#10;     &#10;     return kubi;&#10;}&#10;&#10;exports.initialize = function() {&#10;    this.kubi = Kubi.call(this);&#10;    &#10;    console.log(&quot;Kubi.js: Initializing...&quot;);&#10;    this.addInputHandler('command', this.kubi.issueCommand);&#10;    console.log(&quot;Kubi.js: Handler added&quot;);&#10;    this.kubi.connect();&#10;};&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[465.0, 340.0]">
        </property>
        <property name="kubiLocalServerIP" class="ptolemy.data.expr.Parameter" value="$KubiServerIPAddress">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="kubiLocalServerPort" class="ptolemy.data.expr.Parameter" value="8080">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="incremental" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <port name="script" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="urlRequested" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ImageDisplay" class="ptolemy.actor.lib.image.ImageDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={891, 112, 360, 524}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="_pictureSize" class="ptolemy.actor.gui.SizeAttribute" value="[360, 480]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{310.0, 245.0}">
        </property>
    </entity>
    <entity name="AprilTags" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/**&#10;Accessor to detect AprilTags in an image or stream of images.&#10;An AprilTag is a pattern of dark and light squares similar to a QR code but easier for&#10;cameras to detect robustly and at a distance.&#10;AprilTags were created by Associate Professor Edwin Olson (ebolson@umich.edu),&#10;EECS, University of Michigan. See [https://april.eecs.umich.edu/](https://april.eecs.umich.edu/#in_browser).&#10;&#10;The implementation of this accessor on the Ptolemy II/Nashorn accessor host&#10;uses an older Java implementation of the AprilTags detector written by Edwin Olson&#10;and more recently supplanted by a C version that performs much better. But this Java&#10;version is more easily included in Ptolemy II in a portable way. If you need better&#10;performance, consider replacing this with the C implementation and using JNI to interface&#10;to Ptolemy II.&#10;&#10;The input to this accessor is an image or a stream of images, e.g. from the Camera&#10;accessor.  There are two outputs. The one named _output_ is a modified version&#10;of the input image that outlines any detected AprilTags in the image&#10;and indicates their center and ID.  The _tags_ output is an array of&#10;objects representing the detected tags. Each object includes the following fields:&#10;&#10;+ _id_: The ID of the detected tag.&#10;+ _center_: An array with two doubles giving the center of the tag in pixel coordinates.&#10;+ _perimeter_: An array with four arrays, each of which gives the x and y coordinates of&#10;  a corner of the AprilTag.&#10;&#10;The AprilTags detector has a large number of parameters that can be tuned via&#10;the _options_ input. To set an option, provide a JSON object with a field matching&#10;the option name.  The options are described below using descriptions provided by&#10;by Edwin Olson in his Java implementation of an AprilTag detector:&#10;&#10;+ _MagThresh_: When growing components, the intra component variation is&#10;  allowed to grow when the component is small in size. This&#10;  threshold affects how much. The default is 1200.&#10;+ _MaxEdgeCost_: Set the maximum angle range allowed for the gradient directions&#10;  when connecting edges, in radians. This defaults to the radian&#10;  equivalent of 30 degrees.&#10;+ _MinMag_: Set the gradient magnitude threshold for ignoring pixels.&#10;  Do not consider pixels whose gradient magnitude is less than&#10;  minMag. Small values make the detector more sensitive, but also&#10;  force us to consider many more edges resulting in slower&#10;  computation time. A value of 0.001 is very sensitive. A value&#10;  of 0.01 is quite fast. The default is 0.004.&#10;+ _SegDecimate_: Set whether decimating before segmenting is enabled.&#10;  Instead of blurring the input image before segmentation, we&#10;  can achieve similar effects by decimating the image by a factor&#10;  of two. When enabled, this option applies a block LPF filter of&#10;  width 2, then decimates the image. With this option, not only&#10;  can we safely set segSigma = 0, but the slowest part of the&#10;  algorithm (the segmentation) runs about 4 times faster. The&#10;  downside is that the position of the targets is determined&#10;  based on the segmentation: lower resolution will result in more&#10;  localization error. However, the effect on quality is quite&#10;  modest, and this optimization is generally recommended (along&#10;  with segSigma = 0). If segSigma is non-zero, the filtering by&#10;  segSigma occurs first, followed by the block LPF, and the&#10;  decimation. This defaults to false, indicating that the option&#10;  is not enabled.&#10;+ _SegSigma_: Set the Gaussian smoothing kernel applied to image (0 == no filter)&#10;  used when detecting the outline of the box. It is almost always&#10;  useful to have some filtering, since the loss of small details&#10;  won't hurt. Recommended value = 0.8 (the default). The case where sigma ==&#10;  segsigma has been optimized to avoid a redundant filter&#10;  operation.&#10;+ _Sigma_: Set the Gaussian smoothing kernel applied to image (0 == no filter, the default)&#10;  used when sampling bits. Filtering is a good idea in cases&#10;  where A) a cheap camera is introducing artifical sharpening, B)&#10;  the bayer pattern is creating artifcats, C) the sensor is very&#10;  noisy and/or has hot/cold pixels. However, filtering makes it&#10;  harder to decode very small tags. Reasonable values are 0, or&#10;  [0.8, 1.5].&#10;+ _TagFamily_: Set the name of the tag family being detected.&#10;  This defaults to &quot;Tag36h11&quot;.&#10;  The supported families are &quot;Tag16h5&quot;, &quot;Tag25h7&quot;, &quot;Tag25h9&quot;, &quot;Tag36h10&quot;, and &quot;Tag36h11&quot;.&#10;  The default family seems least susceptible to false positives.&#10;+ _ThetaThresh_: When growing components, the intra component variation is&#10;  allowed to grow when the component is small in size. This&#10;  threshold affects how much. The default is 100.&#10;&#10;  @accessor image/AprilTags&#10;  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10;  @input input An input image.&#10;  @output output An output image, with detected AprilTags outlined in green and identified.&#10;  @output tags An array of objects, one object for each tag detected in the image.&#10;  @parameter options The options for the detector. This is a JSON object with fields defined above.&#10;  It defaults to an empty object, meaning to use default values for all the otpions.&#10;  @version $$Id: AprilTags.xml 75695 2017-02-10 19:27:27Z cxh $$&#10;*/&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, exports, get, input, output, removeInputHandler, require, send,  */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var aprilTags = require('aprilTags');&#10;&#10;exports.setup = function () {&#10;    this.input('input');&#10;    this.output('output');&#10;    this.output('tags');&#10;    this.input('options', {&#10;        'type': 'JSON',&#10;        'value': ''&#10;    });&#10;};&#10;&#10;var handle;&#10;exports.initialize = function () {&#10;    handle = this.addInputHandler('input', function () {&#10;        var options = this.get('options');&#10;        var image = this.get('input');&#10;        var result = aprilTags.filter(image, options);&#10;        this.send('output', result);&#10;        var tags = aprilTags.tags();&#10;        if (tags) {&#10;            this.send('tags', tags);&#10;        }&#10;    });&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (handle) {&#10;        this.removeInputHandler(handle);&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/image/AprilTags.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[30.0, 290.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor to detect AprilTags in an image or stream of images.&#10;An AprilTag is a pattern of dark and light squares similar to a QR code but easier for&#10;cameras to detect robustly and at a distance.&#10;AprilTags were created by Associate Professor Edwin Olson (ebolson@umich.edu),&#10;EECS, University of Michigan. See &lt;a href=&quot;https://april.eecs.umich.edu/#in_browser&quot;&gt;https://april.eecs.umich.edu/&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt;The implementation of this accessor on the Ptolemy II/Nashorn accessor host&#10;uses an older Java implementation of the AprilTags detector written by Edwin Olson&#10;and more recently supplanted by a C version that performs much better. But this Java&#10;version is more easily included in Ptolemy II in a portable way. If you need better&#10;performance, consider replacing this with the C implementation and using JNI to interface&#10;to Ptolemy II.&lt;/p&gt;&#10;&lt;p&gt;The input to this accessor is an image or a stream of images, e.g. from the Camera&#10;accessor.  There are two outputs. The one named &lt;em&gt;output&lt;/em&gt; is a modified version&#10;of the input image that outlines any detected AprilTags in the image&#10;and indicates their center and ID.  The &lt;em&gt;tags&lt;/em&gt; output is an array of&#10;objects representing the detected tags. Each object includes the following fields:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;id&lt;/em&gt;: The ID of the detected tag.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;center&lt;/em&gt;: An array with two doubles giving the center of the tag in pixel coordinates.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;perimeter&lt;/em&gt;: An array with four arrays, each of which gives the x and y coordinates of&#10;a corner of the AprilTag.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;The AprilTags detector has a large number of parameters that can be tuned via&#10;the &lt;em&gt;options&lt;/em&gt; input. To set an option, provide a JSON object with a field matching&#10;the option name.  The options are described below using descriptions provided by&#10;by Edwin Olson in his Java implementation of an AprilTag detector:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;MagThresh&lt;/em&gt;: When growing components, the intra component variation is&#10;allowed to grow when the component is small in size. This&#10;threshold affects how much. The default is 1200.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;MaxEdgeCost&lt;/em&gt;: Set the maximum angle range allowed for the gradient directions&#10;when connecting edges, in radians. This defaults to the radian&#10;equivalent of 30 degrees.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;MinMag&lt;/em&gt;: Set the gradient magnitude threshold for ignoring pixels.&#10;Do not consider pixels whose gradient magnitude is less than&#10;minMag. Small values make the detector more sensitive, but also&#10;force us to consider many more edges resulting in slower&#10;computation time. A value of 0.001 is very sensitive. A value&#10;of 0.01 is quite fast. The default is 0.004.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;SegDecimate&lt;/em&gt;: Set whether decimating before segmenting is enabled.&#10;Instead of blurring the input image before segmentation, we&#10;can achieve similar effects by decimating the image by a factor&#10;of two. When enabled, this option applies a block LPF filter of&#10;width 2, then decimates the image. With this option, not only&#10;can we safely set segSigma = 0, but the slowest part of the&#10;algorithm (the segmentation) runs about 4 times faster. The&#10;downside is that the position of the targets is determined&#10;based on the segmentation: lower resolution will result in more&#10;localization error. However, the effect on quality is quite&#10;modest, and this optimization is generally recommended (along&#10;with segSigma = 0). If segSigma is non-zero, the filtering by&#10;segSigma occurs first, followed by the block LPF, and the&#10;decimation. This defaults to false, indicating that the option&#10;is not enabled.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;SegSigma&lt;/em&gt;: Set the Gaussian smoothing kernel applied to image (0 == no filter)&#10;used when detecting the outline of the box. It is almost always&#10;useful to have some filtering, since the loss of small details&#10;won't hurt. Recommended value = 0.8 (the default). The case where sigma ==&#10;segsigma has been optimized to avoid a redundant filter&#10;operation.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Sigma&lt;/em&gt;: Set the Gaussian smoothing kernel applied to image (0 == no filter, the default)&#10;used when sampling bits. Filtering is a good idea in cases&#10;where A) a cheap camera is introducing artifical sharpening, B)&#10;the bayer pattern is creating artifcats, C) the sensor is very&#10;noisy and/or has hot/cold pixels. However, filtering makes it&#10;harder to decode very small tags. Reasonable values are 0, or&#10;[0.8, 1.5].&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;TagFamily&lt;/em&gt;: Set the name of the tag family being detected.&#10;This defaults to &amp;quot;Tag36h11&amp;quot;.&#10;The supported families are &amp;quot;Tag16h5&amp;quot;, &amp;quot;Tag25h7&amp;quot;, &amp;quot;Tag25h9&amp;quot;, &amp;quot;Tag36h10&amp;quot;, and &amp;quot;Tag36h11&amp;quot;.&#10;The default family seems least susceptible to false positives.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;ThetaThresh&lt;/em&gt;: When growing components, the intra component variation is&#10;allowed to grow when the component is small in size. This&#10;threshold affects how much. The default is 100.&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: AprilTags.xml 75695 2017-02-10 19:27:27Z cxh $$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="An input image.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="An output image, with detected AprilTags outlined in green and identified.">
            </property>
            <property name="tags (port)" class="ptolemy.kernel.util.StringAttribute" value="An array of objects, one object for each tag detected in the image.">
            </property>
            <property name="options (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The options for the detector. This is a JSON object with fields defined above.&#10;  It defaults to an empty object, meaning to use default values for all the otpions.">
            </property>
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="tags" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="iOSCamera" class="ptolemy.actor.lib.jjs.JavaScript">
        <display name="iOS Camera"/>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** &#10; * Use Kubi Server iOS app (https://github.com/V1C0D3R/KubiServerApp) to provide&#10; * image from the iOS camera.&#10; *  &#10; */&#10; &#10; /** An accessor for an iOS device camera running the KubiServer app on the same&#10; *  local network. The app can be found here: https://github.com/V1C0D3R/KubiServerApp.&#10; *  Only one mode of operation is available: it can only be &quot;triggered&quot; to get last&#10; *  image from the iOS device. It captures an image whenever a trigger&#10; *  input is received and produces that image on its output.&#10; *&#10; *  @accessor cameras/iOSCamera&#10; *  @author Victor Nouvellet (victor.nouvellet@berkeley.edu)&#10; *  @input trigger A trigger input.&#10; *   The value is ignored and can be anything.&#10; *  @output {Object} image Last captured image.&#10; *  @output {Object} response Response body of the request which may provide size information.&#10; *  @parameter path Last image API path defined in KubiServer app.&#10; *  @parameter serverIP The server IP of the iOS device running KubiServer app.&#10; *  @parameter serverPort The server port of the iOS device running KubiServer app.&#10; *  @version $$Id: iOSCamera.js 1318 2017-01-29 21:19:52Z victor.nouvellet@berkeley.edu $$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, httpRequest, require, setTimeout  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var http = require('httpClient');&#10;&#10;// Node Host needs util defined.&#10;var util = require('util');&#10;&#10;/** Inputs and outputs definition **/&#10;exports.setup = function() {&#10;    this.input('trigger');&#10;    this.parameter('serverIP', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('serverPort', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;8080&quot;&#10;    });&#10;    this.parameter('path', {type: 'string', value: &quot;lastImage&quot;});&#10;    this.output('image');&#10;    this.output('response');&#10;};&#10;&#10;function GetImage() {&#10;    var getImage = {};&#10;&#10;    // Private variables&#10;    var debug = false;&#10;    var ipAddress = &quot;&quot;;&#10;    var port = &quot;&quot;;&#10;    var path = &quot;&quot;;&#10;    var url = &quot;&quot;;&#10;    &#10;    // Use self in contained functions so the caller does not have to bind &quot;this&quot;&#10;    // on each function call.&#10;    var self = this;&#10;    &#10;    //Private functions.&#10;&#10;    /**&#10;    *  Report all server errors if they exist and return true in this case.&#10;    */&#10;    function reportIfError(response) {&#10;        var body = response.body;&#10;        //FIXME: Server not ready to give json...&#10;    &#10;        if (typeof body == &quot;string&quot;) {&#10;            body = JSON.parse(body);&#10;        }&#10;    &#10;        if (body instanceof Array &amp;&amp; obj.length &gt; 0 &amp;&amp; body[0].error) {&#10;            self.error(&quot;Server error report: &quot; + error.description);&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;    &#10;    // Public functions.&#10;    &#10;    getImage.builUrl = function() {&#10;        if (debug) {&#10;            console.log(&quot;GetImage.js: Connecting...&quot;);&#10;        }&#10;        ipAddress = self.getParameter('serverIP');&#10;        port = self.getParameter('serverPort') || &quot;8080&quot;;&#10;        path = self.getParameter('path') || &quot;/lastImage&quot;;&#10;        &#10;        if (ipAddress === null || ipAddress.trim() === &quot;&quot;) {&#10;            throw &quot;No IP Address is given for the Kubi server.&quot;;&#10;        }&#10;        &#10;        url = &quot;http://&quot; + ipAddress + &quot;:&quot; + port + &quot;/&quot; + path;&#10;     };&#10;     &#10;     /**&#10;     *  Issue a command to the server.&#10;     */&#10;     getImage.fireRequest = function () {&#10;         http.get(url, function(response) {&#10;            if (response !== null) {&#10;              	if (debug) {&#10;                	console.log(&quot;GetImage.js: processCommands(): response status: &quot; + response.statusMessage);&#10;                	console.log(&quot;GetImage.js: processCommands(): response body: &quot; + response.body);&#10;              	}&#10;                &#10;                self.send('image', response.body);&#10;                &#10;                reportIfError(response);&#10;            } else {&#10;                self.error(&quot;Unable to connect to the server on &quot; + url);&#10;            }&#10;            &#10;            self.send('response', response);&#10;        });&#10;        &#10;        return;&#10;     };&#10;     &#10;     return getImage;&#10;}&#10;&#10;exports.initialize = function() {&#10;    this.getImage = GetImage.call(this);&#10;    &#10;    if (debug) {&#10;    	console.log(&quot;GetImage.js: Initializing...&quot;);&#10;    }&#10;    this.addInputHandler('trigger', this.getImage.fireRequest);&#10;    this.getImage.builUrl();&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-135.0, 310.0]">
        </property>
        <property name="serverIP" class="ptolemy.data.expr.Parameter" value="$KubiServerIPAddress">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="serverPort" class="ptolemy.data.expr.Parameter" value="8080">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="path" class="ptolemy.data.expr.Parameter" value="lastImage">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="image" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="period" class="ptolemy.actor.parameters.PortParameter" value="0.1">
        </property>
        <property name="values" class="ptolemy.data.expr.Parameter" value="{true}">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-295.0, 310.0]">
        </property>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="ClockKubiInterface.movement" relation="relation"/>
    <link port="ClockKubiInterface.tags" relation="relation2"/>
    <link port="Kubi.command" relation="relation"/>
    <link port="ImageDisplay.input" relation="relation4"/>
    <link port="AprilTags.input" relation="relation8"/>
    <link port="AprilTags.output" relation="relation4"/>
    <link port="AprilTags.tags" relation="relation2"/>
    <link port="iOSCamera.trigger" relation="relation3"/>
    <link port="iOSCamera.image" relation="relation8"/>
    <link port="DiscreteClock.output" relation="relation3"/>
</entity>
