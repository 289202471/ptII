<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="Heartbeat" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="10000">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{70.0, 30.0}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={13, 80, 1070, 632}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[836, 522]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{418.0, 261.0}">
    </property>
    <property name="AccessorCodeGenerator" class="ptolemy.cg.kernel.generic.accessor.AccessorCodeGenerator">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[550.0, 105.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This model implements a Heartbeat that phones home&#10;to a mothership website.&#10;&#10;The mothership portion is not present and this model&#10;requires a key.  &#10;&#10;Get the key from swarmbox/heartbeat/key                                                                                &#10;See https://www.terraswarm.org/testbeds/wiki/Main/SwarmboxGitRepo                                                      &#10;&#10;To download the repo using a repo.eecs.berkeley.edu username and                                                       &#10;password (possibly different than your terraswarm website username                                                     &#10;and password):                                                                                                                                                                                                                                &#10;   git clone https://repo.eecs.berkeley.edu/git/projects/terraswarm/swarmbox.git                                        &#10; If you uploaded your SSH key to repo.eecs, then use:                                                                                                                                                                                     &#10;   git clone repoman@repo.eecs.berkeley.edu:projects/terraswarm/swarmbox.git  ">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{75, 180}">
        </property>
    </property>
    <entity name="Heartbeat" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Send a heartbeat to a mothership monitoring web server.&#10; *&#10; *  @accessor services/Heartbeat&#10; *  @author Christopher Brooks, based on heartbeat.js by Marten Lohstroh.&#10; *  @version $$Id$$&#10; *  @input {string} ipAddress The IP address of the host&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, get, error, exports, extend, get, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var http = require('httpClient');&#10;&#10;//var key = fs.readFileSync('/Users/cxh/key', 'utf8').trim();&#10;var key = &quot;6AZTPTunQyUX3a8S&quot;;&#10;&#10;function Heartbeat() {&#10;    var heartbeat = {};&#10;    heartbeat.pingMothership = function () {&#10;        console.log(&quot;HeartBeat: pingMothership&quot;);&#10;        var config = {};&#10;        config.hostname = &quot;moog.eecs.berkeley.edu&quot;;&#10;        var configString = JSON.stringify(config);&#10;        var headers = {&#10;            'Content-Type' : 'application/json',&#10;            'Content-Length' : configString.length&#10;        };&#10;&#10;        var url = {&#10;            host : 'terra.eecs.berkeley.edu',&#10;            port : 8088,&#10;            path : '/check-in?key=' + key,&#10;            protocol: 'https'&#10;        }&#10;        var options = {&#10;            url : url,&#10;            method : 'POST',&#10;            headers : headers,&#10;            rejectUnauthorized : false,&#10;            body: configString&#10;            // We're using a self-signed certificate ATM.&#10;        };&#10;&#10;        // Prepare request handler.&#10;        var req = http.request(options, function(res) {&#10;            if (res === null) {&#10;                console.log(&quot;Heartbeat.pingMothership: request handler: res == null&quot;);&#10;                return;&#10;            }&#10;            console.log(&quot;Heartbeat.pingMothership: request handler: res = &quot; + res);&#10;            // //res.setEncoding('utf-8');&#10;            // var responseString = '';&#10;            // // Receive a response.&#10;            // res.on('data', function(data) {&#10;            //     responseString += data;&#10;            // });&#10;&#10;            // res.on('end', function() {&#10;            //     //console.log(responseString);&#10;            //     //console.log('Checked in...');&#10;            // });&#10;&#10;            // res.on('error', function(e) {&#10;            //     console.log('Unable to check in with server: ' + e);&#10;            // });&#10;        });&#10;&#10;        // issue request&#10;        //req.write(configString);&#10;        req.end();&#10;        &#10;        req.on('error', function(e) {&#10;            console.log('Request problem: Unable to check in with server: ' + e);&#10;        });&#10;&#10;    }&#10;&#10;    return heartbeat;&#10;}&#10;&#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function () {&#10;    this.input('ipAddress', {type: &quot;string&quot;});&#10;    this.input('trigger', {'type': 'number'});&#10;&#10;};&#10;&#10;/** Initialize the accessor by attaching an input handler to the *symbol* input. */&#10;exports.initialize = function () {&#10;    this.heartbeat = Heartbeat.call(this);&#10;    this.addInputHandler('ipAddress', this.heartbeat.pingMothership);&#10;};&#10;&#10;&#10;/** Filter the response, extracting the stock tick information and&#10; *  outputting it on the price output. The full response is produced&#10; *  on the 'response' output.&#10; */&#10;exports.filterResponse = function (response) {&#10;    if (response) {&#10;        try {&#10;            // Check if response is JSON or stringified JSON.  If stringified, parse.&#10;            var parsed;&#10;            if (typeof response == &quot;object&quot;) {&#10;                parsed = response;&#10;            } else {&#10;                parsed = JSON.parse(response);&#10;            }&#10;&#10;            // Extract the last trade price from the JSON record.&#10;            var price = parseFloat(parsed.query.results.quote.LastTradePriceOnly);&#10;            // Send the price to the 'price' output.&#10;            this.send('price', price);&#10;        } catch (err) {&#10;            error('StockTick: Unable to parse response: ' + err.message);&#10;            this.send('price', null);&#10;        }&#10;    } else {&#10;        this.send('price', null);&#10;    }&#10;    return response;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="/Users/cxh/ptII/org/terraswarm/accessor/accessors/web/services/Heartbeat.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{380.0, 105.0}">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="ipAddress" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="IPAddress" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** This accessor outputs the IP address of the local machine.&#10; *&#10; *  @accessor net/IPAddress&#10; *  @author Elizabeth Latronico (beth@berkeley.edu), based on IPAddress actor&#10; *  by Christopher Brooks&#10; *  @input {boolean} trigger Send a token here to produce an output.&#10; *  @output {string} IPAddress The IP address of the local machine.&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals error, exports, require */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var discovery = require('discovery');&#10;// Initialize ds here, instead of in setup(), so that the ds object is defined&#10;// when the ds.on() function is encountered&#10;// But surround in a try-catch so that the browser host or any other host&#10;// that does not support the discovery module can proceed and at least read&#10;// the interface.&#10;var ds;&#10;try {&#10;    ds = new discovery.DiscoveryService();&#10;} catch (err) {&#10;    error('Failed to instantiate discovery service: ' + err);&#10;}&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;&#10;    this.input('trigger', {&#10;        type: 'boolean'&#10;    });&#10;&#10;    this.output('IPAddress', {&#10;        type: 'string'&#10;    });&#10;};&#10;&#10;/** Upon receiving a trigger input, output the host machine's IP address.&#10; */&#10;exports.initialize = function () {&#10;    var self = this;&#10;    this.addInputHandler('trigger', function () {&#10;        self.send('IPAddress', ds.getHostAddress());&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/net/IPAddress.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{210.0, 95.0}">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
        </port>
        <port name="IPAddress" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TestSpontaneous" class="org.terraswarm.accessor.JSAccessor">
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Test accessor that spontaneously produces outputs once per time interval.&#10;//&#10;// Copyright (c) 2015-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Test accessor that spontaneously produces outputs once per time interval.&#10; *  This implementation produces a counting sequence.&#10; *&#10; *  @accessor test/TestSpontaneous&#10; *  @parameter interval The interval between outputs in milliseconds.&#10; *  @output output Output for the counting sequence, of type number.&#10; *  @author Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearInterval, exports, require, setInterval */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.parameter('interval', {&#10;        'type': 'number',&#10;        'value': 1000&#10;    });&#10;    this.output('output', {&#10;        'type': 'number'&#10;    });&#10;};&#10;&#10;// These variables will not be visible to subclasses.&#10;var handle = null;&#10;var count = 0;&#10;&#10;exports.initialize = function () {&#10;    count = 0;&#10;    // Need to record 'this' for use in the callback.&#10;    var thiz = this;&#10;    handle = setInterval(function () {&#10;        thiz.send('output', count);&#10;        count += 1;&#10;    }, this.getParameter('interval'));&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (handle) {&#10;        clearInterval(handle);&#10;        handle = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TestSpontaneous.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{40.0, 95.0}">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Heartbeat.ipAddress&quot;,x=380.0,y=105.0}, tail={id=&quot;IPAddress.IPAddress&quot;,x=210.0,y=95.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;IPAddress.trigger&quot;,x=210.0,y=95.0}, tail={id=&quot;TestSpontaneous.output&quot;,x=40.0,y=95.0}, points={} } }">
        </property>
    </relation>
    <link port="Heartbeat.ipAddress" relation="relation"/>
    <link port="IPAddress.trigger" relation="relation2"/>
    <link port="IPAddress.IPAddress" relation="relation"/>
    <link port="TestSpontaneous.output" relation="relation2"/>
</entity>
