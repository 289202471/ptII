<?xml version="1.0" encoding="UTF-8" ?>
<testsuite errors="2" failures="2" hostname="travis-job-849f9d23-3541-40ff-ad23-559b08e93fb5" name="ptolemy.configs.test.junit.JUnitTclTest" skipped="0" tests="12" time="666.917" timestamp="2018-05-01T21:46:42">
  <properties>
    <property name="npm.executable" value="npm" />
    <property name="file.encoding.pkg" value="sun.io" />
    <property name="ptII.mk.exists" value="true" />
    <property name="env.rvm_bin_path" value="/home/travis/.rvm/bin" />
    <property name="java.home" value="/usr/lib/jvm/java-8-oracle/jre" />
    <property name="env.TRAVIS_JOB_NUMBER" value="372.10" />
    <property name="env.DISPLAY" value=":99.0" />
    <property name="java.net.preferIPv4Stack" value="true" />
    <property name="env.SSH_TTY" value="/dev/pts/0" />
    <property name="env.RUN_TESTS" value="true" />
    <property name="timeout.short" value="1000000" />
    <property name="env.TRAVIS_STACK_NODE_ATTRIBUTES" value="/.node-attributes.yml" />
    <property name="junit.formatter" value="xml" />
    <property name="java.endorsed.dirs" value="/usr/lib/jvm/java-8-oracle/jre/lib/endorsed" />
    <property name="env.TRAVIS_SUDO" value="true" />
    <property name="env.LOGNAME" value="travis" />
    <property name="jsdoc.home" value="node_modules/@terraswarm/jsdoc" />
    <property name="debuglevel" value="source,lines,vars" />
    <property name="checkstyle.formatter" value="xml" />
    <property name="bin.vergil.makeable" value="true" />
    <property name="env._system_version" value="14.04" />
    <property name="sun.os.patch.level" value="unknown" />
    <property name="java.vendor.url" value="http://java.oracle.com/" />
    <property name="java.version" value="1.8.0_151" />
    <property name="env.TZ" value="UTC" />
    <property name="env.PT_NO_NET" value="true" />
    <property name="env.TRAVIS_PULL_REQUEST_SHA" value="" />
    <property name="env.TRAVIS_SECURE_ENV_VARS" value="true" />
    <property name="env._system_type" value="Linux" />
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/" />
    <property name="env.SSH_CLIENT" value="10.10.16.8 53100 22" />
    <property name="npmjs-org-is-up" value="true" />
    <property name="env.GEM_HOME" value="/home/travis/.rvm/gems/ruby-2.4.1" />
    <property name="env.HAS_ANTARES_THREE_LITTLE_FRONZIES_BADGE" value="true" />
    <property name="env.PS4" value="+" />
    <property name="ant.project.invoked-targets" value="build,test.core5.xml" />
    <property name="env.TRAVIS_PULL_REQUEST_BRANCH" value="" />
    <property name="env.TRAVIS_REPO_SLUG" value="icyphy/ptII" />
    <property name="node.in.path" value="true" />
    <property name="java.maxmemory" value="1400m" />
    <property name="env.RUBY_VERSION" value="ruby-2.4.1" />
    <property name="user.name" value="travis" />
    <property name="env.LANG" value="en_US.UTF-8" />
    <property name="sun.io.unicode.encoding" value="UnicodeLittle" />
    <property name="sun.jnu.encoding" value="UTF-8" />
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment" />
    <property name="usefile" value="false" />
    <property name="return.code" value="0" />
    <property name="junit.single.formatter" value="plain" />
    <property name="env.DYLD_LIBRARY_PATH" value="/home/travis/pthla/certi-tools/lib:" />
    <property name="env.DEBIAN_FRONTEND" value="noninteractive" />
    <property name="env.SSH_CONNECTION" value="10.10.16.8 53100 10.20.0.111 22" />
    <property name="env.MYSQL_UNIX_PORT" value="/var/run/mysqld/mysqld.sock" />
    <property name="env.TRAVIS_ALLOW_FAILURE" value="false" />
    <property name="env.LC_ALL" value="en_US.UTF-8" />
    <property name="java.specification.name" value="Java Platform API Specification" />
    <property name="node.works" value="true" />
    <property name="user.timezone" value="" />
    <property name="path.separator" value=":" />
    <property name="env.PYTHON_CFLAGS" value="-g -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security" />
    <property name="timeout.long" value="4000000" />
    <property name="env.CERTI_HOME" value="/home/travis/pthla/certi-tools" />
    <property name="file.encoding" value="UTF-8" />
    <property name="ant.file.ptII" value="/home/travis/build/icyphy/ptII/build.xml" />
    <property name="javadoc.packagenames" value="com.*,diva.*,lbnl.*,org.hlacerti.*,org.json.*,org.ptolemy.*,org.terraswarm.*,ptolemy.*,ptserver.*" />
    <property name="env.TRAVIS_PULL_REQUEST_SLUG" value="" />
    <property name="ant.project.default-target" value="build" />
    <property name="env.GIT_ASKPASS" value="echo" />
    <property name="env.HOME" value="/home/travis" />
    <property name="sun.java.command" value="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner ptolemy.configs.test.junit.JUnitTclTest skipNonTests=false filtertrace=true haltOnError=false haltOnFailure=false formatter=org.apache.tools.ant.taskdefs.optional.junit.OutErrSummaryJUnitResultFormatter showoutput=true outputtoformatters=true logfailedtests=true threadid=0 logtestlistenerevents=false formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,/home/travis/build/icyphy/ptII/reports/junit/TEST-ptolemy.configs.test.junit.JUnitTclTest.xml crashfile=/home/travis/build/icyphy/ptII/junitvmwatcher6751676985453146116.properties propsfile=/home/travis/build/icyphy/ptII/junit4773729736391598356.properties" />
    <property name="env.MANPATH" value="/home/travis/.nvm/versions/node/v7.10.1/share/man:/home/travis/.kiex/elixirs/elixir-1.4.5/man:/home/travis/.rvm/rubies/ruby-2.4.1/share/man:/usr/local/man:/usr/local/cmake-3.9.2/man:/usr/local/clang-5.0.0/share/man:/usr/local/share/man:/usr/share/man:/home/travis/.rvm/man" />
    <property name="env.COMPOSER_NO_INTERACTION" value="1" />
    <property name="env.JDK_SWITCHER_DEFAULT" value="oraclejdk8" />
    <property name="ant.file" value="/home/travis/build/icyphy/ptII/build.xml" />
    <property name="env.TRAVIS_COMMIT_RANGE" value="1db67dc72222...5e48fc029c0f" />
    <property name="env._system_name" value="Ubuntu" />
    <property name="timeout" value="2400000" />
    <property name="ptII.classpath.optional.property" value="/home/travis/build/icyphy/ptII/lib/bsh-2.0b4.jar:/home/travis/build/icyphy/ptII/lib/ptCal.jar:/home/travis/build/icyphy/ptII/lib/java_cup.jar:/home/travis/build/icyphy/ptII/lib/saxon8.jar:/home/travis/build/icyphy/ptII/lib/saxon8-dom.jar:/home/travis/build/icyphy/ptII/lib/chic.jar:/home/travis/build/icyphy/ptII/lib/ptcolt.jar:/usr/lib/jvm/java-8-oracle/lib/tools.jar:/usr/lib/eclipse/plugins/org.eclipse.jdt.core_3.8.2.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.core.runtime_3.8.0.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.osgi_3.8.1.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.core.resources_3.8.1.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.equinox.common_3.6.100.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.core.jobs_3.5.200.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.core.contenttype_3.4.200.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.equinox.preferences_3.5.0.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.text_3.5.200.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.ui.workbench_3.8.1.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.jface_3.8.0.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.swt_3.8.2.jar:/usr/lib/eclipse/plugins/org.eclipse.jface.text_3.8.1.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.ui.workbench.texteditor_3.8.0.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.ui.editors_3.8.0.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.core.commands_3.6.1.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.equinox.registry_3.5.200.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.ui.console_3.5.100.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.ui.forms_3.5.200.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.ui.ide_3.8.1.dist.jar:/home/travis/build/icyphy/ptII/vendors/oracle/dbxml.jar:/home/travis/build/icyphy/ptII/vendors/oracle/db.jar:/home/travis/build/icyphy/ptII/vendors/misc/itext/iText.jar:/home/travis/build/icyphy/ptII/lib/g4ltl.jar:/home/travis/build/icyphy/ptII/lib/StructuralCoder.jar:/home/travis/build/icyphy/ptII/lib/org-openide-util.jar:/home/travis/build/icyphy/ptII/lib/org-openide-util-lookup.jar:/home/travis/build/icyphy/ptII/lib/org-netbeans-api-visual.jar:/home/travis/build/icyphy/ptII/vendors/jai-1_1_2_01/lib/jai_core.jar:/home/travis/build/icyphy/ptII/vendors/jai-1_1_2_01/lib/jai_codec.jar:/home/travis/build/icyphy/ptII/lib/jcerti.jar:/home/travis/build/icyphy/ptII/lib/smack.jar:/home/travis/build/icyphy/ptII/lib/smackx.jar:/home/travis/build/icyphy/ptII/lib/jetty-all-8.1.5-v20120716.jar:/home/travis/build/icyphy/ptII/lib/javax.servlet-api-3.0.1.jar:/home/travis/build/icyphy/ptII/lib/javax.mail.jar:/home/travis/build/icyphy/ptII/vendors/JMF-2.1.1e/lib/jmf.jar:/home/travis/build/icyphy/ptII/lib/jna-4.0.0-variadic.jar:/home/travis/build/icyphy/ptII/vendors/misc/joystick/Joystick.jar:/home/travis/build/icyphy/ptII/lib/ptjacl.jar:/home/travis/build/icyphy/ptII/lib/jsoup-1.8.2.jar:/home/travis/build/icyphy/ptII/lib/junit-4.8.2.jar:/home/travis/build/icyphy/ptII/lib/JUnitParams-0.4.0.jar:/home/travis/build/icyphy/ptII/ptolemy/actor/lib/excel/jxl.jar:/home/travis/build/icyphy/ptII/lib/jython.jar:/home/travis/build/icyphy/ptII/lib/kieler.jar:/home/travis/build/icyphy/ptII/vendors/opencv/share/OpenCV/java/opencv-341.jar:/home/travis/build/icyphy/ptII/lib/oscP5.jar:/home/travis/build/icyphy/ptII/lib/nrjavaserial-3.11.0.devel.jar:/usr/share/java/j3dcore.jar:/usr/share/java/j3dutils.jar:/usr/share/java/vecmath.jar:/home/travis/build/icyphy/ptII/ptolemy/distributed/jini/jar/jini-core.jar:/home/travis/build/icyphy/ptII/ptolemy/distributed/jini/jar/jini-ext.jar:/home/travis/build/icyphy/ptII/ptolemy/distributed/jini/jar/sun-util.jar:/home/travis/build/icyphy/ptII/lib/protobuf-java-2.4.1.jar:/home/travis/build/icyphy/ptII/lib/org.eclipse.paho.client.mqttv3.jar:/home/travis/build/icyphy/ptII/ptserver/lib/hessian-4.0.7.jar:/home/travis/build/icyphy/ptII/ptserver/lib/wmqtt.jar:/home/travis/build/icyphy/ptII/lib/mapss.jar:/home/travis/build/icyphy/ptII/ptolemy/actor/ptalon/antlr/antlr.jar:/home/travis/build/icyphy/ptII/lib/JRI.jar:/home/travis/build/icyphy/ptII/lib/commons-lang-2.6.jar:/home/travis/build/icyphy/ptII/lib/commons-logging-1.1.1.jar:/home/travis/build/icyphy/ptII/lib/sootclasses.jar:/home/travis/build/icyphy/ptII/ptolemy/actor/lib/database/mysql-connector-java-5.1.6-bin.jar:/home/travis/build/icyphy/ptII/vendors/misc/sphinx4/sphinx4-data-5prealpha.jar:/home/travis/build/icyphy/ptII/vendors/misc/sphinx4/sphinx4-core-5prealpha.jar:/home/travis/build/icyphy/ptII/lib/PDFRenderer.jar:/home/travis/build/icyphy/ptII/lib/svgSalamander.jar:/home/travis/build/icyphy/ptII/lib/rsyntaxtextarea-2.6.0-SNAPSHOT.jar:/home/travis/build/icyphy/ptII/lib/hazelcast-3.8.2.jar:/home/travis/build/icyphy/ptII/lib/jackson-annotations-2.9.0.jar:/home/travis/build/icyphy/ptII/lib/jackson-core-2.9.3.jar:/home/travis/build/icyphy/ptII/lib/jackson-databind-2.9.3.jar:/home/travis/build/icyphy/ptII/lib/netty-buffer-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-codec-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-codec-dns-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-codec-http-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-codec-http2-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-common-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-handler-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-resolver-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-resolver-dns-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-transport-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/vertx-codegen-3.5.1.jar:/home/travis/build/icyphy/ptII/lib/vertx-core-3.5.1.jar:/home/travis/build/icyphy/ptII/lib/vertx-hazelcast-3.5.1.jar:/home/travis/build/icyphy/ptII/lib/vertx-lang-js-3.5.1.jar:/home/travis/build/icyphy/ptII/lib/vertx-service-proxy-3.5.1.jar:/home/travis/build/icyphy/ptII/lib/vertx-web-3.5.1.jar:/home/travis/build/icyphy/ptII/lib/slf4j-api-1.7.13.jar:/home/travis/build/icyphy/ptII/lib/slf4j-simple-1.7.13.jar:/home/travis/build/icyphy/ptII/lib/webcam-capture-0.3.12.jar:/home/travis/build/icyphy/ptII/lib/bridj-0.7.0.jar:/home/travis/build/icyphy/ptII/lib/xbjlib-1.1.0.nrjavaserial.jar" />
    <property name="test.batch" value="**/junit/*.java" />
    <property name="env._" value="/usr/bin/timeout" />
    <property name="java.io.tmpdir" value="/tmp" />
    <property name="user.language" value="en" />
    <property name="env.HISTCONTROL" value="ignoredups:ignorespace" />
    <property name="env.GOROOT" value="/home/travis/.gimme/versions/go1.7.4.linux.amd64" />
    <property name="line.separator" value="&#xa;" />
    <property name="target" value="1.8" />
    <property name="env.TRAVIS_BUILD_DIR" value="/home/travis/build/icyphy/ptII" />
    <property name="env.ANT_OPTS" value="-Xmx2048m" />
    <property name="ant.file.type" value="file" />
    <property name="ptolemy.ptII.batchMode" value="true" />
    <property name="env.HISTSIZE" value="1000" />
    <property name="env.MERB_ENV" value="test" />
    <property name="java.vm.info" value="mixed mode" />
    <property name="source" value="1.8" />
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification" />
    <property name="env.TRAVIS_TEST_RESULT" value="0" />
    <property name="jsdoc.command" value="node_modules/@terraswarm/jsdoc/jsdoc.js" />
    <property name="npm.works" value="true" />
    <property name="cobertura.dir" value="/home/travis/build/icyphy/ptII/vendors/cobertura-2.0.3" />
    <property name="env.rvm_path" value="/home/travis/.rvm" />
    <property name="env.GEM_PATH" value="/home/travis/.rvm/gems/ruby-2.4.1:/home/travis/.rvm/gems/ruby-2.4.1@global" />
    <property name="env.LC_CTYPE" value="en_US.UTF-8" />
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob" />
    <property name="env.TRAVIS_STACK_NAME" value="garnet" />
    <property name="ant.version" value="Apache Ant(TM) version 1.10.1 compiled on February 2 2017" />
    <property name="ptII.reports" value="/home/travis/build/icyphy/ptII/reports" />
    <property name="env.TRAVIS_STACK_TIMESTAMP" value="2017-12-05 19:33:09 UTC" />
    <property name="ant.file.type.ptII" value="file" />
    <property name="env.RBENV_SHELL" value="bash" />
    <property name="os.name" value="Linux" />
    <property name="java.specification.vendor" value="Oracle Corporation" />
    <property name="env.rvm_version" value="1.29.3 (latest)" />
    <property name="env.TERM" value="xterm" />
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM" />
    <property name="env.TRAVIS_BUILD_NUMBER" value="372" />
    <property name="env.CI" value="true" />
    <property name="java.library.path" value="/home/travis/pthla/certi-tools/lib:/usr/lib/jni:/usr/local/share/OpenCV/java/:/usr/share/OpenCV/java::/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib" />
    <property name="env.rvm_prefix" value="/home/travis" />
    <property name="env.PATH" value="/home/travis/pthla/certi-tools/share/scripts:/home/travis/.rvm/gems/ruby-2.4.1/bin:/home/travis/.rvm/gems/ruby-2.4.1@global/bin:/home/travis/.rvm/rubies/ruby-2.4.1/bin:/home/travis/.rvm/bin:/home/travis/.nvm/versions/node/v7.10.1/bin:./node_modules/.bin:/home/travis/build/icyphy/ptII/bin:/home/travis/pthla/certi-tools/bin:/home/travis/bin:/home/travis/.local/bin:/opt/pyenv/shims:/home/travis/.phpenv/shims:/home/travis/perl5/perlbrew/bin:/home/travis/.kiex/elixirs/elixir-1.4.5/bin:/home/travis/.kiex/bin:/home/travis/gopath/bin:/home/travis/.gimme/versions/go1.7.4.linux.amd64/bin:/usr/local/phantomjs/bin:/usr/local/phantomjs:/usr/local/neo4j-3.2.7/bin:/usr/local/maven-3.5.2/bin:/usr/local/cmake-3.9.2/bin:/usr/local/clang-5.0.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/travis/.phpenv/bin:/opt/pyenv/bin:/home/travis/.yarn/bin" />
    <property name="env.TRAVIS_OS_NAME" value="linux" />
    <property name="ant.java.version" value="1.8" />
    <property name="basedir" value="/home/travis/build/icyphy/ptII" />
    <property name="java.class.version" value="52.0" />
    <property name="env.SHLVL" value="3" />
    <property name="env.LD_LIBRARY_PATH" value="/home/travis/pthla/certi-tools/lib:/usr/lib/jni:/usr/local/share/OpenCV/java/:/usr/share/OpenCV/java:" />
    <property name="env.RACK_ENV" value="test" />
    <property name="ant.home" value="/home/travis/build/icyphy/ptII/ant" />
    <property name="env.NVM_DIR" value="/home/travis/.nvm" />
    <property name="env.PERLBREW_BASHRC_VERSION" value="0.80" />
    <property name="env.CERTI_FOM_PATH" value="/home/travis/pthla/certi-tools/share/federations" />
    <property name="env.TRAVIS_BUILD_ID" value="373652173" />
    <property name="env.PYENV_ROOT" value="/opt/pyenv" />
    <property name="env.TRAVIS_UID" value="2000" />
    <property name="env.rvm_pretty_print_flag" value="auto" />
    <property name="env.NVM_BIN" value="/home/travis/.nvm/versions/node/v7.10.1/bin" />
    <property name="env.TRAVIS_COMMIT" value="5e48fc029c0fdb5925d35160d0494c8cfea4ad04" />
    <property name="env._system_arch" value="x86_64" />
    <property name="node.executable" value="node" />
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-8-oracle/jre/lib/amd64" />
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers" />
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment" />
    <property name="env.GOPATH" value="/home/travis/gopath" />
    <property name="ptolemy.ptII.dir" value="/home/travis/build/icyphy/ptII" />
    <property name="env.USER" value="travis" />
    <property name="env.HISTFILESIZE" value="2000" />
    <property name="timeout.longest" value="19000000" />
    <property name="env.TRAVIS_STACK_FEATURES" value="basic cassandra chromium couchdb disabled-ipv6 docker docker-compose elasticsearch firefox go-toolchain google-chrome jdk memcached mongodb mysql neo4j nodejs_interpreter perl_interpreter perlbrew phantomjs postgresql python_interpreter rabbitmq redis riak ruby_interpreter sqlite xserver" />
    <property name="env.TRAVIS_PULL_REQUEST" value="false" />
    <property name="env.PYENV_SHELL" value="bash" />
    <property name="ant.project.name" value="ptII" />
    <property name="java.vm.specification.version" value="1.8" />
    <property name="env.CERTI_VERSION" value="4.0.0" />
    <property name="env.NLSPATH" value="/usr/dt/lib/nls/msg/%L/%N.cat" />
    <property name="env.CERTI_HOST" value="localhost" />
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit" />
    <property name="env.MY_RUBY_HOME" value="/home/travis/.rvm/rubies/ruby-2.4.1" />
    <property name="sun.cpu.isalist" value="" />
    <property name="java.ext.dirs" value="/usr/lib/jvm/java-8-oracle/jre/lib/ext:/usr/java/packages/lib/ext" />
    <property name="os.version" value="4.4.0-101-generic" />
    <property name="user.home" value="/home/travis" />
    <property name="env.MIX_ARCHIVES" value="/home/travis/.kiex/mix/elixir-1.4.5" />
    <property name="java.vm.vendor" value="Oracle Corporation" />
    <property name="env.TRAVIS_TAG" value="nightly" />
    <property name="env.TRAVIS_FILTERED" value="redirect_io" />
    <property name="env.PTII" value="/home/travis/build/icyphy/ptII" />
    <property name="env.JAVA_HOME" value="/usr/lib/jvm/java-8-oracle" />
    <property name="javadoc.excludepackagenames" value="adm.cvs2svn.*,build.*,config.*,doc.coding.templates.*,jni.test.jni.meaningOfLife.*,jni.test.jni.testDeux.*,jni.test.jni.testTrois.*,org.terraswarm.accessor.accessors.web.node_modules.*,org.terraswarm.accessor.accessors.web.hosts.cordova.demo.*,org.terraswarm.accessor.accessors.web.hosts.cordova.plugins.*,org.terraswarm.accessor.accessors-svn.*,pt-modules.*,ptolemy.apps.agilent.*,ptolemy.apps.anytimecontrol.*,ptolemy.apps.apes.*,ptolemy.apps.charon.*,ptolemy.apps.crazyboard.*,ptolemy.apps.eclipse.*,ptolemy.apps.etherealSting.*,ptolemy.apps.fullscreen.*,ptolemy.apps.giotto.*,ptolemy.apps.ia.*,ptolemy.apps.interfaces.*,ptolemy.apps.jmf.*,ptolemy.apps.kurt.*,ptolemy.apps.kvm.*,ptolemy.apps.lego.*,ptolemy.apps.lejos.*,ptolemy.apps.midp.*,ptolemy.apps.mobileCoding.*,ptolemy.apps.pendulum.*,ptolemy.apps.rijndael.*,ptolemy.apps.robot.*,ptolemy.apps.security.*,ptolemy.apps.sobel.*,ptolemy.apps.soot.*,ptolemy.apps.throttle.*,ptolemy.apps.tini.*,ptolemy.apps.transmission.*,ptolemy.apps.vergil.*,ptolemy.apps.waba.*,ptolemy.apps.websensor.*,ptolemy.apps.webstart.*,ptolemy.apps.xsl.*,ptolemy.apps.zaurus.*,ptolemy.backtrack.eclipse.plugin.*,ptolemy.backtrack.test.*,ptolemy.codegen.c.actor.lib.oldJavaFiles.*,ptolemy.codegen.dsp.lib.*,ptolemy.codegen.kernel.newInterfaces.*,ptolemy.codegen.lib.*,ptolemy.copernicus.kernel.fragment.*,ptolemy.copernicus.shallow.cg.*,ptolemy.domains.giotto.demo.Hierarchy.Hierarchy.*,ptolemy.domains.giotto.demo.Multimode.Multimode.*,ptolemy.domains.giotto.demo.Simple.Simple.*,ptolemy.domains.gr.lib.experimental.*,ptolemy.domains.gro.*,ptolemy.domains.pdf.*,ptolemy.domains.ptinyos.demo.Surge.output.*,ptolemy.moml.test.NoPackageActor.java*,ptolemy.plot.adm.*,ptolemy.plot.servlet.*,reports.*,signed.*,src.*,target.*,vendors.*,ptolemy.copernicus.applet.*,ptolemy.media.viewer.*,ptolemy.cg.adapter.generic.program.procedural.c.mbed*,ptolemy.matlab.*,ptolemy.actor.lib.fmi.fmus.omc*,ptolemy.domains.openmodelica*,ptdb.kernel.bl.save.test.*,ptdb.kernel.bl.load.test.*,ptdb.kernel.bl.search.test.*,ptdb.kernel.bl.migration.test.*,ptdb.kernel.database.test.*,ptdb.test.*,ptdb.gui.test.*,org.ptolemy.scala.*,diva.util.java2d.svg.*,ptolemy.domains.ptinyos.*,ptolemy.actor.lib.fmi.fmipp.*,,org.terraswarm.accessor.accessors.web.node_modules.*,org.terraswarm.accessor.accessors-svn,ptolemy.actor.ptalon.demo.ptinyos.SendAndReceiveCnt.output,ptolemy.actor.ptalon.demo.ptinyos.SenseToLeds.output,ptolemy.domains.ptinyos.demo.CntToLedsAndRfm.output,ptolemy.domains.ptinyos.demo.RfmToLeds.output,ptolemy.domains.ptinyos.demo.SendAndReceiveCnt.output,ptolemy.domains.ptinyos.demo.SenseToLeds.output" />
    <property name="env.TRAVIS_COMMIT_MESSAGE" value="Separate test for constraints of full configuration." />
    <property name="env.XDG_SESSION_ID" value="2" />
    <property name="keystore" value="ptKeystore" />
    <property name="junit.output.dir" value="/home/travis/build/icyphy/ptII/reports/junit" />
    <property name="npm.return.code" value="0" />
    <property name="user.dir" value="/home/travis/build/icyphy/ptII/ptolemy/configs/test" />
    <property name="env.XFILESEARCHPATH" value="/usr/dt/app-defaults/%L/Dt" />
    <property name="env.TRAVIS_NODE_VERSION" value="7" />
    <property name="env.TRAVIS_EVENT_TYPE" value="push" />
    <property name="env.MAIL" value="/var/mail/travis" />
    <property name="env.PWD" value="/home/travis/build/icyphy/ptII" />
    <property name="env.PERLBREW_ROOT" value="/home/travis/perl5/perlbrew" />
    <property name="timeout.npm" value="45000" />
    <property name="env.PAGER" value="cat" />
    <property name="sun.cpu.endian" value="little" />
    <property name="env.TRAVIS_BUILD_STAGE_NAME" value="Test" />
    <property name="env.PERLBREW_HOME" value="/home/travis/.perlbrew" />
    <property name="env.RAILS_ENV" value="test" />
    <property name="java.vm.version" value="25.151-b12" />
    <property name="java.class.path" value="/home/travis/build/icyphy/ptII:/home/travis/build/icyphy/ptII/lib/bsh-2.0b4.jar:/home/travis/build/icyphy/ptII/lib/ptCal.jar:/home/travis/build/icyphy/ptII/lib/java_cup.jar:/home/travis/build/icyphy/ptII/lib/saxon8.jar:/home/travis/build/icyphy/ptII/lib/saxon8-dom.jar:/home/travis/build/icyphy/ptII/lib/chic.jar:/home/travis/build/icyphy/ptII/lib/ptcolt.jar:/usr/lib/jvm/java-8-oracle/lib/tools.jar:/usr/lib/eclipse/plugins/org.eclipse.jdt.core_3.8.2.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.core.runtime_3.8.0.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.osgi_3.8.1.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.core.resources_3.8.1.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.equinox.common_3.6.100.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.core.jobs_3.5.200.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.core.contenttype_3.4.200.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.equinox.preferences_3.5.0.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.text_3.5.200.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.ui.workbench_3.8.1.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.jface_3.8.0.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.swt_3.8.2.jar:/usr/lib/eclipse/plugins/org.eclipse.jface.text_3.8.1.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.ui.workbench.texteditor_3.8.0.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.ui.editors_3.8.0.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.core.commands_3.6.1.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.equinox.registry_3.5.200.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.ui.console_3.5.100.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.ui.forms_3.5.200.dist.jar:/usr/lib/eclipse/plugins/org.eclipse.ui.ide_3.8.1.dist.jar:/home/travis/build/icyphy/ptII/vendors/oracle/dbxml.jar:/home/travis/build/icyphy/ptII/vendors/oracle/db.jar:/home/travis/build/icyphy/ptII/vendors/misc/itext/iText.jar:/home/travis/build/icyphy/ptII/lib/g4ltl.jar:/home/travis/build/icyphy/ptII/lib/StructuralCoder.jar:/home/travis/build/icyphy/ptII/lib/org-openide-util.jar:/home/travis/build/icyphy/ptII/lib/org-openide-util-lookup.jar:/home/travis/build/icyphy/ptII/lib/org-netbeans-api-visual.jar:/home/travis/build/icyphy/ptII/vendors/jai-1_1_2_01/lib/jai_core.jar:/home/travis/build/icyphy/ptII/vendors/jai-1_1_2_01/lib/jai_codec.jar:/home/travis/build/icyphy/ptII/lib/jcerti.jar:/home/travis/build/icyphy/ptII/lib/smack.jar:/home/travis/build/icyphy/ptII/lib/smackx.jar:/home/travis/build/icyphy/ptII/lib/jetty-all-8.1.5-v20120716.jar:/home/travis/build/icyphy/ptII/lib/javax.servlet-api-3.0.1.jar:/home/travis/build/icyphy/ptII/lib/javax.mail.jar:/home/travis/build/icyphy/ptII/vendors/JMF-2.1.1e/lib/jmf.jar:/home/travis/build/icyphy/ptII/lib/jna-4.0.0-variadic.jar:/home/travis/build/icyphy/ptII/vendors/misc/joystick/Joystick.jar:/home/travis/build/icyphy/ptII/lib/ptjacl.jar:/home/travis/build/icyphy/ptII/lib/jsoup-1.8.2.jar:/home/travis/build/icyphy/ptII/lib/junit-4.8.2.jar:/home/travis/build/icyphy/ptII/lib/JUnitParams-0.4.0.jar:/home/travis/build/icyphy/ptII/ptolemy/actor/lib/excel/jxl.jar:/home/travis/build/icyphy/ptII/lib/jython.jar:/home/travis/build/icyphy/ptII/lib/kieler.jar:/home/travis/build/icyphy/ptII/vendors/opencv/share/OpenCV/java/opencv-341.jar:/home/travis/build/icyphy/ptII/lib/oscP5.jar:/home/travis/build/icyphy/ptII/lib/nrjavaserial-3.11.0.devel.jar:/usr/share/java/j3dcore.jar:/usr/share/java/j3dutils.jar:/usr/share/java/vecmath.jar:/home/travis/build/icyphy/ptII/ptolemy/distributed/jini/jar/jini-core.jar:/home/travis/build/icyphy/ptII/ptolemy/distributed/jini/jar/jini-ext.jar:/home/travis/build/icyphy/ptII/ptolemy/distributed/jini/jar/sun-util.jar:/home/travis/build/icyphy/ptII/lib/protobuf-java-2.4.1.jar:/home/travis/build/icyphy/ptII/lib/org.eclipse.paho.client.mqttv3.jar:/home/travis/build/icyphy/ptII/ptserver/lib/hessian-4.0.7.jar:/home/travis/build/icyphy/ptII/ptserver/lib/wmqtt.jar:/home/travis/build/icyphy/ptII/lib/mapss.jar:/home/travis/build/icyphy/ptII/ptolemy/actor/ptalon/antlr/antlr.jar:/home/travis/build/icyphy/ptII/lib/JRI.jar:/home/travis/build/icyphy/ptII/lib/commons-lang-2.6.jar:/home/travis/build/icyphy/ptII/lib/commons-logging-1.1.1.jar:/home/travis/build/icyphy/ptII/lib/sootclasses.jar:/home/travis/build/icyphy/ptII/ptolemy/actor/lib/database/mysql-connector-java-5.1.6-bin.jar:/home/travis/build/icyphy/ptII/vendors/misc/sphinx4/sphinx4-data-5prealpha.jar:/home/travis/build/icyphy/ptII/vendors/misc/sphinx4/sphinx4-core-5prealpha.jar:/home/travis/build/icyphy/ptII/lib/PDFRenderer.jar:/home/travis/build/icyphy/ptII/lib/svgSalamander.jar:/home/travis/build/icyphy/ptII/lib/rsyntaxtextarea-2.6.0-SNAPSHOT.jar:/home/travis/build/icyphy/ptII/lib/hazelcast-3.8.2.jar:/home/travis/build/icyphy/ptII/lib/jackson-annotations-2.9.0.jar:/home/travis/build/icyphy/ptII/lib/jackson-core-2.9.3.jar:/home/travis/build/icyphy/ptII/lib/jackson-databind-2.9.3.jar:/home/travis/build/icyphy/ptII/lib/netty-buffer-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-codec-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-codec-dns-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-codec-http-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-codec-http2-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-common-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-handler-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-resolver-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-resolver-dns-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/netty-transport-4.1.19.Final.jar:/home/travis/build/icyphy/ptII/lib/vertx-codegen-3.5.1.jar:/home/travis/build/icyphy/ptII/lib/vertx-core-3.5.1.jar:/home/travis/build/icyphy/ptII/lib/vertx-hazelcast-3.5.1.jar:/home/travis/build/icyphy/ptII/lib/vertx-lang-js-3.5.1.jar:/home/travis/build/icyphy/ptII/lib/vertx-service-proxy-3.5.1.jar:/home/travis/build/icyphy/ptII/lib/vertx-web-3.5.1.jar:/home/travis/build/icyphy/ptII/lib/slf4j-api-1.7.13.jar:/home/travis/build/icyphy/ptII/lib/slf4j-simple-1.7.13.jar:/home/travis/build/icyphy/ptII/lib/webcam-capture-0.3.12.jar:/home/travis/build/icyphy/ptII/lib/bridj-0.7.0.jar:/home/travis/build/icyphy/ptII/lib/xbjlib-1.1.0.nrjavaserial.jar:/home/travis/build/icyphy/ptII/ptolemy/moml/test:/home/travis/build/icyphy/ptII/ant/lib/ant-launcher.jar:/home/travis/build/icyphy/ptII/ant/lib/ant.jar:/home/travis/build/icyphy/ptII/ant/lib/ant-junit.jar:/home/travis/build/icyphy/ptII/ant/lib/ant-junit4.jar" />
    <property name="ant.library.dir" value="/home/travis/build/icyphy/ptII/ant/lib" />
    <property name="os.arch" value="amd64" />
    <property name="env.TRAVIS_LANGUAGE" value="node_js" />
    <property name="env.CONTINUOUS_INTEGRATION" value="true" />
    <property name="env.TRAVIS_STACK_LANGUAGES" value="__garnet__ c c++ clojure cplusplus cpp default go groovy java node_js php pure_java python ruby scala" />
    <property name="test.name" value="ptolemy.actor.lib.test.junit.JUnitTclTest" />
    <property name="sun.java.launcher" value="SUN_STANDARD" />
    <property name="env.PYTHON_CONFIGURE_OPTS" value="--enable-unicode=ucs4 --with-wide-unicode --enable-shared --enable-ipv6 --enable-loadable-sqlite-extensions --with-computed-gotos" />
    <property name="ant.core.lib" value="/home/travis/build/icyphy/ptII/ant/lib/ant.jar" />
    <property name="java.vm.specification.vendor" value="Oracle Corporation" />
    <property name="env.BCVTB_HOME" value="/home/travis/build/icyphy/ptII/lbnl" />
    <property name="file.separator" value="/" />
    <property name="java.runtime.version" value="1.8.0_151-b12" />
    <property name="spotbugs.home" value="/home/travis/build/icyphy/ptII/vendors/spotbugs-3.1.1" />
    <property name="sun.boot.class.path" value="/usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/usr/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes" />
    <property name="env.HAS_JOSH_K_SEAL_OF_APPROVAL" value="true" />
    <property name="env.TRAVIS_OSX_IMAGE" value="" />
    <property name="env.XDG_RUNTIME_DIR" value="/run/user/2000" />
    <property name="env.TRAVIS_JOB_ID" value="373652183" />
    <property name="env.TRAVIS_BRANCH" value="master" />
    <property name="user.country" value="US" />
    <property name="env.CERTI_HOME_TRAVIS" value="/home/travis/pthla/certi-tools" />
    <property name="env.SHELL" value="/bin/bash" />
    <property name="java.maxmemory.large" value="5000m" />
    <property name="model" value="" />
    <property name="env.PT_TRAVIS_TEST_CORE5_XML" value="true" />
    <property name="env.CASHER_DIR" value="/home/travis/.casher" />
    <property name="env.NVM_CD_FLAGS" value="" />
    <property name="jshint.executable" value="/home/travis/node_modules/jshint/bin/jshint" />
    <property name="java.vendor" value="Oracle Corporation" />
    <property name="env.JRUBY_OPTS" value=" --client -J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1 -J-Xss2m -Xcompile.invokedynamic=false" />
    <property name="env.TRAVIS_PRE_CHEF_BOOTSTRAP_TIME" value="2017-12-05T19:32:55" />
    <property name="env.ELIXIR_VERSION" value="1.4.5" />
    <property name="env.TRAVIS_STACK_JOB_BOARD_REGISTER" value="/.job-board-register.yml" />
    <property name="java.specification.version" value="1.8" />
    <property name="env.IRBRC" value="/home/travis/.rvm/rubies/ruby-2.4.1/.irbrc" />
    <property name="env.TRAVIS" value="true" />
    <property name="sun.arch.data.model" value="64" />
  </properties>
  <testcase classname="ptolemy.util.test.junit.TclTests" name="[0] /home/travis/build/icyphy/ptII/ptolemy/configs/test/allConfigs.tcl (RunTclFile)" time="320.796" />
  <testcase classname="ptolemy.util.test.junit.TclTests" name="[1] /home/travis/build/icyphy/ptII/ptolemy/configs/test/allDemos.tcl (RunTclFile)" time="0.003" />
  <testcase classname="ptolemy.util.test.junit.TclTests" name="[2] /home/travis/build/icyphy/ptII/ptolemy/configs/test/checkCapeCodeConstraints.tcl (RunTclFile)" time="0.02">
    <error message="Evaluating the Tcl file &quot;/home/travis/build/icyphy/ptII/ptolemy/configs/test/checkCapeCodeConstraints.tcl&quot;resulted in a TclException being thrown.&#xa;The Tcl errorInfo variable could not be obtained.&#xa;java.lang.Exception: Evaluating the Tcl file &quot;/home/travis/build/icyphy/ptII/ptolemy/configs/test/checkCapeCodeConstraints.tcl&quot;resulted in a TclException being thrown.&#xa;The Tcl errorInfo global variable has the value:&#xa;Could not get the  ptolemy/configs/capeCode/configuration.xml resources&#xa;    while executing&#xa;&quot;error &quot;Could not get the  ptolemy/configs/$configurationFile resources&quot;&quot;&#xa;    invoked from within&#xa;&quot;if {[java::isnull $URL]} {&#xa;&#x9;error &quot;Could not get the  ptolemy/configs/$configurationFile resources&quot;&#xa;    }&quot;&#xa;    (procedure &quot;parseConfiguration&quot; line 54)&#xa;    invoked from within&#xa;&quot;parseConfiguration $configurationFile $parser&quot;&#xa;    invoked from within&#xa;&quot;set configuration [parseConfiguration $configurationFile $parser]&quot;&#xa;    (procedure &quot;checkConstraints&quot; line 18)&#xa;    invoked from within&#xa;&quot;checkConstraints capeCode/configuration.xml&quot;&#xa;    (file &quot;/home/travis/build/icyphy/ptII/ptolemy/configs/test/checkCapeCodeConstraints.tcl&quot; line 46)" type="java.lang.Exception">java.lang.Exception: Evaluating the Tcl file &quot;/home/travis/build/icyphy/ptII/ptolemy/configs/test/checkCapeCodeConstraints.tcl&quot;resulted in a TclException being thrown.
The Tcl errorInfo variable could not be obtained.
java.lang.Exception: Evaluating the Tcl file &quot;/home/travis/build/icyphy/ptII/ptolemy/configs/test/checkCapeCodeConstraints.tcl&quot;resulted in a TclException being thrown.
The Tcl errorInfo global variable has the value:
Could not get the  ptolemy/configs/capeCode/configuration.xml resources
    while executing
&quot;error &quot;Could not get the  ptolemy/configs/$configurationFile resources&quot;&quot;
    invoked from within
&quot;if {[java::isnull $URL]} {
	error &quot;Could not get the  ptolemy/configs/$configurationFile resources&quot;
    }&quot;
    (procedure &quot;parseConfiguration&quot; line 54)
    invoked from within
&quot;parseConfiguration $configurationFile $parser&quot;
    invoked from within
&quot;set configuration [parseConfiguration $configurationFile $parser]&quot;
    (procedure &quot;checkConstraints&quot; line 18)
    invoked from within
&quot;checkConstraints capeCode/configuration.xml&quot;
    (file &quot;/home/travis/build/icyphy/ptII/ptolemy/configs/test/checkCapeCodeConstraints.tcl&quot; line 46)
	at ptolemy.util.test.junit.TclTests.RunTclFile(TclTests.java:260)
	at junitparams.internal.InvokeParameterisedMethod.evaluate(InvokeParameterisedMethod.java:102)
	at junitparams.internal.ParameterisedTestMethodRunner.runMethodInvoker(ParameterisedTestMethodRunner.java:47)
	at junitparams.internal.ParameterisedTestMethodRunner.runTestMethod(ParameterisedTestMethodRunner.java:41)
	at junitparams.internal.ParameterisedTestClassRunner.runParameterisedTest(ParameterisedTestClassRunner.java:143)
	at junitparams.JUnitParamsRunner.runChild(JUnitParamsRunner.java:237)
	at junitparams.JUnitParamsRunner.runChild(JUnitParamsRunner.java:215)
Caused by: java.lang.reflect.InvocationTargetException
	at ptolemy.util.test.junit.TclTests.RunTclFile(TclTests.java:233)
Caused by: tcl.lang.TclException
	at tcl.lang.ErrorCmd.cmdProc(ErrorCmd.java:70)
	at tcl.lang.AutoloadStub.cmdProc(Extension.java:144)
	at tcl.lang.Parser.evalObjv(Parser.java:740)
	at tcl.lang.Parser.eval2(Parser.java:1138)
	at tcl.lang.Interp.eval(Interp.java:1782)
	at tcl.lang.Interp.eval(Interp.java:1841)
	at tcl.lang.IfCmd.cmdProc(IfCmd.java:57)
	at tcl.lang.Parser.evalObjv(Parser.java:740)
	at tcl.lang.Parser.eval2(Parser.java:1138)
	at tcl.lang.Procedure.cmdProc(Procedure.java:175)
	at tcl.lang.Parser.evalObjv(Parser.java:740)
	at tcl.lang.Parser.eval2(Parser.java:1138)
	at tcl.lang.Parser.evalTokens(Parser.java:930)
	at tcl.lang.Parser.eval2(Parser.java:1125)
	at tcl.lang.Procedure.cmdProc(Procedure.java:175)
	at tcl.lang.Parser.evalObjv(Parser.java:740)
	at tcl.lang.Parser.eval2(Parser.java:1138)
	at tcl.lang.Interp.eval(Interp.java:1782)
	at tcl.lang.Interp.evalFile(Interp.java:1880)
</error>
  </testcase>
  <testcase classname="ptolemy.util.test.junit.TclTests" name="[3] /home/travis/build/icyphy/ptII/ptolemy/configs/test/checkFullConstraints.tcl (RunTclFile)" time="290.617" />
  <testcase classname="ptolemy.util.test.junit.TclTests" name="[4] /home/travis/build/icyphy/ptII/ptolemy/configs/test/cloneTest.tcl (RunTclFile)" time="0.003">
    <error message="Evaluating the Tcl file &quot;/home/travis/build/icyphy/ptII/ptolemy/configs/test/cloneTest.tcl&quot;resulted in a TclException being thrown.&#xa;The Tcl errorInfo variable could not be obtained.&#xa;java.lang.Exception: Evaluating the Tcl file &quot;/home/travis/build/icyphy/ptII/ptolemy/configs/test/cloneTest.tcl&quot;resulted in a TclException being thrown.&#xa;The Tcl errorInfo global variable has the value:&#xa;couldn&apos;t read file &quot;testDefs.tcl&quot;&#xa;    (file line 46)&#xa;    invoked from within&#xa;&quot;source testDefs.tcl&quot;&#xa;    (file &quot;/home/travis/build/icyphy/ptII/ptolemy/configs/test/cloneTest.tcl&quot; line 3)" type="java.lang.Exception">java.lang.Exception: Evaluating the Tcl file &quot;/home/travis/build/icyphy/ptII/ptolemy/configs/test/cloneTest.tcl&quot;resulted in a TclException being thrown.
The Tcl errorInfo variable could not be obtained.
java.lang.Exception: Evaluating the Tcl file &quot;/home/travis/build/icyphy/ptII/ptolemy/configs/test/cloneTest.tcl&quot;resulted in a TclException being thrown.
The Tcl errorInfo global variable has the value:
couldn&apos;t read file &quot;testDefs.tcl&quot;
    (file line 46)
    invoked from within
&quot;source testDefs.tcl&quot;
    (file &quot;/home/travis/build/icyphy/ptII/ptolemy/configs/test/cloneTest.tcl&quot; line 3)
	at ptolemy.util.test.junit.TclTests.RunTclFile(TclTests.java:260)
	at junitparams.internal.InvokeParameterisedMethod.evaluate(InvokeParameterisedMethod.java:102)
	at junitparams.internal.ParameterisedTestMethodRunner.runMethodInvoker(ParameterisedTestMethodRunner.java:47)
	at junitparams.internal.ParameterisedTestMethodRunner.runTestMethod(ParameterisedTestMethodRunner.java:41)
	at junitparams.internal.ParameterisedTestClassRunner.runParameterisedTest(ParameterisedTestClassRunner.java:143)
	at junitparams.JUnitParamsRunner.runChild(JUnitParamsRunner.java:237)
	at junitparams.JUnitParamsRunner.runChild(JUnitParamsRunner.java:215)
Caused by: java.lang.reflect.InvocationTargetException
	at ptolemy.util.test.junit.TclTests.RunTclFile(TclTests.java:233)
Caused by: tcl.lang.TclException: couldn&apos;t read file &quot;testDefs.tcl&quot;
	at tcl.lang.Interp.evalFile(Interp.java:1872)
	at tcl.lang.SourceCmd.cmdProc(SourceCmd.java:75)
	at tcl.lang.Parser.evalObjv(Parser.java:740)
	at tcl.lang.Parser.eval2(Parser.java:1138)
	at tcl.lang.Interp.eval(Interp.java:1782)
	at tcl.lang.Interp.evalFile(Interp.java:1880)
</error>
  </testcase>
  <testcase classname="ptolemy.util.test.junit.TclTests" name="[5] /home/travis/build/icyphy/ptII/ptolemy/configs/test/configTest.tcl (RunTclFile)" time="14.751" />
  <testcase classname="ptolemy.util.test.junit.TclTests" name="[6] /home/travis/build/icyphy/ptII/ptolemy/configs/test/configurationTools.tcl (RunTclFile)" time="0.001" />
  <testcase classname="ptolemy.util.test.junit.TclTests" name="[7] /home/travis/build/icyphy/ptII/ptolemy/configs/test/missingDemos.tcl (RunTclFile)" time="2.697">
    <failure message="Number of failed tests is has increased. expected:&lt;0&gt; but was:&lt;3&gt;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: Number of failed tests is has increased. expected:&lt;0&gt; but was:&lt;3&gt;
	at ptolemy.util.test.junit.TclTests.RunTclFile(TclTests.java:286)
	at junitparams.internal.InvokeParameterisedMethod.evaluate(InvokeParameterisedMethod.java:102)
	at junitparams.internal.ParameterisedTestMethodRunner.runMethodInvoker(ParameterisedTestMethodRunner.java:47)
	at junitparams.internal.ParameterisedTestMethodRunner.runTestMethod(ParameterisedTestMethodRunner.java:41)
	at junitparams.internal.ParameterisedTestClassRunner.runParameterisedTest(ParameterisedTestClassRunner.java:143)
	at junitparams.JUnitParamsRunner.runChild(JUnitParamsRunner.java:237)
	at junitparams.JUnitParamsRunner.runChild(JUnitParamsRunner.java:215)
</failure>
  </testcase>
  <testcase classname="ptolemy.util.test.junit.TclTests" name="[8] /home/travis/build/icyphy/ptII/ptolemy/configs/test/validDemos.tcl (RunTclFile)" time="37.889">
    <failure message="Number of failed tests is has increased. expected:&lt;3&gt; but was:&lt;5&gt;" type="junit.framework.AssertionFailedError">junit.framework.AssertionFailedError: Number of failed tests is has increased. expected:&lt;3&gt; but was:&lt;5&gt;
	at ptolemy.util.test.junit.TclTests.RunTclFile(TclTests.java:286)
	at junitparams.internal.InvokeParameterisedMethod.evaluate(InvokeParameterisedMethod.java:102)
	at junitparams.internal.ParameterisedTestMethodRunner.runMethodInvoker(ParameterisedTestMethodRunner.java:47)
	at junitparams.internal.ParameterisedTestMethodRunner.runTestMethod(ParameterisedTestMethodRunner.java:41)
	at junitparams.internal.ParameterisedTestClassRunner.runParameterisedTest(ParameterisedTestClassRunner.java:143)
	at junitparams.JUnitParamsRunner.runChild(JUnitParamsRunner.java:237)
	at junitparams.JUnitParamsRunner.runChild(JUnitParamsRunner.java:215)
</failure>
  </testcase>
  <testcase classname="ptolemy.util.test.junit.AutoKnownFailedTests" name="[0] ThereAreNoKnowFailedTests (RunModel)" time="0.001" />
  <testcase classname="ptolemy.util.test.junit.AutoNameArchTests" name="[0] ThereAreNoAutoTests (RunModel)" time="0.0" />
  <testcase classname="ptolemy.util.test.junit.AutoTests" name="[0] ThereAreNoAutoTests (RunModel)" time="0.001" />
  <system-out><![CDATA[/home/travis/build/icyphy/ptII/ptolemy/configs/test/allConfigs.tcl
testDefs.tcl: setting time out to 9000 seconds at Tue May 01 21:46:43 UTC 2018
1525211203202 ms. Memory: 116224K Free: 94005K (81%)
 Force everything to get expanded ptolemy/configs/bcvtb/configuration.xml
    (Skipping certain optional packages, jxta and viptos)
-------> Before clone
-------> after clone

Warning: In 'ptolemy.actor.lib.io.FileReader'
  The getName() method returns
   'fileOrURL' but the  field is named
   'fileOrURLPort'
   This is technically a violation  of the coding standard,
   but permissible because the name  ends in 'Port'
-------> Before clone
-------> after clone
1525211217824 ms. Memory: 976896K Free: 766936K (79%)
Setting containers of atomic entities to null
1525211218245 ms. Memory: 1015808K Free: 941991K (93%)
 Force everything to get expanded ptolemy/configs/ptiny/configuration.xml
    (Skipping certain optional packages, jxta and viptos)
-------> Before clone
-------> after clone

Warning: In 'ptolemy.actor.lib.io.FileReader'
  The getName() method returns
   'fileOrURL' but the  field is named
   'fileOrURLPort'
   This is technically a violation  of the coding standard,
   but permissible because the name  ends in 'Port'
-------> Before clone
-------> after clone
1525211231735 ms. Memory: 1265664K Free: 645806K (51%)
Setting containers of atomic entities to null
1525211232455 ms. Memory: 1449984K Free: 1321624K (91%)
 Force everything to get expanded ptolemy/configs/space/configuration.xml
    (Skipping certain optional packages, jxta and viptos)
-------> Before clone
-------> after clone
Warning: space/configuration.xml has no 'actor library.Directors'? (this is ok for dsp, viptos)
-------> Before clone
-------> after clone
1525211232730 ms. Memory: 1449984K Free: 1250777K (86%)
Setting containers of atomic entities to null
1525211233283 ms. Memory: 1459200K Free: 1331852K (91%)
 Force everything to get expanded ptolemy/configs/dsp/configuration.xml
    (Skipping certain optional packages, jxta and viptos)
-------> Before clone
-------> after clone

Warning: In 'ptolemy.actor.lib.io.FileReader'
  The getName() method returns
   'fileOrURL' but the  field is named
   'fileOrURLPort'
   This is technically a violation  of the coding standard,
   but permissible because the name  ends in 'Port'
Warning: dsp/configuration.xml has no 'actor library.Directors'? (this is ok for dsp, viptos)
-------> Before clone
-------> after clone
1525211237461 ms. Memory: 1471488K Free: 595640K (40%)
Setting containers of atomic entities to null
1525211237970 ms. Memory: 1468416K Free: 1320318K (90%)
Skipping viptos/configuration.xml, PtinyOS is not typically installed.
 Force everything to get expanded ptolemy/configs/pn/configuration.xml
    (Skipping certain optional packages, jxta and viptos)
-------> Before clone
-------> after clone

Warning: In 'ptolemy.actor.lib.io.FileReader'
  The getName() method returns
   'fileOrURL' but the  field is named
   'fileOrURLPort'
   This is technically a violation  of the coding standard,
   but permissible because the name  ends in 'Port'
Warning: pn/configuration.xml has no 'actor library.Directors'? (this is ok for dsp, viptos)
-------> Before clone
-------> after clone
1525211244379 ms. Memory: 1572864K Free: 158082K (10%)
Setting containers of atomic entities to null
1525211245027 ms. Memory: 1577984K Free: 1402549K (89%)
 Force everything to get expanded ptolemy/configs/ptdb/configuration.xml
    (Skipping certain optional packages, jxta and viptos)
-------> Before clone
-------> after clone

Warning: In 'ptolemy.actor.lib.io.FileReader'
  The getName() method returns
   'fileOrURL' but the  field is named
   'fileOrURLPort'
   This is technically a violation  of the coding standard,
   but permissible because the name  ends in 'Port'
Skipping drop test of tm.kernel.SchedulePlotter because it must be dropped into a container that has a TMDirector
-------> Before clone
-------> after clone
1525211258614 ms. Memory: 1703936K Free: 1345974K (79%)
Setting containers of atomic entities to null
1525211260046 ms. Memory: 1806848K Free: 1546601K (86%)
 Force everything to get expanded ptolemy/configs/cyphysim/configuration.xml
    (Skipping certain optional packages, jxta and viptos)
-------> Before clone
-------> after clone

Warning: In 'ptolemy.actor.lib.io.FileReader'
  The getName() method returns
   'fileOrURL' but the  field is named
   'fileOrURLPort'
   This is technically a violation  of the coding standard,
   but permissible because the name  ends in 'Port'
Skipping StateSpaceModel as this test iterates through the attributes and calls attributeChanged, which triggers a ConcurrentModificationException.  See org/ptolemy/ssm/test/SSMTest.java
Skipping StateSpaceModel as this test iterates through the attributes and calls attributeChanged, which triggers a ConcurrentModificationException.  See org/ptolemy/ssm/test/SSMTest.java
Skipping StateSpaceModel as this test iterates through the attributes and calls attributeChanged, which triggers a ConcurrentModificationException.  See org/ptolemy/ssm/test/SSMTest.java
Warning: cyphysim/configuration.xml has no 'actor library.Directors'? (this is ok for dsp, viptos)
-------> Before clone
-------> after clone
1525211273576 ms. Memory: 1981952K Free: 717002K (36%)
Setting containers of atomic entities to null
1525211274815 ms. Memory: 1976832K Free: 1654294K (84%)
 Force everything to get expanded ptolemy/configs/capecode/configuration.xml
    (Skipping certain optional packages, jxta and viptos)
JSAccessor: PT_NO_NET environment variable is set, so git pull and ptdoc are not being run.
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/audio/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/cameras/index.json
No physical cameras found, using WebcamDummyDriver.
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/devices/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/image/index.json
CharacterRecognition: The tesseract module was not present.  The CharacterRecognition accessor is not supported on this accessor host. (Thread[main,5,main])
CharacterRecognition: The tesseract module was not present.  The CharacterRecognition accessor is not supported on this accessor host. (Thread[main,5,main])
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/net/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/robotics/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/geodesy/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/services/index.json
Heartbeat: Heartbeat: Could not get $KEYSTORE/heartbeatKey:  ptolemy.kernel.util.IllegalActionException: Failed to read URI: /home/travis/.ptKeystore/heartbeatKey
  in .configuration.actor library.Accessors.services.Heartbeat
Because:
Cannot read file '/home/travis/.ptKeystore/heartbeatKey' or '/home/travis/.ptKeystore/heartbeatKey'
The key is not public, so this accessor is only useful If you have the key.  See https://www.icyphy.org/accessors/library/index.html?accessor=services.Heartbeat (Thread[main,5,main])
Heartbeat: Heartbeat: Could not get $KEYSTORE/heartbeatKey:  ptolemy.kernel.util.IllegalActionException: Failed to read URI: /home/travis/.ptKeystore/heartbeatKey
  in .configuration.actor library.Accessors.services.Heartbeat
Because:
Cannot read file '/home/travis/.ptKeystore/heartbeatKey' or '/home/travis/.ptKeystore/heartbeatKey'
The key is not public, so this accessor is only useful If you have the key.  See https://www.icyphy.org/accessors/library/index.html?accessor=services.Heartbeat (Thread[main,5,main])
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/signals/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/test/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/utilities/index.json
The Mutable accessor original file has no documentation, so we are not running jsdoc on https://accessors.org/utilities/Mutable.js
-------> Before clone
-------> after clone

Warning: In 'ptolemy.actor.lib.io.FileReader'
  The getName() method returns
   'fileOrURL' but the  field is named
   'fileOrURLPort'
   This is technically a violation  of the coding standard,
   but permissible because the name  ends in 'Port'
Skipping StateSpaceModel as this test iterates through the attributes and calls attributeChanged, which triggers a ConcurrentModificationException.  See org/ptolemy/ssm/test/SSMTest.java
Skipping StateSpaceModel as this test iterates through the attributes and calls attributeChanged, which triggers a ConcurrentModificationException.  See org/ptolemy/ssm/test/SSMTest.java
Skipping StateSpaceModel as this test iterates through the attributes and calls attributeChanged, which triggers a ConcurrentModificationException.  See org/ptolemy/ssm/test/SSMTest.java
Warning: capecode/configuration.xml has no 'actor library.Directors'? (this is ok for dsp, viptos)
-------> Before clone
-------> after clone
1525211378359 ms. Memory: 2207232K Free: 1232680K (56%)
Setting containers of atomic entities to null
1525211381066 ms. Memory: 2155520K Free: 1438742K (67%)
 Force everything to get expanded ptolemy/configs/full/configuration.xml
    (Skipping certain optional packages, jxta and viptos)
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/audio/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/cameras/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/devices/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/image/index.json
CharacterRecognition: The tesseract module was not present.  The CharacterRecognition accessor is not supported on this accessor host. (Thread[main,5,main])
CharacterRecognition: The tesseract module was not present.  The CharacterRecognition accessor is not supported on this accessor host. (Thread[main,5,main])
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/net/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/robotics/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/geodesy/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/services/index.json
Heartbeat: Heartbeat: Could not get $KEYSTORE/heartbeatKey:  ptolemy.kernel.util.IllegalActionException: Failed to read URI: /home/travis/.ptKeystore/heartbeatKey
  in .configuration.actor library.MoreLibraries.Accessors.services.Heartbeat
Because:
Cannot read file '/home/travis/.ptKeystore/heartbeatKey' or '/home/travis/.ptKeystore/heartbeatKey'
The key is not public, so this accessor is only useful If you have the key.  See https://www.icyphy.org/accessors/library/index.html?accessor=services.Heartbeat (Thread[main,5,main])
Heartbeat: Heartbeat: Could not get $KEYSTORE/heartbeatKey:  ptolemy.kernel.util.IllegalActionException: Failed to read URI: /home/travis/.ptKeystore/heartbeatKey
  in .configuration.actor library.MoreLibraries.Accessors.services.Heartbeat
Because:
Cannot read file '/home/travis/.ptKeystore/heartbeatKey' or '/home/travis/.ptKeystore/heartbeatKey'
The key is not public, so this accessor is only useful If you have the key.  See https://www.icyphy.org/accessors/library/index.html?accessor=services.Heartbeat (Thread[main,5,main])
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/signals/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/test/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/utilities/index.json
The Mutable accessor original file has no documentation, so we are not running jsdoc on https://accessors.org/utilities/Mutable.js
-------> Before clone
-------> after clone

Warning: In 'ptolemy.actor.lib.io.FileReader'
  The getName() method returns
   'fileOrURL' but the  field is named
   'fileOrURLPort'
   This is technically a violation  of the coding standard,
   but permissible because the name  ends in 'Port'
Skipping StateSpaceModel as this test iterates through the attributes and calls attributeChanged, which triggers a ConcurrentModificationException.  See org/ptolemy/ssm/test/SSMTest.java
Skipping StateSpaceModel as this test iterates through the attributes and calls attributeChanged, which triggers a ConcurrentModificationException.  See org/ptolemy/ssm/test/SSMTest.java
Skipping StateSpaceModel as this test iterates through the attributes and calls attributeChanged, which triggers a ConcurrentModificationException.  See org/ptolemy/ssm/test/SSMTest.java
Skipping drop test of tm.kernel.SchedulePlotter because it must be dropped into a container that has a TMDirector
-------> Before clone
-------> after clone
1525211475040 ms. Memory: 2410496K Free: 776925K (32%)
Setting containers of atomic entities to null
1525211479725 ms. Memory: 2658816K Free: 1518859K (57%)
 Force everything to get expanded ptolemy/configs/ptinyViewer/configuration.xml
    (Skipping certain optional packages, jxta and viptos)
-------> Before clone
-------> after clone
Warning: ptinyViewer/configuration.xml has no 'actor library'?  (this is ok for ptinyViewer)
-------> Before clone
-------> after clone
1525211479746 ms. Memory: 2658816K Free: 1513120K (57%)
Setting containers of atomic entities to null
1525211482168 ms. Memory: 2678272K Free: 1550071K (58%)
 Force everything to get expanded ptolemy/configs/ptserver/configuration.xml
    (Skipping certain optional packages, jxta and viptos)
-------> Before clone
-------> after clone

Warning: In 'ptolemy.actor.lib.io.FileReader'
  The getName() method returns
   'fileOrURL' but the  field is named
   'fileOrURLPort'
   This is technically a violation  of the coding standard,
   but permissible because the name  ends in 'Port'
-------> Before clone
-------> after clone
1525211488670 ms. Memory: 2722304K Free: 1207342K (44%)
Setting containers of atomic entities to null
1525211491983 ms. Memory: 2306560K Free: 1129924K (49%)
 Force everything to get expanded ptolemy/configs/visualsense/configuration.xml
    (Skipping certain optional packages, jxta and viptos)
-------> Before clone
-------> after clone

Warning: In 'ptolemy.actor.lib.io.FileReader'
  The getName() method returns
   'fileOrURL' but the  field is named
   'fileOrURLPort'
   This is technically a violation  of the coding standard,
   but permissible because the name  ends in 'Port'
-------> Before clone
-------> after clone
1525211499242 ms. Memory: 2726912K Free: 919838K (34%)
Setting containers of atomic entities to null
1525211502698 ms. Memory: 2721792K Free: 1502900K (55%)
Skipping jxta/configuration.xml, running vergil -jxta brings up a window
 Force everything to get expanded ptolemy/configs/fullViewer/configuration.xml
    (Skipping certain optional packages, jxta and viptos)
-------> Before clone
-------> after clone
Warning: fullViewer/configuration.xml has no 'actor library'?  (this is ok for ptinyViewer)
-------> Before clone
-------> after clone
1525211502770 ms. Memory: 2721792K Free: 1467163K (54%)
Setting containers of atomic entities to null
1525211506865 ms. Memory: 2373120K Free: 1149584K (48%)
 Force everything to get expanded ptolemy/configs/hyvisual/configuration.xml
    (Skipping certain optional packages, jxta and viptos)
-------> Before clone
-------> after clone
-------> Before clone
-------> after clone
1525211510311 ms. Memory: 2746368K Free: 810333K (30%)
Setting containers of atomic entities to null
1525211513565 ms. Memory: 2729984K Free: 1486954K (54%)
 Force everything to get expanded ptolemy/configs/ptinyKepler/configuration.xml
    (Skipping certain optional packages, jxta and viptos)
-------> Before clone
-------> after clone

Warning: In 'ptolemy.actor.lib.io.FileReader'
  The getName() method returns
   'fileOrURL' but the  field is named
   'fileOrURLPort'
   This is technically a violation  of the coding standard,
   but permissible because the name  ends in 'Port'
-------> Before clone
-------> after clone
1525211520147 ms. Memory: 2738688K Free: 718860K (26%)
Setting containers of atomic entities to null
1525211523813 ms. Memory: 2540032K Free: 1253773K (49%)
allConfigs.tcl done!
/home/travis/build/icyphy/ptII/ptolemy/configs/test/allDemos.tcl
Skipping allDemos-1.0, use cd /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../..; ant test.single -Dtest.name=ptolemy.vergil.basic.export.test.junit.ExportModelJUnitTest
/home/travis/build/icyphy/ptII/ptolemy/configs/test/checkCapeCodeConstraints.tcl
 Force everything to get expanded ptolemy/configs/configurationFile
    (Skipping certain optional packages, jxta and viptos)
/home/travis/build/icyphy/ptII/ptolemy/configs/test/checkFullConstraints.tcl
FIXME FIXME FIXME FIXME FIXME FIXME
ptolemy/configs/test/checkFullConstraints.tcl: FIXME: Invoking Configuration.check() 
results in a memory leak that consumes
more than 4gig of memory and causes problems under Travis.
so, we check the constraints only of the full configuration.
FIXME FIXME FIXME FIXME FIXME FIXME
 Force everything to get expanded ptolemy/configs/configurationFile
    (Skipping certain optional packages, jxta and viptos)
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/audio/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/cameras/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/devices/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/image/index.json
CharacterRecognition: The tesseract module was not present.  The CharacterRecognition accessor is not supported on this accessor host. (Thread[main,5,main])
CharacterRecognition: The tesseract module was not present.  The CharacterRecognition accessor is not supported on this accessor host. (Thread[main,5,main])
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/net/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/robotics/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/geodesy/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/services/index.json
Heartbeat: Heartbeat: Could not get $KEYSTORE/heartbeatKey:  ptolemy.kernel.util.IllegalActionException: Failed to read URI: /home/travis/.ptKeystore/heartbeatKey
  in .actor library.MoreLibraries.Accessors.services.Heartbeat
Because:
Cannot read file '/home/travis/.ptKeystore/heartbeatKey' or '/home/travis/.ptKeystore/heartbeatKey'
The key is not public, so this accessor is only useful If you have the key.  See https://www.icyphy.org/accessors/library/index.html?accessor=services.Heartbeat (Thread[main,5,main])
Heartbeat: Heartbeat: Could not get $KEYSTORE/heartbeatKey:  ptolemy.kernel.util.IllegalActionException: Failed to read URI: /home/travis/.ptKeystore/heartbeatKey
  in .actor library.MoreLibraries.Accessors.services.Heartbeat
Because:
Cannot read file '/home/travis/.ptKeystore/heartbeatKey' or '/home/travis/.ptKeystore/heartbeatKey'
The key is not public, so this accessor is only useful If you have the key.  See https://www.icyphy.org/accessors/library/index.html?accessor=services.Heartbeat (Thread[main,5,main])
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/signals/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/test/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/utilities/index.json
The Mutable accessor original file has no documentation, so we are not running jsdoc on https://accessors.org/utilities/Mutable.js
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/audio/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/cameras/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/devices/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/image/index.json
CharacterRecognition: The tesseract module was not present.  The CharacterRecognition accessor is not supported on this accessor host. (Thread[main,5,main])
CharacterRecognition: The tesseract module was not present.  The CharacterRecognition accessor is not supported on this accessor host. (Thread[main,5,main])
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/net/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/robotics/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/geodesy/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/services/index.json
Heartbeat: Heartbeat: Could not get $KEYSTORE/heartbeatKey:  ptolemy.kernel.util.IllegalActionException: Failed to read URI: /home/travis/.ptKeystore/heartbeatKey
  in .MoreLibraries.Accessors.services.Heartbeat
Because:
Cannot read file '/home/travis/.ptKeystore/heartbeatKey' or '/home/travis/.ptKeystore/heartbeatKey'
The key is not public, so this accessor is only useful If you have the key.  See https://www.icyphy.org/accessors/library/index.html?accessor=services.Heartbeat (Thread[main,5,main])
Heartbeat: Heartbeat: Could not get $KEYSTORE/heartbeatKey:  ptolemy.kernel.util.IllegalActionException: Failed to read URI: /home/travis/.ptKeystore/heartbeatKey
  in .MoreLibraries.Accessors.services.Heartbeat
Because:
Cannot read file '/home/travis/.ptKeystore/heartbeatKey' or '/home/travis/.ptKeystore/heartbeatKey'
The key is not public, so this accessor is only useful If you have the key.  See https://www.icyphy.org/accessors/library/index.html?accessor=services.Heartbeat (Thread[main,5,main])
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/signals/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/test/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/utilities/index.json
The Mutable accessor original file has no documentation, so we are not running jsdoc on https://accessors.org/utilities/Mutable.js
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/audio/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/cameras/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/devices/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/image/index.json
CharacterRecognition: The tesseract module was not present.  The CharacterRecognition accessor is not supported on this accessor host. (Thread[main,5,main])
CharacterRecognition: The tesseract module was not present.  The CharacterRecognition accessor is not supported on this accessor host. (Thread[main,5,main])
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/net/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/robotics/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/geodesy/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/services/index.json
Heartbeat: Heartbeat: Could not get $KEYSTORE/heartbeatKey:  ptolemy.kernel.util.IllegalActionException: Failed to read URI: /home/travis/.ptKeystore/heartbeatKey
  in .configuration.actor library.MoreLibraries.Accessors.services.Heartbeat
Because:
Cannot read file '/home/travis/.ptKeystore/heartbeatKey' or '/home/travis/.ptKeystore/heartbeatKey'
The key is not public, so this accessor is only useful If you have the key.  See https://www.icyphy.org/accessors/library/index.html?accessor=services.Heartbeat (Thread[main,5,main])
Heartbeat: Heartbeat: Could not get $KEYSTORE/heartbeatKey:  ptolemy.kernel.util.IllegalActionException: Failed to read URI: /home/travis/.ptKeystore/heartbeatKey
  in .configuration.actor library.MoreLibraries.Accessors.services.Heartbeat
Because:
Cannot read file '/home/travis/.ptKeystore/heartbeatKey' or '/home/travis/.ptKeystore/heartbeatKey'
The key is not public, so this accessor is only useful If you have the key.  See https://www.icyphy.org/accessors/library/index.html?accessor=services.Heartbeat (Thread[main,5,main])
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/signals/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/test/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/utilities/index.json
The Mutable accessor original file has no documentation, so we are not running jsdoc on https://accessors.org/utilities/Mutable.js
####################################################################################################################################################################################################################################################################################################################################################Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/index.json
Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/audio/index.json
###Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/cameras/index.json
##Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/devices/index.json
#######Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/image/index.json
CharacterRecognition: The tesseract module was not present.  The CharacterRecognition accessor is not supported on this accessor host. (Thread[main,5,main])
CharacterRecognition: The tesseract module was not present.  The CharacterRecognition accessor is not supported on this accessor host. (Thread[main,5,main])
########Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/net/index.json
#####################Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/robotics/index.json
######Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/geodesy/index.json
###Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/services/index.json
Heartbeat: Heartbeat: Could not get $KEYSTORE/heartbeatKey:  ptolemy.kernel.util.IllegalActionException: Failed to read URI: /home/travis/.ptKeystore/heartbeatKey
  in .configuration.actor library.MoreLibraries.Accessors.services.Heartbeat
Because:
Cannot read file '/home/travis/.ptKeystore/heartbeatKey' or '/home/travis/.ptKeystore/heartbeatKey'
The key is not public, so this accessor is only useful If you have the key.  See https://www.icyphy.org/accessors/library/index.html?accessor=services.Heartbeat (Thread[main,5,main])
Heartbeat: Heartbeat: Could not get $KEYSTORE/heartbeatKey:  ptolemy.kernel.util.IllegalActionException: Failed to read URI: /home/travis/.ptKeystore/heartbeatKey
  in .configuration.actor library.MoreLibraries.Accessors.services.Heartbeat
Because:
Cannot read file '/home/travis/.ptKeystore/heartbeatKey' or '/home/travis/.ptKeystore/heartbeatKey'
The key is not public, so this accessor is only useful If you have the key.  See https://www.icyphy.org/accessors/library/index.html?accessor=services.Heartbeat (Thread[main,5,main])
##########Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/signals/index.json
#Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/test/index.json
################Retrieving library from file:/home/travis/build/icyphy/ptII/org/terraswarm/accessor/accessors/web/utilities/index.json
The Mutable accessor original file has no documentation, so we are not running jsdoc on https://accessors.org/utilities/Mutable.js
#########################################################################################################################################################################################################################################################################################################################################---- Second call to Configuration.check
#################################################################################################################################################################################################################################################################################################################################################################CharacterRecognition: The tesseract module was not present.  The CharacterRecognition accessor is not supported on this accessor host. (Thread[main,5,main])
########################################Heartbeat: Heartbeat: Could not get $KEYSTORE/heartbeatKey:  ptolemy.kernel.util.IllegalActionException: Failed to read URI: /home/travis/.ptKeystore/heartbeatKey
  in .configuration.actor library.MoreLibraries.Accessors.services.Heartbeat
Because:
Cannot read file '/home/travis/.ptKeystore/heartbeatKey' or '/home/travis/.ptKeystore/heartbeatKey'
The key is not public, so this accessor is only useful If you have the key.  See https://www.icyphy.org/accessors/library/index.html?accessor=services.Heartbeat (Thread[main,5,main])
#################################################################################################################################################################################################################################################################################################################################################################

==== $PTII/ptolemy/configs/test/checkFullConstraints.tcl: configurationFile-3.1 Test to see if configurationFile contains any actors whose type constraints don't clone
==== Contents of test case:

            set results [[java::cast ptolemy.actor.gui.Configuration $configuration] check]
            # FIXME: Need to call this twice to find problems with RecordAssembler.
            puts "---- Second call to Configuration.check"
            set results2 [[java::cast ptolemy.actor.gui.Configuration $configuration] check]
            # Don't call return as the last line of a test proc, since return
            # throws an exception.
            list $results $results2
    
==== Result was:
{} {}
++++ configurationFile-3.1 PASSED
1525211814410 ms. Memory: 4469248K Free: 1166394K (26%)
Setting containers of atomic entities to null
checkFullConstraints.tcl done!
/home/travis/build/icyphy/ptII/ptolemy/configs/test/cloneTest.tcl
Simple standalone clone test
/home/travis/build/icyphy/ptII/ptolemy/configs/test/configTest.tcl
Checking file:/home/travis/build/icyphy/ptII/ptolemy/configs/ptdb/configuration.xml
Expanding the configuration
Done expanding

<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="configuration" class="ptolemy.actor.gui.Configuration">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_classesToRemove" class="ptolemy.data.expr.Parameter" value="{&quot;ptolemy.codegen.kernel.StaticSchedulingCodeGenerator&quot;,&quot;ptolemy.codegen.c.kernel.CCodeGenerator&quot;}">
        <doc>An array of Strings, where each element names a class&#10;      to removed by the MoMLFilter.</doc>
    </property>
    <doc>Configuration for ptdb.</doc>
    <property name="_actorInteractionAddon" class="ptolemy.data.expr.StringParameter" value="ptdb.gui.DBReferenceActorInteractionAddon">
    </property>
    <property name="_about" class="ptolemy.data.expr.FileParameter" value="$CLASSPATH/ptolemy/configs/ptiny/intro.htm">
    </property>
    <property name="_help" class="ptolemy.data.expr.FileParameter" value="$CLASSPATH/ptolemy/configs/doc/docsPtiny.htm">
    </property>
    <property name="tableauFactory" class="ptolemy.actor.gui.TableauFactory">
        <property name="factoryModal" class="ptolemy.actor.gui.PtolemyTableauFactory">
            <property name="FSM Editor" class="ptolemy.vergil.modal.FSMGraphTableau$Factory">
                <property name="_library" class="ptolemy.moml.LibraryAttribute">
                    <configure>
    <entity name="StateLibrary" class="ptolemy.kernel.CompositeEntity"><input source="ptolemy/configs/basicUtilities.xml"></input><entity name="State" class="ptolemy.domains.modal.kernel.State"><property name="_centerName" class="ptolemy.kernel.util.Attribute"></property></entity></entity>
  </configure>
                </property>
            </property>
            <property name="Run Window" class="ptolemy.actor.gui.RunTableau$TopFactory">
            </property>
            <property name="Tree View" class="ptolemy.vergil.tree.TreeTableau$Factory">
            </property>
            <property name="XML view" class="ptolemy.actor.gui.TextEditorTableau$Factory">
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/xml">
                </property>
            </property>
        </property>
        <property name="factory2" class="ptolemy.actor.gui.PtolemyTableauFactory">
            <property name="Graph Editor" class="ptdb.gui.ActorGraphDBTableau$Factory">
                <property name="gtlibrary" class="ptolemy.moml.LibraryAttribute">
                    <configure>
		        <entity name="gtLibrary" class="ptolemy.kernel.CompositeEntity"><input source="ptolemy/configs/ptdb/searchFrameLibrary.xml"></input></entity>
		      </configure>
                </property>
            </property>
            <property name="Run Window" class="ptolemy.actor.gui.RunTableau$Factory">
            </property>
            <property name="JVM Properties" class="ptolemy.actor.gui.JVMTableau$Factory">
            </property>
        </property>
        <property name="Doc Viewer" class="ptolemy.vergil.actor.DocTableau$Factory">
            <property name="DocML view" class="ptolemy.actor.gui.TextEditorTableau$Factory">
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/xml">
                </property>
            </property>
        </property>
        <property name="Image viewer" class="ptolemy.actor.lib.image.ImageTableau$Factory">
        </property>
        <property name="HTML Viewer" class="ptolemy.actor.gui.HTMLViewerTableau$Factory">
            <property name="Source" class="ptolemy.actor.gui.TextEditorTableau$Factory">
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/html">
                </property>
            </property>
        </property>
        <property name="Web Browser" class="ptolemy.actor.gui.BrowserTableau$Factory">
        </property>
        <property name="Plotter" class="ptolemy.actor.gui.PlotTableau$Factory">
            <property name="PlotML view" class="ptolemy.actor.gui.TextEditorTableau$Factory">
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/xml">
                </property>
            </property>
        </property>
        <property name="Matrix viewer" class="ptolemy.actor.gui.MatrixTokenTableau$Factory">
        </property>
        <property name="Token viewer" class="ptolemy.actor.gui.TokenTableau$Factory">
        </property>
        <property name="Expression Evaluator" class="ptolemy.actor.gui.ExpressionShellTableau$Factory">
        </property>
        <property name="Text Editor" class="ptolemy.actor.gui.TextEditorTableau$Factory">
        </property>
    </property>
    <entity name="directory" class="ptolemy.actor.gui.ModelDirectory">
    </entity>
    <entity name="_stateRefinements" class="ptolemy.kernel.CompositeEntity">
        <entity name="Default Refinement" class="ptolemy.domains.modal.modal.Refinement">
            <property name="SDF Director" class="ptolemy.domains.sdf.kernel.SDFDirector">
                <property name="iterations" class="ptolemy.data.expr.Parameter" value="0">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="65.0, 35.0">
                </property>
            </property>
        </entity>
        <entity name="State Machine Refinement" class="ptolemy.domains.modal.modal.ModalRefinement">
            <property name="_tableauFactory" class="ptolemy.vergil.modal.modal.ModalTableauFactory">
            </property>
            <entity name="_Controller" class="ptolemy.domains.modal.modal.ModalController">
                <property name="_library" class="ptolemy.moml.LibraryAttribute">
                    <configure>
            <entity name="state library" class="ptolemy.kernel.CompositeEntity">
              <input source="ptolemy/configs/basicUtilities.xml"></input>
              <entity name="state" class="ptolemy.domains.modal.kernel.State">
                <property name="_controllerFactory" class="ptolemy.vergil.modal.modal.HierarchicalStateControllerFactory"></property>
              </entity>
            </entity>
          </configure>
                </property>
            </entity>
        </entity>
    </entity>
    <entity name="_transitionRefinements" class="ptolemy.kernel.CompositeEntity">
        <entity name="Default Refinement" class="ptolemy.domains.modal.modal.Refinement">
            <property name="SDF Director" class="ptolemy.domains.sdf.kernel.SDFDirector">
                <property name="iterations" class="ptolemy.data.expr.Parameter" value="0">
                </property>
                <property name="_location" class="ptolemy.kernel.util.Location" value="65.0, 35.0">
                </property>
            </property>
        </entity>
    </entity>
    <entity name="effigyFactory" class="ptolemy.actor.gui.EffigyFactory">
        <entity name="Graph Editor" class="ptolemy.actor.gui.PtolemyEffigy$Factory">
            <entity name="blank" class="ptolemy.actor.TypedCompositeActor">
            </entity>
        </entity>
        <entity name="Icon Editor" class="ptolemy.actor.gui.PtolemyEffigy$Factory">
            <property name="blank" class="ptolemy.vergil.icon.EditorIcon">
            </property>
        </entity>
        <entity name="FSM Editor" class="ptolemy.actor.gui.PtolemyEffigy$Factory">
            <entity name="blank" class="ptolemy.domains.modal.kernel.FSMActor">
                <property name="_library" class="ptolemy.moml.LibraryAttribute">
                    <configure>
    <entity name="StateLibrary" class="ptolemy.kernel.CompositeEntity"><input source="ptolemy/configs/basicUtilities.xml"></input><entity name="State" class="ptolemy.domains.modal.kernel.State"><property name="_centerName" class="ptolemy.kernel.util.Attribute"></property></entity></entity>
  </configure>
                </property>
                <property name="annotation" class="ptolemy.kernel.util.Attribute">
                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                    </property>
                    <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                        <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Create a state machine here.  Create transitions by holding 
by holding the (Mac: command key, Windows: control key)
and dragging from  one state to another.
Right click to configure the properties
of this model, including setting the final state(s).
Then delete this annotation.</text>
    </svg></configure>
                    </property>
                    <property name="_location" class="ptolemy.kernel.util.Location" value="120.0, 5.0">
                    </property>
                    <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
                    </property>
                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
                    </property>
                </property>
            </entity>
        </entity>
        <entity name="Modal Model" class="ptolemy.actor.gui.PtolemyEffigy$Factory">
            <entity name="blank" class="ptolemy.domains.modal.modal.ModalModel">
                <property name="_tableauFactory" class="ptolemy.vergil.modal.modal.ModalTableauFactory">
                </property>
                <entity name="_Controller" class="ptolemy.domains.modal.modal.ModalController">
                    <property name="annotation" class="ptolemy.kernel.util.Attribute">
                        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                        </property>
                        <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                            <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Create a state machine here (and ports, if needed) and
create refinements for the states.  Create transitions
by holding the (Mac: command key, Windows: control key)
and dragging from one state to another.  
Right click to configure the properties 
of this model, including setting the final state(s).
Then delete this annotation.</text>
    </svg></configure>
                        </property>
                        <property name="_location" class="ptolemy.kernel.util.Location" value="120.0, 5.0">
                        </property>
                        <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
                        </property>
                        <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
                        </property>
                    </property>
                    <property name="_library" class="ptolemy.moml.LibraryAttribute">
                        <configure>
      <entity name="state library" class="ptolemy.kernel.CompositeEntity"><input source="ptolemy/configs/basicUtilities.xml"></input><entity name="state" class="ptolemy.domains.modal.kernel.State"><property name="_centerName" class="ptolemy.kernel.util.Attribute"></property><property name="_controllerFactory" class="ptolemy.vergil.modal.modal.HierarchicalStateControllerFactory"></property></entity></entity>
    </configure>
                    </property>
                </entity>
            </entity>
        </entity>
        <entity name="Image viewer" class="ptolemy.actor.gui.ImageTokenEffigy$Factory">
        </entity>
        <entity name="HTML Viewer" class="ptolemy.actor.gui.HTMLEffigyFactory">
        </entity>
        <entity name="Web Browser" class="ptolemy.actor.gui.BrowserEffigy$Factory">
        </entity>
        <entity name="DocViewer" class="ptolemy.vergil.actor.DocEffigy$Factory">
        </entity>
        <entity name="Plotter" class="ptolemy.actor.gui.PlotEffigy$Factory">
        </entity>
        <entity name="Token viewer" class="ptolemy.actor.gui.TokenEffigy$Factory">
        </entity>
        <entity name="Text Editor" class="ptolemy.actor.gui.TextEffigy$Factory">
        </entity>
        <entity name="Expression Evaluator" class="ptolemy.actor.gui.ExpressionShellEffigy$ShellFactory">
        </entity>
    </entity>
    <entity name="actor library" class="ptolemy.kernel.CompositeEntity">
        <property name="_libraryMarker" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <entity name="Utilities" class="ptolemy.moml.EntityLibrary">
            <configure>
                <group>
                    <property name="DocViewerAttribute" class="ptolemy.kernel.util.SingletonAttribute">
                        <property name="DocAttribute" class="ptolemy.vergil.basic.DocAttribute">
                            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="To edit the documentation that appears&#10;when the user double clicks on this icon,&#10;right click on the _background_ of the model and select&#10;Documentation-&gt;Customize Documentation.&#10;The description you are currently editing&#10;will not appear when the user double clicks on the Documentation icon.">
                            </property>
                        </property>
                        <property name="viewer" class="ptolemy.vergil.basic.DocViewerFactory">
                        </property>
                        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                        </property>
                        <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                            <configure>
      <svg>
        <rect x="-50" y="-20" width="100" height="20" style="fill:yellow"></rect>
        <text x="-40" y="-5" style="font-size:12; font-family:SansSerif; fill:black">Documentation</text>
      </svg>
    </configure>
                        </property>
                    </property>
                    <property name="LocalPreferences" class="ptolemy.actor.gui.PtolemyPreferences">
                    </property>
                    <property name="RepaintController" class="ptolemy.actor.gui.ModelRepaintController">
                    </property>
                    <class name="CompositeClassDefinition" extends="ptolemy.actor.TypedCompositeActor">
                    </class>
                    <entity name="CompositeActor" class="ptolemy.actor.TypedCompositeActor">
                    </entity>
                    <entity name="ModalModel" class="ptolemy.domains.modal.modal.ModalModel">
                        <property name="_tableauFactory" class="ptolemy.vergil.modal.modal.ModalTableauFactory">
                        </property>
                        <entity name="_Controller" class="ptolemy.domains.modal.modal.ModalController">
                            <property name="annotation" class="ptolemy.kernel.util.Attribute">
                                <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                </property>
                                <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                    <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Create a state machine here (and ports, if needed) and
create refinements for the states.  Create transitions
by holding the (Mac: command key, Windows: control key)
and dragging from one state to another.  
Right click to configure the properties 
of this model, including setting the final state(s).
Then delete this annotation.</text>
    </svg></configure>
                                </property>
                                <property name="_location" class="ptolemy.kernel.util.Location" value="120.0, 5.0">
                                </property>
                                <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
                                </property>
                                <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
                                </property>
                            </property>
                            <property name="_library" class="ptolemy.moml.LibraryAttribute">
                                <configure>
      <entity name="state library" class="ptolemy.kernel.CompositeEntity"><input source="ptolemy/configs/basicUtilities.xml"></input><entity name="state" class="ptolemy.domains.modal.kernel.State"><property name="_centerName" class="ptolemy.kernel.util.Attribute"></property><property name="_controllerFactory" class="ptolemy.vergil.modal.modal.HierarchicalStateControllerFactory"></property></entity></entity>
    </configure>
                            </property>
                        </entity>
                    </entity>
                    <entity name="Decorative" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Decortative attributes</doc>
                                <property name="ModelID" class="ptolemy.vergil.kernel.attributes.IDAttribute">
                                    <property name="created" class="ptolemy.kernel.util.StringAttribute" value="May 1, 2018 9:56:54 PM">
                                    </property>
                                    <property name="lastUpdated" class="ptolemy.kernel.util.StringAttribute" value="May 1, 2018 9:56:54 PM">
                                    </property>
                                    <property name="author" class="ptolemy.kernel.util.StringAttribute" value="travis">
                                    </property>
                                </property>
                                <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                                    <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 1.0}">
                                    </property>
                                </property>
                                <property name="Line" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                </property>
                                <property name="Arrow" class="ptolemy.vergil.kernel.attributes.ArrowAttribute">
                                </property>
                                <property name="Rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                                    <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                    </property>
                                </property>
                                <property name="Polygon" class="ptolemy.vergil.kernel.attributes.ResizablePolygonAttribute">
                                    <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                    </property>
                                </property>
                                <property name="Ellipse" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
                                </property>
                                <property name="Arc" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                </property>
                                <property name="Image" class="ptolemy.vergil.kernel.attributes.ImageAttribute">
                                </property>
                                <property name="_shadowColor" class="ptolemy.actor.gui.ColorAttribute">
                                    <display name="ShadowColor"/>
                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                        <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.0, 1.0, 1.0}">
                                        </property>
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <rect x="0" y="0" width="10" height="10" style="fill:#111111"></rect>
        <rect x="-4" y="-4" width="10" height="10" style="fill:#FFFFFF"></rect>
      </svg>
    </configure>
                                    </property>
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                    </property>
                                </property>
                                <property name="NameIcon" class="ptolemy.vergil.icon.NameIcon">
                                </property>
                                <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                </property>
                            </group>
                        </configure>
                    </entity>
                    <entity name="Parameters" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Parameters</doc>
                                <property name="Parameter" class="ptolemy.data.expr.Parameter">
                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                        <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                                        </property>
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
                                    </property>
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                    </property>
                                </property>
                                <property name="StringParameter" class="ptolemy.data.expr.StringParameter" value="">
                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                        <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.0, 0.0, 1.0}">
                                        </property>
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:red" y="20">-S-</text>
      </svg>
    </configure>
                                    </property>
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                    </property>
                                </property>
                                <property name="ChoiceStringParameter" class="ptolemy.data.expr.ChoiceStringParameter" value="">
                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                        <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.0, 0.0, 1.0}">
                                        </property>
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:red" y="20">-S-</text>
      </svg>
    </configure>
                                    </property>
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                    </property>
                                </property>
                                <property name="FileParameter" class="ptolemy.data.expr.FileParameter" value="">
                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                        <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 1.0, 0.0, 1.0}">
                                        </property>
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:#00BB00" y="20">-F-</text>
      </svg>
    </configure>
                                    </property>
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                    </property>
                                </property>
                                <property name="ColorAttribute" class="ptolemy.actor.gui.ColorAttribute">
                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                        <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.0, 1.0, 1.0}">
                                        </property>
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:#BB00BB" y="20">-C-</text>
      </svg>
    </configure>
                                    </property>
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                    </property>
                                </property>
                                <property name="IntRangeParameter" class="ptolemy.actor.parameters.IntRangeParameter" value="50">
                                </property>
                                <property name="SharedParameter" class="ptolemy.actor.parameters.SharedParameter">
                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                        <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.0, 0.0, 1.0}">
                                        </property>
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <text x="22" style="font-size:14; font-family:SansSerif; fill:grey" y="22">-S-</text>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:red" y="20">-S-</text>
      </svg>
    </configure>
                                    </property>
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                    </property>
                                </property>
                                <property name="PortParameter" class="ptolemy.actor.parameters.PortParameter">
                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                    </property>
                                    <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
	<polyline points="-15,-15, -3,-5, -16,5" style="stroke:black"></polyline>
	<polygon points="-22,-1, -22,4, -10,-5, -22,-14, -22,-9, -30,-9, -30, -1" style="fill:lightGray"></polygon>
      </svg>
    </configure>
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:black" y="20">-P-</text>
      </svg>
    </configure>
                                    </property>
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                    </property>
                                </property>
                                <property name="FilePortParameter" class="ptolemy.actor.parameters.FilePortParameter" value="">
                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                    </property>
                                    <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
	<polyline points="-15,-15, -3,-5, -16,5" style="stroke:black"></polyline>
	<polygon points="-22,-1, -22,4, -10,-5, -22,-14, -22,-9, -30,-9, -30, -1" style="fill:green"></polygon>
      </svg>
    </configure>
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:#00BB00" y="20">-P-</text>
      </svg>
    </configure>
                                    </property>
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                    </property>
                                </property>
                                <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="http://ptolemy.org#in_browser">
                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                        <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                                        </property>
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
                                    </property>
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                    </property>
                                </property>
                                <property name="NameParameter" class="ptolemy.data.expr.NameParameter" value="">
                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                        <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.9,0.5,0.1,1.0}">
                                        </property>
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:#FF6600" y="20">-N-</text>
      </svg>
    </configure>
                                    </property>
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                    </property>
                                </property>
                                <property name="RequireVersion" class="ptolemy.kernel.attributes.RequireVersion" value="11.0.devel">
                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-V-</text>
      </svg>
    </configure>
                                    </property>
                                </property>
                                <property name="ScopeExtendingAttribute" class="ptolemy.data.expr.ScopeExtendingAttribute">
                                    <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
           <rect x="-30" y="-15" width="60" height="30" style="fill:grey"></rect>
      </svg>
    </configure>
                                    </property>
                                </property>
                                <property name="ParameterSet" class="ptolemy.actor.parameters.ParameterSet">
                                    <property name="_editorFactory" class="ptolemy.actor.gui.FileOrURLEditorFactory">
                                    </property>
                                    <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <rect x="-30" y="-15" width="60" height="30" style="fill:#C0C0C0"></rect>
        <text x="-30" style="font-size:30; font-family:SansSerif; fill:#00BB00" y="10">-PS-</text>
      </svg>
    </configure>
                                    </property>
                                </property>
                                <property name="Priority" class="ptolemy.actor.parameters.Priority" value="0">
                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                        <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                                        </property>
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
            <svg>
                <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-p-</text>
            </svg>
        </configure>
                                    </property>
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                    </property>
                                </property>
                                <port name="PortParameter" class="ptolemy.actor.parameters.ParameterPort">
                                    <property name="input"/>
                                    <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                                    </property>
                                </port>
                                <port name="FilePortParameter" class="ptolemy.actor.parameters.ParameterPort">
                                    <property name="input"/>
                                    <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                                    </property>
                                </port>
                            </group>
                        </configure>
                    </entity>
                    <entity name="Ports" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Parameters</doc>
                                <property name="PortParameter" class="ptolemy.actor.parameters.PortParameter">
                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                    </property>
                                    <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
	<polyline points="-15,-15, -3,-5, -16,5" style="stroke:black"></polyline>
	<polygon points="-22,-1, -22,4, -10,-5, -22,-14, -22,-9, -30,-9, -30, -1" style="fill:lightGray"></polygon>
      </svg>
    </configure>
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:black" y="20">-P-</text>
      </svg>
    </configure>
                                    </property>
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                    </property>
                                </property>
                                <property name="FilePortParameter" class="ptolemy.actor.parameters.FilePortParameter" value="">
                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                    </property>
                                    <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
	<polyline points="-15,-15, -3,-5, -16,5" style="stroke:black"></polyline>
	<polygon points="-22,-1, -22,4, -10,-5, -22,-14, -22,-9, -30,-9, -30, -1" style="fill:green"></polygon>
      </svg>
    </configure>
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:#00BB00" y="20">-P-</text>
      </svg>
    </configure>
                                    </property>
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                    </property>
                                </property>
                                <port name="PortParameter" class="ptolemy.actor.parameters.ParameterPort">
                                    <property name="input"/>
                                    <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                                    </property>
                                </port>
                                <port name="FilePortParameter" class="ptolemy.actor.parameters.ParameterPort">
                                    <property name="input"/>
                                    <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                                    </property>
                                </port>
                                <port name="PublisherPort" class="ptolemy.actor.PublisherPort">
                                    <property name="output"/>
                                </port>
                                <port name="ConstantPublisherPort" class="ptolemy.actor.ConstantPublisherPort">
                                    <property name="output"/>
                                </port>
                                <port name="SubscriberPort" class="ptolemy.actor.SubscriberPort">
                                    <property name="input"/>
                                </port>
                                <port name="SubscriptionAggregatorPort" class="ptolemy.actor.SubscriptionAggregatorPort">
                                    <property name="input"/>
                                    <property name="multiport"/>
                                </port>
                            </group>
                        </configure>
                    </entity>
                    <entity name="Analysis" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Attributes for Analysis</doc>
                                <property name="ConstraintMonitor" class="ptolemy.data.expr.ConstraintMonitor" value="0.0">
                                    <property name="_icon" class="ptolemy.vergil.icon.ConstraintMonitorIcon">
                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="30">
                                        </property>
                                    </property>
                                </property>
                                <property name="DependencyHighlighter" class="ptolemy.vergil.basic.DependencyHighlighter">
                                </property>
                                <property name="MonitorReceiverContents" class="ptolemy.vergil.actor.lib.MonitorReceiverContents">
                                </property>
                                <property name="ShowTypes" class="ptolemy.vergil.actor.lib.ShowTypes">
                                </property>
                                <entity name="Assert" class="ptolemy.actor.lib.Assert">
                                    <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                                        </property>
                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                                        </property>
                                        <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                                        </property>
                                    </property>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="JavaScript" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
                                    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                    </property>
                                    <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
                                    </property>
                                    <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Put your JavaScript program here.&#10;// Refer to parameters in scope using dollar-sign{parameterName}.&#10;// See: https://wiki.eecs.berkeley.edu/accessors/Version1/AccessorSpecification&#10;">
                                        <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                                            <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                                            </property>
                                        </property>
                                    </property>
                                    <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                                        </property>
                                        <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                                        </property>
                                    </property>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="UnitSystems" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <property name="BasicUnits" class="ptolemy.data.unit.UnitSystem">
                                    <property name="meters" class="ptolemy.data.unit.BaseUnit" value="1.0">
                                        <property name="Length" class="ptolemy.data.unit.UnitCategory">
                                        </property>
                                    </property>
                                    <property name="meter" class="ptolemy.data.expr.Parameter" value="meters">
                                    </property>
                                    <property name="m" class="ptolemy.data.expr.Parameter" value="meters">
                                    </property>
                                    <property name="cm" class="ptolemy.data.expr.Parameter" value="0.01*meters">
                                    </property>
                                    <property name="centimeters" class="ptolemy.data.expr.Parameter" value="cm">
                                    </property>
                                    <property name="centimeter" class="ptolemy.data.expr.Parameter" value="cm">
                                    </property>
                                    <property name="mm" class="ptolemy.data.expr.Parameter" value="0.001*meters">
                                    </property>
                                    <property name="millimeter" class="ptolemy.data.expr.Parameter" value="mm">
                                    </property>
                                    <property name="millimeters" class="ptolemy.data.expr.Parameter" value="mm">
                                    </property>
                                    <property name="in" class="ptolemy.data.expr.Parameter" value="2.54*cm">
                                    </property>
                                    <property name="inch" class="ptolemy.data.expr.Parameter" value="in">
                                    </property>
                                    <property name="inches" class="ptolemy.data.expr.Parameter" value="in">
                                    </property>
                                    <property name="seconds" class="ptolemy.data.unit.BaseUnit" value="1.0">
                                        <property name="Time" class="ptolemy.data.unit.UnitCategory">
                                        </property>
                                    </property>
                                    <property name="sec" class="ptolemy.data.expr.Parameter" value="seconds">
                                    </property>
                                    <property name="second" class="ptolemy.data.expr.Parameter" value="seconds">
                                    </property>
                                    <property name="ms" class="ptolemy.data.expr.Parameter" value="0.001*seconds">
                                    </property>
                                    <property name="millisecond" class="ptolemy.data.expr.Parameter" value="ms">
                                    </property>
                                    <property name="milliseconds" class="ptolemy.data.expr.Parameter" value="ms">
                                    </property>
                                    <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <rect x="-30" y="-15" width="60" height="30" style="fill:grey"></rect>
      </svg>
    </configure>
                                    </property>
                                </property>
                                <property name="CGSUnitBase" class="ptolemy.data.unit.UnitSystem">
                                    <property name="cm" class="ptolemy.data.unit.BaseUnit" value="1.0">
                                        <property name="Length" class="ptolemy.data.unit.UnitCategory">
                                        </property>
                                    </property>
                                    <property name="gram" class="ptolemy.data.unit.BaseUnit" value="1.0">
                                        <property name="Mass" class="ptolemy.data.unit.UnitCategory">
                                        </property>
                                    </property>
                                    <property name="second" class="ptolemy.data.unit.BaseUnit" value="1.0">
                                        <property name="Time" class="ptolemy.data.unit.UnitCategory">
                                        </property>
                                    </property>
                                    <property name="meter" class="ptolemy.data.expr.Parameter" value="100*cm">
                                    </property>
                                    <property name="kilogram" class="ptolemy.data.expr.Parameter" value="1000*gram">
                                    </property>
                                    <property name="ampere" class="ptolemy.data.unit.BaseUnit" value="1.0">
                                        <property name="electricCurrent" class="ptolemy.data.unit.UnitCategory">
                                        </property>
                                    </property>
                                    <property name="squareAmpere" class="ptolemy.data.expr.Parameter" value="0.01*(lightSpeed^2)*cm*gram/(second^2)">
                                    </property>
                                    <property name="kelvin" class="ptolemy.data.expr.Parameter" value="1.38065E-23*kilogram*(meter^2)/(second^2)">
                                    </property>
                                    <property name="mole" class="ptolemy.data.expr.Parameter" value="6.022142E+23">
                                    </property>
                                    <property name="candela" class="ptolemy.data.expr.Parameter" value="kilogram*(meter^2)/(second^3)/683">
                                    </property>
                                    <property name="volt" class="ptolemy.data.expr.Parameter" value="kilogram*(meter^2)/(second^3)/ampere">
                                    </property>
                                    <property name="ohm" class="ptolemy.data.expr.Parameter" value="volt/ampere">
                                    </property>
                                    <property name="mho" class="ptolemy.data.expr.Parameter" value="ampere/volt">
                                    </property>
                                    <property name="coulomb" class="ptolemy.data.expr.Parameter" value="ampere*second">
                                    </property>
                                    <property name="esu" class="ptolemy.data.expr.Parameter" value="coulomb/(299792458.0*10)">
                                    </property>
                                    <property name="statvolt" class="ptolemy.data.expr.Parameter" value="299.792458*volt">
                                    </property>
                                    <property name="gauss" class="ptolemy.data.expr.Parameter" value="statvolt/(meter/100)">
                                    </property>
                                    <property name="electronCharge" class="ptolemy.data.expr.Parameter" value="1.6021765E-19*coulomb">
                                    </property>
                                    <property name="farad" class="ptolemy.data.expr.Parameter" value="ampere*second/volt">
                                    </property>
                                    <property name="henry" class="ptolemy.data.expr.Parameter" value="volt*second/ampere">
                                    </property>
                                    <property name="planckConstant" class="ptolemy.data.expr.Parameter" value="hBar*2*pi">
                                    </property>
                                    <property name="planckConstantReduced" class="ptolemy.data.expr.Parameter" value="1.0545716E-34*joule*second">
                                    </property>
                                    <property name="hBar" class="ptolemy.data.expr.Parameter" value="planckConstantReduced">
                                    </property>
                                    <property name="lightSpeed" class="ptolemy.data.expr.Parameter" value="299792458.0*meter/second">
                                    </property>
                                    <property name="dyne" class="ptolemy.data.expr.Parameter" value="gram*cm/second^2">
                                    </property>
                                    <property name="newton" class="ptolemy.data.expr.Parameter" value="kilogram*meter/second^2">
                                    </property>
                                    <property name="joule" class="ptolemy.data.expr.Parameter" value="newton*meter">
                                    </property>
                                    <property name="erg" class="ptolemy.data.expr.Parameter" value="dyne*cm">
                                    </property>
                                    <property name="kg" class="ptolemy.data.expr.Parameter" value="kilogram">
                                    </property>
                                    <property name="amp" class="ptolemy.data.expr.Parameter" value="ampere">
                                    </property>
                                    <property name="minute" class="ptolemy.data.expr.Parameter" value="60*second">
                                    </property>
                                    <property name="hour" class="ptolemy.data.expr.Parameter" value="3600*second">
                                    </property>
                                    <property name="day" class="ptolemy.data.expr.Parameter" value="24*hour">
                                    </property>
                                    <property name="yearCalendar" class="ptolemy.data.expr.Parameter" value="365.2425*day">
                                    </property>
                                    <property name="yearSidereal" class="ptolemy.data.expr.Parameter" value="31558150*second">
                                    </property>
                                    <property name="yearTropical" class="ptolemy.data.expr.Parameter" value="31556930*second">
                                    </property>
                                    <property name="curie" class="ptolemy.data.expr.Parameter" value="3.7E+10/second">
                                    </property>
                                    <property name="angstrom" class="ptolemy.data.expr.Parameter" value="1E-10*meter">
                                    </property>
                                    <property name="gallonCanadian" class="ptolemy.data.expr.Parameter" value="4546.09*cm^3">
                                    </property>
                                    <property name="gallonUS" class="ptolemy.data.expr.Parameter" value="3785.412*cm^3">
                                    </property>
                                    <property name="gallon" class="ptolemy.data.expr.Parameter" value="gallonUS">
                                    </property>
                                    <property name="barrel" class="ptolemy.data.expr.Parameter" value="42*gallonUS">
                                    </property>
                                    <property name="ozFluidUS" class="ptolemy.data.expr.Parameter" value="gallonUS/128">
                                    </property>
                                    <property name="tablespoon" class="ptolemy.data.expr.Parameter" value="ozFluidUS/2">
                                    </property>
                                    <property name="teaspoon" class="ptolemy.data.expr.Parameter" value="ozFluidUS/6">
                                    </property>
                                    <property name="cup" class="ptolemy.data.expr.Parameter" value="8*ozFluidUS">
                                    </property>
                                    <property name="pint" class="ptolemy.data.expr.Parameter" value="2*cup">
                                    </property>
                                    <property name="quart" class="ptolemy.data.expr.Parameter" value="2*pint">
                                    </property>
                                    <property name="astronomicalUnit" class="ptolemy.data.expr.Parameter" value="1.495979E+11*meter">
                                    </property>
                                    <property name="inch" class="ptolemy.data.expr.Parameter" value="0.0254*meter">
                                    </property>
                                    <property name="foot" class="ptolemy.data.expr.Parameter" value="0.3048*meter">
                                    </property>
                                    <property name="yard" class="ptolemy.data.expr.Parameter" value="3*foot">
                                    </property>
                                    <property name="cord" class="ptolemy.data.expr.Parameter" value="128*foot^3">
                                    </property>
                                    <property name="footUSSurvey" class="ptolemy.data.expr.Parameter" value="0.3048006*meter">
                                    </property>
                                    <property name="fathom" class="ptolemy.data.expr.Parameter" value="6*footUSSurvey">
                                    </property>
                                    <property name="acre" class="ptolemy.data.expr.Parameter" value="43560*footUSSurvey^2">
                                    </property>
                                    <property name="acreFoot" class="ptolemy.data.expr.Parameter" value="acre*footUSSurvey">
                                    </property>
                                    <property name="mileNautical" class="ptolemy.data.expr.Parameter" value="1852*meter">
                                    </property>
                                    <property name="mile" class="ptolemy.data.expr.Parameter" value="5280*foot">
                                    </property>
                                    <property name="barn" class="ptolemy.data.expr.Parameter" value="1E-28*meter^2">
                                    </property>
                                    <property name="hectare" class="ptolemy.data.expr.Parameter" value="1E+4*meter^2">
                                    </property>
                                    <property name="knot" class="ptolemy.data.expr.Parameter" value="mileNautical/hour">
                                    </property>
                                    <property name="mph" class="ptolemy.data.expr.Parameter" value="mile/hour">
                                    </property>
                                    <property name="tonMetric" class="ptolemy.data.expr.Parameter" value="1000*kg">
                                    </property>
                                    <property name="pound" class="ptolemy.data.expr.Parameter" value="453.5924*gram">
                                    </property>
                                    <property name="ton" class="ptolemy.data.expr.Parameter" value="2000*pound">
                                    </property>
                                    <property name="tonLong" class="ptolemy.data.expr.Parameter" value="2240*pound">
                                    </property>
                                    <property name="oz" class="ptolemy.data.expr.Parameter" value="pound/16">
                                    </property>
                                    <property name="poundTroy" class="ptolemy.data.expr.Parameter" value="373.2417">
                                    </property>
                                    <property name="ounceTroy" class="ptolemy.data.expr.Parameter" value="poundTroy/12">
                                    </property>
                                    <property name="earthGravity" class="ptolemy.data.expr.Parameter" value="9.80665*meter/second^2">
                                    </property>
                                    <property name="ounceForce" class="ptolemy.data.expr.Parameter" value="oz*earthGravity">
                                    </property>
                                    <property name="poundForce" class="ptolemy.data.expr.Parameter" value="pound*earthGravity">
                                    </property>
                                    <property name="psi" class="ptolemy.data.expr.Parameter" value="pound/inch^2">
                                    </property>
                                    <property name="pascal" class="ptolemy.data.expr.Parameter" value="10*dyne/cm^2">
                                    </property>
                                    <property name="atm" class="ptolemy.data.expr.Parameter" value="101325*pascal">
                                    </property>
                                    <property name="bar" class="ptolemy.data.expr.Parameter" value="100000*pascal">
                                    </property>
                                    <property name="millibar" class="ptolemy.data.expr.Parameter" value="100*pascal">
                                    </property>
                                    <property name="inchOfWater" class="ptolemy.data.expr.Parameter" value="249.0889*pascal">
                                    </property>
                                    <property name="mmOfWater" class="ptolemy.data.expr.Parameter" value="inchOfWater/25.4">
                                    </property>
                                    <property name="inchOfMercury" class="ptolemy.data.expr.Parameter" value="3386.389*pascal">
                                    </property>
                                    <property name="mmOfMercury" class="ptolemy.data.expr.Parameter" value="inchOfMercury/25.4">
                                    </property>
                                    <property name="torr" class="ptolemy.data.expr.Parameter" value="mmOfMercury">
                                    </property>
                                    <property name="rankine" class="ptolemy.data.expr.Parameter" value="5*kelvin/9">
                                    </property>
                                    <property name="thermUS" class="ptolemy.data.expr.Parameter" value="1.054804E+8*joule">
                                    </property>
                                    <property name="btuIT" class="ptolemy.data.expr.Parameter" value="1055.056*joule">
                                    </property>
                                    <property name="tonTNT" class="ptolemy.data.expr.Parameter" value="4.184E+9*joule">
                                    </property>
                                    <property name="calorie" class="ptolemy.data.expr.Parameter" value="4.1868*joule">
                                    </property>
                                    <property name="tonOfRefrigeration" class="ptolemy.data.expr.Parameter" value="12000*btuIT/hour">
                                    </property>
                                    <property name="watt" class="ptolemy.data.expr.Parameter" value="joule/second">
                                    </property>
                                    <property name="hp" class="ptolemy.data.expr.Parameter" value="550*foot*poundForce/second">
                                    </property>
                                    <property name="centipoise" class="ptolemy.data.expr.Parameter" value="1E-3*pascal*second">
                                    </property>
                                    <property name="poise" class="ptolemy.data.expr.Parameter" value="1E-1*pascal*second">
                                    </property>
                                    <property name="centistoke" class="ptolemy.data.expr.Parameter" value="1E-6*meter^2/second">
                                    </property>
                                    <property name="stoke" class="ptolemy.data.expr.Parameter" value="1E-4*meter^2/second">
                                    </property>
                                    <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <rect x="-30" y="-15" width="60" height="30" style="fill:grey"></rect>
      </svg>
    </configure>
                                    </property>
                                </property>
                                <property name="ElectronicUnitBase" class="ptolemy.data.unit.UnitSystem">
                                    <property name="volt" class="ptolemy.data.unit.BaseUnit" value="1.0">
                                        <property name="electricPotential" class="ptolemy.data.unit.UnitCategory">
                                        </property>
                                    </property>
                                    <property name="ampere" class="ptolemy.data.unit.BaseUnit" value="1.0">
                                        <property name="electricCurrent" class="ptolemy.data.unit.UnitCategory">
                                        </property>
                                    </property>
                                    <property name="second" class="ptolemy.data.unit.BaseUnit" value="1.0">
                                        <property name="Time" class="ptolemy.data.unit.UnitCategory">
                                        </property>
                                    </property>
                                    <property name="meter" class="ptolemy.data.expr.Parameter" value="1E+7*ampere*second/volt/(299792458.0^2)">
                                    </property>
                                    <property name="kilogram" class="ptolemy.data.expr.Parameter" value="ampere*volt*(second^3)/(meter^2)">
                                    </property>
                                    <property name="kelvin" class="ptolemy.data.expr.Parameter" value="1.38065E-23*kilogram*(meter^2)/(second^2)">
                                    </property>
                                    <property name="mole" class="ptolemy.data.expr.Parameter" value="6.022142E+23">
                                    </property>
                                    <property name="candela" class="ptolemy.data.expr.Parameter" value="kilogram*(meter^2)/(second^3)/683">
                                    </property>
                                    <property name="ohm" class="ptolemy.data.expr.Parameter" value="volt/ampere">
                                    </property>
                                    <property name="mho" class="ptolemy.data.expr.Parameter" value="ampere/volt">
                                    </property>
                                    <property name="coulomb" class="ptolemy.data.expr.Parameter" value="ampere*second">
                                    </property>
                                    <property name="esu" class="ptolemy.data.expr.Parameter" value="coulomb/(299792458.0*10)">
                                    </property>
                                    <property name="statvolt" class="ptolemy.data.expr.Parameter" value="299.792458*volt">
                                    </property>
                                    <property name="gauss" class="ptolemy.data.expr.Parameter" value="statvolt/(meter/100)">
                                    </property>
                                    <property name="electronCharge" class="ptolemy.data.expr.Parameter" value="1.6021765E-19*coulomb">
                                    </property>
                                    <property name="farad" class="ptolemy.data.expr.Parameter" value="ampere*second/volt">
                                    </property>
                                    <property name="henry" class="ptolemy.data.expr.Parameter" value="volt*second/ampere">
                                    </property>
                                    <property name="kg" class="ptolemy.data.expr.Parameter" value="kilogram">
                                    </property>
                                    <property name="gram" class="ptolemy.data.expr.Parameter" value="kilogram/1000">
                                    </property>
                                    <property name="cm" class="ptolemy.data.expr.Parameter" value="meter/100">
                                    </property>
                                    <property name="amp" class="ptolemy.data.expr.Parameter" value="ampere">
                                    </property>
                                    <property name="planckConstant" class="ptolemy.data.expr.Parameter" value="hBar*2*pi">
                                    </property>
                                    <property name="planckConstantReduced" class="ptolemy.data.expr.Parameter" value="1.0545716E-34*joule*second">
                                    </property>
                                    <property name="hBar" class="ptolemy.data.expr.Parameter" value="planckConstantReduced">
                                    </property>
                                    <property name="lightSpeed" class="ptolemy.data.expr.Parameter" value="299792458.0*meter/second">
                                    </property>
                                    <property name="dyne" class="ptolemy.data.expr.Parameter" value="gram*cm/second^2">
                                    </property>
                                    <property name="newton" class="ptolemy.data.expr.Parameter" value="kilogram*meter/second^2">
                                    </property>
                                    <property name="joule" class="ptolemy.data.expr.Parameter" value="newton*meter">
                                    </property>
                                    <property name="erg" class="ptolemy.data.expr.Parameter" value="dyne*cm">
                                    </property>
                                    <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <rect x="-30" y="-15" width="60" height="30" style="fill:grey"></rect>
      </svg>
    </configure>
                                    </property>
                                </property>
                                <property name="SI" class="ptolemy.data.unit.UnitSystem">
                                    <property name="cm" class="ptolemy.data.unit.BaseUnit" value="1.0">
                                        <property name="Length" class="ptolemy.data.unit.UnitCategory">
                                        </property>
                                    </property>
                                    <property name="gram" class="ptolemy.data.unit.BaseUnit" value="1.0">
                                        <property name="Mass" class="ptolemy.data.unit.UnitCategory">
                                        </property>
                                    </property>
                                    <property name="second" class="ptolemy.data.unit.BaseUnit" value="1.0">
                                        <property name="Time" class="ptolemy.data.unit.UnitCategory">
                                        </property>
                                    </property>
                                    <property name="ampere" class="ptolemy.data.unit.BaseUnit" value="1.0">
                                        <property name="electricCurrent" class="ptolemy.data.unit.UnitCategory">
                                        </property>
                                    </property>
                                    <property name="population" class="ptolemy.data.unit.BaseUnit" value="1.0">
                                        <property name="Count" class="ptolemy.data.unit.UnitCategory">
                                        </property>
                                    </property>
                                    <property name="pi" class="ptolemy.data.expr.Parameter" value="3.1415926535898">
                                    </property>
                                    <property name="meter" class="ptolemy.data.expr.Parameter" value="100*cm">
                                    </property>
                                    <property name="kilogram" class="ptolemy.data.expr.Parameter" value="1000*gram">
                                    </property>
                                    <property name="squareAmpere" class="ptolemy.data.expr.Parameter" value="0.01*(lightSpeed^2)*cm*gram/(second^2)">
                                    </property>
                                    <property name="kelvin" class="ptolemy.data.expr.Parameter" value="1.38065E-23*kilogram*(meter^2)/(second^2)">
                                    </property>
                                    <property name="mole" class="ptolemy.data.expr.Parameter" value="6.022142E+23">
                                    </property>
                                    <property name="candela" class="ptolemy.data.expr.Parameter" value="kilogram*(meter^2)/(second^3)/683">
                                    </property>
                                    <property name="volt" class="ptolemy.data.expr.Parameter" value="kilogram*(meter^2)/(second^3)/ampere">
                                    </property>
                                    <property name="ohm" class="ptolemy.data.expr.Parameter" value="volt/ampere">
                                    </property>
                                    <property name="mho" class="ptolemy.data.expr.Parameter" value="ampere/volt">
                                    </property>
                                    <property name="coulomb" class="ptolemy.data.expr.Parameter" value="ampere*second">
                                    </property>
                                    <property name="esu" class="ptolemy.data.expr.Parameter" value="coulomb/(299792458.0*10)">
                                    </property>
                                    <property name="statvolt" class="ptolemy.data.expr.Parameter" value="299.792458*volt">
                                    </property>
                                    <property name="gauss" class="ptolemy.data.expr.Parameter" value="statvolt/(meter/100)">
                                    </property>
                                    <property name="electronCharge" class="ptolemy.data.expr.Parameter" value="1.6021765E-19*coulomb">
                                    </property>
                                    <property name="farad" class="ptolemy.data.expr.Parameter" value="ampere*second/volt">
                                    </property>
                                    <property name="henry" class="ptolemy.data.expr.Parameter" value="volt*second/ampere">
                                    </property>
                                    <property name="watt" class="ptolemy.data.expr.Parameter" value="joule/second">
                                    </property>
                                    <property name="planckConstant" class="ptolemy.data.expr.Parameter" value="hBar*2*pi">
                                    </property>
                                    <property name="planckConstantReduced" class="ptolemy.data.expr.Parameter" value="1.0545716E-34*joule*second">
                                    </property>
                                    <property name="hBar" class="ptolemy.data.expr.Parameter" value="planckConstantReduced">
                                    </property>
                                    <property name="lightSpeed" class="ptolemy.data.expr.Parameter" value="299792458.0*meter/second">
                                    </property>
                                    <property name="dyne" class="ptolemy.data.expr.Parameter" value="gram*cm/second^2">
                                    </property>
                                    <property name="newton" class="ptolemy.data.expr.Parameter" value="kilogram*meter/second^2">
                                    </property>
                                    <property name="joule" class="ptolemy.data.expr.Parameter" value="newton*meter">
                                    </property>
                                    <property name="erg" class="ptolemy.data.expr.Parameter" value="dyne*cm">
                                    </property>
                                    <property name="degree" class="ptolemy.data.expr.Parameter" value="calorie/cm^3">
                                    </property>
                                    <property name="minute" class="ptolemy.data.expr.Parameter" value="60*second">
                                    </property>
                                    <property name="hour" class="ptolemy.data.expr.Parameter" value="3600*second">
                                    </property>
                                    <property name="day" class="ptolemy.data.expr.Parameter" value="24*hour">
                                    </property>
                                    <property name="yearCalendar" class="ptolemy.data.expr.Parameter" value="365.2425*day">
                                    </property>
                                    <property name="yearSidereal" class="ptolemy.data.expr.Parameter" value="31558150*second">
                                    </property>
                                    <property name="yearTropical" class="ptolemy.data.expr.Parameter" value="31556930*second">
                                    </property>
                                    <property name="curie" class="ptolemy.data.expr.Parameter" value="3.7E+10/second">
                                    </property>
                                    <property name="angstrom" class="ptolemy.data.expr.Parameter" value="1E-10*meter">
                                    </property>
                                    <property name="gallonCanadian" class="ptolemy.data.expr.Parameter" value="4546.09*cm^3">
                                    </property>
                                    <property name="gallonUS" class="ptolemy.data.expr.Parameter" value="3785.412*cm^3">
                                    </property>
                                    <property name="gallon" class="ptolemy.data.expr.Parameter" value="gallonUS">
                                    </property>
                                    <property name="barrel" class="ptolemy.data.expr.Parameter" value="42*gallonUS">
                                    </property>
                                    <property name="ozFluidUS" class="ptolemy.data.expr.Parameter" value="gallonUS/128">
                                    </property>
                                    <property name="tablespoon" class="ptolemy.data.expr.Parameter" value="ozFluidUS/2">
                                    </property>
                                    <property name="teaspoon" class="ptolemy.data.expr.Parameter" value="ozFluidUS/6">
                                    </property>
                                    <property name="cup" class="ptolemy.data.expr.Parameter" value="8*ozFluidUS">
                                    </property>
                                    <property name="pint" class="ptolemy.data.expr.Parameter" value="2*cup">
                                    </property>
                                    <property name="quart" class="ptolemy.data.expr.Parameter" value="2*pint">
                                    </property>
                                    <property name="astronomicalUnit" class="ptolemy.data.expr.Parameter" value="1.495979E+11*meter">
                                    </property>
                                    <property name="inch" class="ptolemy.data.expr.Parameter" value="0.0254*meter">
                                    </property>
                                    <property name="foot" class="ptolemy.data.expr.Parameter" value="0.3048*meter">
                                    </property>
                                    <property name="yard" class="ptolemy.data.expr.Parameter" value="3*foot">
                                    </property>
                                    <property name="cord" class="ptolemy.data.expr.Parameter" value="128*foot^3">
                                    </property>
                                    <property name="footUSSurvey" class="ptolemy.data.expr.Parameter" value="0.3048006*meter">
                                    </property>
                                    <property name="fathom" class="ptolemy.data.expr.Parameter" value="6*footUSSurvey">
                                    </property>
                                    <property name="acre" class="ptolemy.data.expr.Parameter" value="43560*footUSSurvey^2">
                                    </property>
                                    <property name="acreFoot" class="ptolemy.data.expr.Parameter" value="acre*footUSSurvey">
                                    </property>
                                    <property name="mileNautical" class="ptolemy.data.expr.Parameter" value="1852*meter">
                                    </property>
                                    <property name="mile" class="ptolemy.data.expr.Parameter" value="5280*foot">
                                    </property>
                                    <property name="barn" class="ptolemy.data.expr.Parameter" value="1E-28*meter^2">
                                    </property>
                                    <property name="hectare" class="ptolemy.data.expr.Parameter" value="1E+4*meter^2">
                                    </property>
                                    <property name="knot" class="ptolemy.data.expr.Parameter" value="mileNautical/hour">
                                    </property>
                                    <property name="mph" class="ptolemy.data.expr.Parameter" value="mile/hour">
                                    </property>
                                    <property name="tonMetric" class="ptolemy.data.expr.Parameter" value="1000*kg">
                                    </property>
                                    <property name="pound" class="ptolemy.data.expr.Parameter" value="453.5924*gram">
                                    </property>
                                    <property name="ton" class="ptolemy.data.expr.Parameter" value="2000*pound">
                                    </property>
                                    <property name="tonLong" class="ptolemy.data.expr.Parameter" value="2240*pound">
                                    </property>
                                    <property name="oz" class="ptolemy.data.expr.Parameter" value="pound/16">
                                    </property>
                                    <property name="poundTroy" class="ptolemy.data.expr.Parameter" value="373.2417">
                                    </property>
                                    <property name="ounceTroy" class="ptolemy.data.expr.Parameter" value="poundTroy/12">
                                    </property>
                                    <property name="earthGravity" class="ptolemy.data.expr.Parameter" value="9.80665*meter/second^2">
                                    </property>
                                    <property name="ounceForce" class="ptolemy.data.expr.Parameter" value="oz*earthGravity">
                                    </property>
                                    <property name="poundForce" class="ptolemy.data.expr.Parameter" value="pound*earthGravity">
                                    </property>
                                    <property name="psi" class="ptolemy.data.expr.Parameter" value="pound/inch^2">
                                    </property>
                                    <property name="pascal" class="ptolemy.data.expr.Parameter" value="10*dyne/cm^2">
                                    </property>
                                    <property name="atm" class="ptolemy.data.expr.Parameter" value="101325*pascal">
                                    </property>
                                    <property name="bar" class="ptolemy.data.expr.Parameter" value="100000*pascal">
                                    </property>
                                    <property name="millibar" class="ptolemy.data.expr.Parameter" value="100*pascal">
                                    </property>
                                    <property name="inchOfWater" class="ptolemy.data.expr.Parameter" value="249.0889*pascal">
                                    </property>
                                    <property name="mmOfWater" class="ptolemy.data.expr.Parameter" value="inchOfWater/25.4">
                                    </property>
                                    <property name="inchOfMercury" class="ptolemy.data.expr.Parameter" value="3386.389*pascal">
                                    </property>
                                    <property name="mmOfMercury" class="ptolemy.data.expr.Parameter" value="inchOfMercury/25.4">
                                    </property>
                                    <property name="torr" class="ptolemy.data.expr.Parameter" value="mmOfMercury">
                                    </property>
                                    <property name="rankine" class="ptolemy.data.expr.Parameter" value="5*kelvin/9">
                                    </property>
                                    <property name="thermUS" class="ptolemy.data.expr.Parameter" value="1.054804E+8*joule">
                                    </property>
                                    <property name="btuIT" class="ptolemy.data.expr.Parameter" value="1055.056*joule">
                                    </property>
                                    <property name="tonTNT" class="ptolemy.data.expr.Parameter" value="4.184E+9*joule">
                                    </property>
                                    <property name="calorie" class="ptolemy.data.expr.Parameter" value="4.1868*joule">
                                    </property>
                                    <property name="tonOfRefrigeration" class="ptolemy.data.expr.Parameter" value="12000*btuIT/hour">
                                    </property>
                                    <property name="hp" class="ptolemy.data.expr.Parameter" value="550*foot*poundForce/second">
                                    </property>
                                    <property name="centipoise" class="ptolemy.data.expr.Parameter" value="1E-3*pascal*second">
                                    </property>
                                    <property name="poise" class="ptolemy.data.expr.Parameter" value="1E-1*pascal*second">
                                    </property>
                                    <property name="centistoke" class="ptolemy.data.expr.Parameter" value="1E-6*meter^2/second">
                                    </property>
                                    <property name="stoke" class="ptolemy.data.expr.Parameter" value="1E-4*meter^2/second">
                                    </property>
                                    <property name="kg" class="ptolemy.data.expr.Parameter" value="kilogram">
                                    </property>
                                    <property name="amp" class="ptolemy.data.expr.Parameter" value="ampere">
                                    </property>
                                    <property name="sec" class="ptolemy.data.expr.Parameter" value="second">
                                    </property>
                                    <property name="gallons" class="ptolemy.data.expr.Parameter" value="gallon">
                                    </property>
                                    <property name="watts" class="ptolemy.data.expr.Parameter" value="watt">
                                    </property>
                                    <property name="calories" class="ptolemy.data.expr.Parameter" value="calorie">
                                    </property>
                                    <property name="seconds" class="ptolemy.data.expr.Parameter" value="second">
                                    </property>
                                    <property name="secs" class="ptolemy.data.expr.Parameter" value="second">
                                    </property>
                                    <property name="time" class="ptolemy.data.expr.Parameter" value="second">
                                    </property>
                                    <property name="degrees" class="ptolemy.data.expr.Parameter" value="degree">
                                    </property>
                                    <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
      <svg>
        <rect x="-30" y="-15" width="60" height="30" style="fill:grey"></rect>
      </svg>
    </configure>
                                    </property>
                                </property>
                                <property name="minute" class="ptolemy.data.expr.Parameter" value="60*second">
                                </property>
                                <property name="hour" class="ptolemy.data.expr.Parameter" value="3600*second">
                                </property>
                                <property name="day" class="ptolemy.data.expr.Parameter" value="24*hour">
                                </property>
                                <property name="yearCalendar" class="ptolemy.data.expr.Parameter" value="365.2425*day">
                                </property>
                                <property name="yearSidereal" class="ptolemy.data.expr.Parameter" value="31558150*second">
                                </property>
                                <property name="yearTropical" class="ptolemy.data.expr.Parameter" value="31556930*second">
                                </property>
                                <property name="curie" class="ptolemy.data.expr.Parameter" value="3.7E+10/second">
                                </property>
                                <property name="angstrom" class="ptolemy.data.expr.Parameter" value="1E-10*meter">
                                </property>
                                <property name="gallonCanadian" class="ptolemy.data.expr.Parameter" value="4546.09*cm^3">
                                </property>
                                <property name="gallonUS" class="ptolemy.data.expr.Parameter" value="3785.412*cm^3">
                                </property>
                                <property name="gallon" class="ptolemy.data.expr.Parameter" value="gallonUS">
                                </property>
                                <property name="barrel" class="ptolemy.data.expr.Parameter" value="42*gallonUS">
                                </property>
                                <property name="ozFluidUS" class="ptolemy.data.expr.Parameter" value="gallonUS/128">
                                </property>
                                <property name="tablespoon" class="ptolemy.data.expr.Parameter" value="ozFluidUS/2">
                                </property>
                                <property name="teaspoon" class="ptolemy.data.expr.Parameter" value="ozFluidUS/6">
                                </property>
                                <property name="cup" class="ptolemy.data.expr.Parameter" value="8*ozFluidUS">
                                </property>
                                <property name="pint" class="ptolemy.data.expr.Parameter" value="2*cup">
                                </property>
                                <property name="quart" class="ptolemy.data.expr.Parameter" value="2*pint">
                                </property>
                                <property name="astronomicalUnit" class="ptolemy.data.expr.Parameter" value="1.495979E+11*meter">
                                </property>
                                <property name="inch" class="ptolemy.data.expr.Parameter" value="0.0254*meter">
                                </property>
                                <property name="foot" class="ptolemy.data.expr.Parameter" value="0.3048*meter">
                                </property>
                                <property name="yard" class="ptolemy.data.expr.Parameter" value="3*foot">
                                </property>
                                <property name="cord" class="ptolemy.data.expr.Parameter" value="128*foot^3">
                                </property>
                                <property name="footUSSurvey" class="ptolemy.data.expr.Parameter" value="0.3048006*meter">
                                </property>
                                <property name="fathom" class="ptolemy.data.expr.Parameter" value="6*footUSSurvey">
                                </property>
                                <property name="acre" class="ptolemy.data.expr.Parameter" value="43560*footUSSurvey^2">
                                </property>
                                <property name="acreFoot" class="ptolemy.data.expr.Parameter" value="acre*footUSSurvey">
                                </property>
                                <property name="mileNautical" class="ptolemy.data.expr.Parameter" value="1852*meter">
                                </property>
                                <property name="mile" class="ptolemy.data.expr.Parameter" value="5280*foot">
                                </property>
                                <property name="barn" class="ptolemy.data.expr.Parameter" value="1E-28*meter^2">
                                </property>
                                <property name="hectare" class="ptolemy.data.expr.Parameter" value="1E+4*meter^2">
                                </property>
                                <property name="knot" class="ptolemy.data.expr.Parameter" value="mileNautical/hour">
                                </property>
                                <property name="mph" class="ptolemy.data.expr.Parameter" value="mile/hour">
                                </property>
                                <property name="tonMetric" class="ptolemy.data.expr.Parameter" value="1000*kg">
                                </property>
                                <property name="pound" class="ptolemy.data.expr.Parameter" value="453.5924*gram">
                                </property>
                                <property name="ton" class="ptolemy.data.expr.Parameter" value="2000*pound">
                                </property>
                                <property name="tonLong" class="ptolemy.data.expr.Parameter" value="2240*pound">
                                </property>
                                <property name="oz" class="ptolemy.data.expr.Parameter" value="pound/16">
                                </property>
                                <property name="poundTroy" class="ptolemy.data.expr.Parameter" value="373.2417">
                                </property>
                                <property name="ounceTroy" class="ptolemy.data.expr.Parameter" value="poundTroy/12">
                                </property>
                                <property name="earthGravity" class="ptolemy.data.expr.Parameter" value="9.80665*meter/second^2">
                                </property>
                                <property name="ounceForce" class="ptolemy.data.expr.Parameter" value="oz*earthGravity">
                                </property>
                                <property name="poundForce" class="ptolemy.data.expr.Parameter" value="pound*earthGravity">
                                </property>
                                <property name="psi" class="ptolemy.data.expr.Parameter" value="pound/inch^2">
                                </property>
                                <property name="pascal" class="ptolemy.data.expr.Parameter" value="10*dyne/cm^2">
                                </property>
                                <property name="atm" class="ptolemy.data.expr.Parameter" value="101325*pascal">
                                </property>
                                <property name="bar" class="ptolemy.data.expr.Parameter" value="100000*pascal">
                                </property>
                                <property name="millibar" class="ptolemy.data.expr.Parameter" value="100*pascal">
                                </property>
                                <property name="inchOfWater" class="ptolemy.data.expr.Parameter" value="249.0889*pascal">
                                </property>
                                <property name="mmOfWater" class="ptolemy.data.expr.Parameter" value="inchOfWater/25.4">
                                </property>
                                <property name="inchOfMercury" class="ptolemy.data.expr.Parameter" value="3386.389*pascal">
                                </property>
                                <property name="mmOfMercury" class="ptolemy.data.expr.Parameter" value="inchOfMercury/25.4">
                                </property>
                                <property name="torr" class="ptolemy.data.expr.Parameter" value="mmOfMercury">
                                </property>
                                <property name="rankine" class="ptolemy.data.expr.Parameter" value="5*kelvin/9">
                                </property>
                                <property name="thermUS" class="ptolemy.data.expr.Parameter" value="1.054804E+8*joule">
                                </property>
                                <property name="btuIT" class="ptolemy.data.expr.Parameter" value="1055.056*joule">
                                </property>
                                <property name="tonTNT" class="ptolemy.data.expr.Parameter" value="4.184E+9*joule">
                                </property>
                                <property name="calorie" class="ptolemy.data.expr.Parameter" value="4.1868*joule">
                                </property>
                                <property name="tonOfRefrigeration" class="ptolemy.data.expr.Parameter" value="12000*btuIT/hour">
                                </property>
                                <property name="watt" class="ptolemy.data.expr.Parameter" value="joule/second">
                                </property>
                                <property name="hp" class="ptolemy.data.expr.Parameter" value="550*foot*poundForce/second">
                                </property>
                                <property name="centipoise" class="ptolemy.data.expr.Parameter" value="1E-3*pascal*second">
                                </property>
                                <property name="poise" class="ptolemy.data.expr.Parameter" value="1E-1*pascal*second">
                                </property>
                                <property name="centistoke" class="ptolemy.data.expr.Parameter" value="1E-6*meter^2/second">
                                </property>
                                <property name="stoke" class="ptolemy.data.expr.Parameter" value="1E-4*meter^2/second">
                                </property>
                            </group>
                        </configure>
                    </entity>
                    <entity name="PteraModalModel" class="ptolemy.domains.ptera.kernel.PteraModalModel">
                    </entity>
                </group>
            </configure>
        </entity>
        <entity name="Directors" class="ptolemy.moml.EntityLibrary">
            <configure>
                <group>
                    <doc>default director library</doc>
                    <property name="SDF Director" class="ptolemy.domains.sdf.kernel.SDFDirector">
                        <property name="iterations" class="ptolemy.data.expr.Parameter" value="AUTO">
                        </property>
                    </property>
                    <property name="DDF Director" class="ptolemy.domains.ddf.kernel.DDFDirector">
                    </property>
                    <property name="HDF Director" class="ptolemy.domains.hdf.kernel.HDFDirector">
                    </property>
                    <property name="PN Director" class="ptolemy.domains.pn.kernel.PNDirector">
                    </property>
                    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
                    </property>
                    <property name="SR Director" class="ptolemy.domains.sr.kernel.SRDirector">
                    </property>
                    <property name="Rendezvous Director" class="ptolemy.domains.rendezvous.kernel.RendezvousDirector">
                    </property>
                    <property name="FSM Director" class="ptolemy.domains.modal.kernel.FSMDirector">
                    </property>
                    <property name="Continuous Director" class="ptolemy.domains.continuous.kernel.ContinuousDirector">
                    </property>
                    <property name="Director" class="ptolemy.actor.Director">
                        <doc>Simple director that executes actors in the order in which they were created.</doc>
                        <property name="iterations" class="ptolemy.data.expr.Parameter" value="0">
                        </property>
                    </property>
                    <entity name="ExperimentalDirectors" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>experimental director library</doc>
                                <property name="CA Director" class="ptolemy.domains.ca.kernel.CADirector">
                                </property>
                                <property name="CI Director" class="ptolemy.domains.ci.kernel.CIDirector">
                                </property>
                                <property name="Do Nothing Director" class="ptolemy.actor.DoNothingDirector">
                                </property>
                                <property name="DT Director" class="ptolemy.domains.dt.kernel.DTDirector">
                                </property>
                                <property name="Giotto Director" class="ptolemy.domains.giotto.kernel.GiottoDirector">
                                </property>
                                <property name="OpenModelica Director" class="ptolemy.domains.openmodelica.kernel.OpenModelicaDirector">
                                </property>
                                <property name="Timed PN Director" class="ptolemy.domains.pn.kernel.TimedPNDirector">
                                </property>
                                <property name="TM Director" class="ptolemy.domains.tm.kernel.TMDirector">
                                </property>
                                <property name="PSDF_Director" class="ptolemy.domains.psdf.kernel.PSDFDirector">
                                </property>
                                <property name="PetriNet Director" class="ptolemy.domains.petrinet.kernel.PetriNetDirector">
                                </property>
                                <property name="DDE Director" class="ptolemy.domains.dde.kernel.DDEDirector">
                                </property>
                                <property name="Pthales Director" class="ptolemy.domains.pthales.kernel.PthalesDirector">
                                </property>
                                <property name="QSSDirector" class="ptolemy.domains.qss.kernel.QSSDirector">
                                </property>
                            </group>
                        </configure>
                    </entity>
                </group>
            </configure>
        </entity>
        <entity name="Actors" class="ptolemy.moml.EntityLibrary">
            <configure>
                <group>
                    <entity name="Sources" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <entity name="GenericSources" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Sources of sequences of values. </doc>
                                            <entity name="Const" class="ptolemy.actor.lib.Const">
                                                <doc>Create a constant sequence.</doc>
                                                <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                                                    </property>
                                                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="StringConst" class="ptolemy.actor.lib.StringConst">
                                                <doc>Create a constant sequence with a string value.</doc>
                                                <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                                                    </property>
                                                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="80">
                                                    </property>
                                                    <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="Subscriber" class="ptolemy.actor.lib.Subscriber">
                                                <doc>Produce a sequence generated by a matching Publisher.</doc>
                                                <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="channel">
                                                    </property>
                                                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                                                    </property>
                                                    <property name="boxColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.76, 0.84, 0.6, 1.0}">
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="SubscriptionAggregator" class="ptolemy.actor.lib.SubscriptionAggregator">
                                                <doc>Aggregate sequences generated by matching Publishers.</doc>
                                                <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="channel">
                                                    </property>
                                                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                                                    </property>
                                                    <property name="boxColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.8, 0.0, 1.0}">
                                                    </property>
                                                </property>
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="TimedSources" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Sources that depend on time.</doc>
                                            <entity name="CurrentDate" class="ptolemy.actor.lib.CurrentDate">
                                                <doc>Output the current date.</doc>
                                            </entity>
                                            <entity name="CurrentTime" class="ptolemy.actor.lib.CurrentTime">
                                                <doc>Output the current time.</doc>
                                            </entity>
                                            <entity name="CurrentMicrostep" class="ptolemy.actor.lib.CurrentMicrostep">
                                                <doc>Output the current microstep.</doc>
                                            </entity>
                                            <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
                                                <doc>Create periodic timed events.</doc>
                                            </entity>
                                            <entity name="PoissonClock" class="ptolemy.actor.lib.PoissonClock">
                                            </entity>
                                            <entity name="TriggeredSinewave" class="ptolemy.actor.lib.TriggeredSinewave">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="SequenceSources" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Sources of sequences of values. </doc>
                                            <entity name="InteractiveDialog" class="ptolemy.actor.lib.gui.InteractiveDialog">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <doc>Produce strings from an interactive dialog on the screen</doc>
                                            </entity>
                                            <entity name="InteractiveShell" class="ptolemy.actor.lib.gui.InteractiveShell">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <doc>Produce strings from an interactive shell on the screen</doc>
                                            </entity>
                                            <entity name="Interpolator" class="ptolemy.actor.lib.Interpolator">
                                            </entity>
                                            <entity name="Pulse" class="ptolemy.actor.lib.Pulse">
                                            </entity>
                                            <entity name="Ramp" class="ptolemy.actor.lib.Ramp">
                                                <doc>Create a sequence of tokens with increasing value</doc>
                                            </entity>
                                            <entity name="Sequence" class="ptolemy.actor.lib.Sequence">
                                            </entity>
                                            <entity name="Sinewave" class="ptolemy.actor.lib.Sinewave">
                                            </entity>
                                            <entity name="SketchedSource" class="ptolemy.actor.lib.gui.SketchedSource">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute">
                                                </property>
                                                <doc>Create values from a sketch on the screen</doc>
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="Sinks" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Domain-polymorphic sinks</doc>
                                <entity name="GenericSinks" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Sinks that work with any style of input (timed or not). </doc>
                                            <entity name="ArrayPlotterXY" class="ptolemy.actor.lib.gui.ArrayPlotterXY">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute">
                                                </property>
                                            </entity>
                                            <entity name="Discard" class="ptolemy.actor.lib.Discard">
                                                <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                </property>
                                                <port name="input" class="ptolemy.actor.TypedIOPort">
                                                    <property name="input"/>
                                                    <property name="multiport"/>
                                                    <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="NORTH">
                                                    </property>
                                                </port>
                                            </entity>
                                            <entity name="Display" class="ptolemy.actor.lib.gui.Display">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
                                                </property>
                                            </entity>
                                            <entity name="MonitorValue" class="ptolemy.actor.lib.gui.MonitorValue">
                                                <doc>Monitor and display values</doc>
                                                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
                                                </property>
                                                <property name="_icon" class="ptolemy.vergil.icon.UpdatedValueIcon">
                                                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                                                    </property>
                                                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="displayWidth">
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="Publisher" class="ptolemy.actor.lib.Publisher">
                                                <doc>Publish the input values to all matching Subscribers.</doc>
                                                <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="channel">
                                                    </property>
                                                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                                                    </property>
                                                    <property name="boxColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.85, 0.6, 0.58, 1.0}">
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="Recorder" class="ptolemy.actor.lib.Recorder">
                                            </entity>
                                            <entity name="SetVariable" class="ptolemy.actor.lib.SetVariable">
                                                <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="variableName">
                                                    </property>
                                                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="XYPlotter" class="ptolemy.actor.lib.gui.XYPlotter">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute">
                                                </property>
                                            </entity>
                                            <entity name="XYScope" class="ptolemy.actor.lib.gui.XYScope">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute">
                                                </property>
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="TimedSinks" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Sinks that are time based. </doc>
                                            <entity name="TimedDisplay" class="ptolemy.actor.lib.gui.TimedDisplay">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
                                                </property>
                                            </entity>
                                            <entity name="TimedMonitorValue" class="ptolemy.actor.lib.gui.TimedMonitorValue">
                                                <doc>Monitor and display values</doc>
                                                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
                                                </property>
                                                <property name="_icon" class="ptolemy.vergil.icon.UpdatedValueIcon">
                                                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                                                    </property>
                                                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="displayWidth">
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="TimedPlotter" class="ptolemy.actor.lib.gui.TimedPlotter">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute">
                                                </property>
                                            </entity>
                                            <entity name="TimedScope" class="ptolemy.actor.lib.gui.TimedScope">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute">
                                                </property>
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="SequenceSinks" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Sinks for inputs that are sequences of tokens. </doc>
                                            <entity name="ArrayPlotter" class="ptolemy.actor.lib.gui.ArrayPlotter">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute">
                                                </property>
                                            </entity>
                                            <entity name="BarGraph" class="ptolemy.actor.lib.gui.BarGraph">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute">
                                                </property>
                                            </entity>
                                            <entity name="HistogramPlotter" class="ptolemy.actor.lib.gui.HistogramPlotter">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute">
                                                </property>
                                            </entity>
                                            <entity name="SequencePlotter" class="ptolemy.actor.lib.gui.SequencePlotter">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute">
                                                </property>
                                            </entity>
                                            <entity name="SequenceScope" class="ptolemy.actor.lib.gui.SequenceScope">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute">
                                                </property>
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="Array" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Array manipulation actors</doc>
                                <entity name="ArrayAccumulate" class="ptolemy.actor.lib.ArrayAccumulate">
                                </entity>
                                <entity name="ArrayAppend" class="ptolemy.actor.lib.ArrayAppend">
                                </entity>
                                <entity name="ArrayAverage" class="ptolemy.actor.lib.ArrayAverage">
                                </entity>
                                <entity name="ArrayContains" class="ptolemy.actor.lib.ArrayContains">
                                </entity>
                                <entity name="ArrayElement" class="ptolemy.actor.lib.ArrayElement">
                                </entity>
                                <entity name="ArrayElementAsMatrix" class="ptolemy.actor.lib.ArrayElementAsMatrix">
                                </entity>
                                <entity name="ArrayExtract" class="ptolemy.actor.lib.ArrayExtract">
                                </entity>
                                <entity name="ArrayLength" class="ptolemy.actor.lib.ArrayLength">
                                </entity>
                                <entity name="ArrayLevelCrossing" class="ptolemy.actor.lib.ArrayLevelCrossing">
                                </entity>
                                <entity name="ArrayMaximum" class="ptolemy.actor.lib.ArrayMaximum">
                                </entity>
                                <entity name="ArrayMinimum" class="ptolemy.actor.lib.ArrayMinimum">
                                </entity>
                                <entity name="ArrayPeakSearch" class="ptolemy.actor.lib.ArrayPeakSearch">
                                </entity>
                                <entity name="ArrayRemoveElement" class="ptolemy.actor.lib.ArrayRemoveElement">
                                </entity>
                                <entity name="ArraySort" class="ptolemy.actor.lib.ArraySort">
                                </entity>
                                <entity name="ArraySum" class="ptolemy.actor.lib.ArraySum">
                                </entity>
                                <entity name="ArrayToElements" class="ptolemy.actor.lib.ArrayToElements">
                                </entity>
                                <entity name="ArrayToSequence" class="ptolemy.domains.sdf.lib.ArrayToSequence">
                                </entity>
                                <entity name="ArrayUpdate" class="ptolemy.actor.lib.ArrayUpdate">
                                </entity>
                                <entity name="ElementsToArray" class="ptolemy.actor.lib.ElementsToArray">
                                </entity>
                                <entity name="SequenceToArray" class="ptolemy.domains.sdf.lib.SequenceToArray">
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="Conversions" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Conversion actors</doc>
                                <entity name="AnythingToDouble" class="ptolemy.actor.lib.conversions.AnythingToDouble">
                                </entity>
                                <entity name="BooleanToAnything" class="ptolemy.actor.lib.conversions.BooleanToAnything">
                                </entity>
                                <entity name="BitsToInt" class="ptolemy.domains.sdf.lib.BitsToInt">
                                </entity>
                                <entity name="CartesianToComplex" class="ptolemy.actor.lib.conversions.CartesianToComplex">
                                </entity>
                                <entity name="CartesianToPolar" class="ptolemy.actor.lib.conversions.CartesianToPolar">
                                </entity>
                                <entity name="ComplexToCartesian" class="ptolemy.actor.lib.conversions.ComplexToCartesian">
                                </entity>
                                <entity name="ComplexToPolar" class="ptolemy.actor.lib.conversions.ComplexToPolar">
                                </entity>
                                <entity name="DateToString" class="ptolemy.actor.lib.conversions.DateToString">
                                </entity>
                                <entity name="DoubleToFix" class="ptolemy.actor.lib.conversions.DoubleToFix">
                                    <property name="quantization" class="ptolemy.kernel.util.Attribute">
                                        <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                            <property name="round" class="ptolemy.kernel.util.StringAttribute" value="round">
                                            </property>
                                            <property name="truncate" class="ptolemy.kernel.util.StringAttribute" value="truncate">
                                            </property>
                                        </property>
                                    </property>
                                </entity>
                                <entity name="ExpressionToToken" class="ptolemy.actor.lib.conversions.ExpressionToToken">
                                </entity>
                                <entity name="FixToDouble" class="ptolemy.actor.lib.conversions.FixToDouble">
                                </entity>
                                <entity name="FixToFix" class="ptolemy.actor.lib.conversions.FixToFix">
                                    <property name="overflow" class="ptolemy.kernel.util.StringAttribute" value="saturate">
                                        <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                            <property name="saturate" class="ptolemy.kernel.util.StringAttribute" value="saturate">
                                            </property>
                                            <property name="overflow_to_zero" class="ptolemy.kernel.util.StringAttribute" value="overflow_to_zero">
                                            </property>
                                        </property>
                                    </property>
                                    <property name="quantization" class="ptolemy.kernel.util.Attribute">
                                        <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                            <property name="round" class="ptolemy.kernel.util.StringAttribute" value="round">
                                            </property>
                                            <property name="truncate" class="ptolemy.kernel.util.StringAttribute" value="truncate">
                                            </property>
                                        </property>
                                    </property>
                                </entity>
                                <entity name="ImageToString" class="ptolemy.actor.lib.conversions.ImageToString">
                                    <property name="compression" class="ptolemy.data.expr.StringParameter" value="png">
                                        <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                            <property name="gif" class="ptolemy.kernel.util.StringAttribute" value="gif">
                                            </property>
                                            <property name="png" class="ptolemy.kernel.util.StringAttribute" value="png">
                                            </property>
                                            <property name="jpg" class="ptolemy.kernel.util.StringAttribute" value="jpg">
                                            </property>
                                        </property>
                                    </property>
                                </entity>
                                <entity name="IntArrayToString" class="ptolemy.actor.lib.conversions.IntArrayToString">
                                </entity>
                                <entity name="IntToBits" class="ptolemy.domains.sdf.lib.IntToBits">
                                </entity>
                                <entity name="InUnitsOf" class="ptolemy.actor.lib.conversions.InUnitsOf">
                                    <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="units">
                                        </property>
                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
                                        </property>
                                    </property>
                                </entity>
                                <entity name="JSON" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>JSON Conversion actors</doc>
                                            <entity name="JSONToToken" class="ptolemy.actor.lib.conversions.json.JSONToToken">
                                            </entity>
                                            <entity name="TokenToJSON" class="ptolemy.actor.lib.conversions.json.TokenToJSON">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="LongToDouble" class="ptolemy.actor.lib.conversions.LongToDouble">
                                </entity>
                                <entity name="PolarToCartesian" class="ptolemy.actor.lib.conversions.PolarToCartesian">
                                </entity>
                                <entity name="PolarToComplex" class="ptolemy.actor.lib.conversions.PolarToComplex">
                                </entity>
                                <entity name="Round" class="ptolemy.actor.lib.conversions.Round">
                                    <property name="function" class="ptolemy.kernel.util.StringAttribute" value="round">
                                        <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                            <property name="ceil" class="ptolemy.kernel.util.StringAttribute" value="ceil">
                                            </property>
                                            <property name="floor" class="ptolemy.kernel.util.StringAttribute" value="floor">
                                            </property>
                                            <property name="round" class="ptolemy.kernel.util.StringAttribute" value="round">
                                            </property>
                                            <property name="truncate" class="ptolemy.kernel.util.StringAttribute" value="truncate">
                                            </property>
                                        </property>
                                    </property>
                                </entity>
                                <entity name="SmoothToDouble" class="ptolemy.actor.lib.conversions.SmoothToDouble">
                                </entity>
                                <entity name="StringToBoolean" class="ptolemy.actor.lib.conversions.StringToBoolean">
                                </entity>
                                <entity name="StringToDouble" class="ptolemy.actor.lib.conversions.StringToDouble">
                                </entity>
                                <entity name="StringToInt" class="ptolemy.actor.lib.conversions.StringToInt">
                                </entity>
                                <entity name="StringToIntArray" class="ptolemy.actor.lib.conversions.StringToIntArray">
                                </entity>
                                <entity name="StringToUnsignedByteArray" class="ptolemy.actor.lib.conversions.StringToUnsignedByteArray">
                                </entity>
                                <entity name="StringToXML" class="ptolemy.actor.lib.conversions.StringToXML">
                                </entity>
                                <entity name="TokenToExpression" class="ptolemy.actor.lib.conversions.TokenToExpression">
                                </entity>
                                <entity name="UnsignedByteArrayToString" class="ptolemy.actor.lib.conversions.UnsignedByteArrayToString">
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="FlowControl" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Actors that route tokens or otherwise affect the flow of control.</doc>
                                <entity name="Aggregators" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Actors that aggregate or disaggregate signals.</doc>
                                            <entity name="BusAssembler" class="ptolemy.actor.lib.BusAssembler">
                                            </entity>
                                            <entity name="BusDisassembler" class="ptolemy.actor.lib.BusDisassembler">
                                            </entity>
                                            <entity name="Commutator" class="ptolemy.actor.lib.Commutator">
                                            </entity>
                                            <entity name="Distributor" class="ptolemy.actor.lib.Distributor">
                                            </entity>
                                            <entity name="Multiplexor" class="ptolemy.actor.lib.Multiplexor">
                                            </entity>
                                            <entity name="OrderedRecordAssembler" class="ptolemy.actor.lib.OrderedRecordAssembler">
                                            </entity>
                                            <entity name="RecordAssembler" class="ptolemy.actor.lib.RecordAssembler">
                                            </entity>
                                            <entity name="RecordDisassembler" class="ptolemy.actor.lib.RecordDisassembler">
                                            </entity>
                                            <entity name="RecordUpdater" class="ptolemy.actor.lib.RecordUpdater">
                                            </entity>
                                            <entity name="Sampler" class="ptolemy.actor.lib.Sampler">
                                            </entity>
                                            <entity name="Select" class="ptolemy.actor.lib.Select">
                                            </entity>
                                            <entity name="SingleTokenCommutator" class="ptolemy.actor.lib.SingleTokenCommutator">
                                            </entity>
                                            <entity name="Switch" class="ptolemy.actor.lib.Switch">
                                            </entity>
                                            <entity name="Synchronizer" class="ptolemy.actor.lib.Synchronizer">
                                            </entity>
                                            <entity name="UnionDisassembler" class="ptolemy.actor.lib.UnionDisassembler">
                                            </entity>
                                            <entity name="UnionMerge" class="ptolemy.actor.lib.UnionMerge">
                                            </entity>
                                            <entity name="VectorAssembler" class="ptolemy.actor.lib.VectorAssembler">
                                            </entity>
                                            <entity name="VectorDisassembler" class="ptolemy.actor.lib.VectorDisassembler">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="BooleanFlowControl" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Boolean Flow Control Actors</doc>
                                            <entity name="BooleanMultiplexor" class="ptolemy.actor.lib.BooleanMultiplexor">
                                            </entity>
                                            <entity name="BooleanSelect" class="ptolemy.actor.lib.BooleanSelect">
                                            </entity>
                                            <entity name="BooleanSwitch" class="ptolemy.actor.lib.BooleanSwitch">
                                            </entity>
                                            <entity name="ConfigurationSelect" class="ptolemy.actor.lib.ConfigurationSelect">
                                            </entity>
                                            <entity name="ConfigurationSwitch" class="ptolemy.actor.lib.ConfigurationSwitch">
                                            </entity>
                                            <entity name="CountTrues" class="ptolemy.domains.sdf.lib.CountTrues">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="SequenceControl" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Actors that alter sequences.</doc>
                                            <entity name="Chop" class="ptolemy.domains.sdf.lib.Chop">
                                            </entity>
                                            <entity name="Default" class="ptolemy.actor.lib.Default">
                                            </entity>
                                            <entity name="Repeat" class="ptolemy.domains.sdf.lib.Repeat">
                                            </entity>
                                            <entity name="SampleDelay" class="ptolemy.domains.sdf.lib.SampleDelay">
                                                <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
                                                </property>
                                                <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="initialOutputs">
                                                    </property>
                                                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="displayWidth">
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="Sequencer" class="ptolemy.actor.lib.Sequencer">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="ExecutionControl" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Actors that stop execution of the model.</doc>
                                            <property name="CatchExceptionAttribute" class="ptolemy.actor.lib.CatchExceptionAttribute">
                                                <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="statusMessage">
                                                    </property>
                                                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                                                    </property>
                                                    <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                                                    </property>
                                                </property>
                                            </property>
                                            <entity name="Exit" class="ptolemy.actor.lib.Exit">
                                            </entity>
                                            <entity name="Stop" class="ptolemy.actor.lib.Stop">
                                            </entity>
                                            <entity name="Pause" class="ptolemy.actor.lib.Pause">
                                            </entity>
                                            <entity name="ThrowException" class="ptolemy.actor.lib.ThrowException">
                                            </entity>
                                            <entity name="ThrowModelError" class="ptolemy.actor.lib.ThrowModelError">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="DataStores" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Actors that store data.</doc>
                                <entity name="Dictionary" class="ptolemy.actor.lib.Dictionary">
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="HigherOrderActors" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Higher-Order Computation Infrastructure.</doc>
                                <entity name="ApplyFunction" class="ptolemy.actor.lib.hoc.ApplyFunction">
                                    <doc>The function is applied to its input data.</doc>
                                </entity>
                                <entity name="CatchUpComposite" class="ptolemy.actor.lib.hoc.CatchUpComposite">
                                    <doc>Composite actor where inside can catch up with the outside</doc>
                                    <property name="_configurer" class="ptolemy.actor.gui.InsideEntityEditorPaneFactory">
                                    </property>
                                    <property name="_tableauFactory" class="ptolemy.actor.gui.LevelSkippingTableauFactory">
                                    </property>
                                    <entity name="Contents" class="ptolemy.actor.TypedCompositeActor">
                                        <property name="annotation" class="ptolemy.kernel.util.Attribute">
                                            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                            </property>
                                            <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Make sure there is a director here!</text></svg></configure>
                                            </property>
                                            <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
                                            </property>
                                            <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
                                            </property>
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="-5.0, 5.0">
                                            </property>
                                        </property>
                                    </entity>
                                </entity>
                                <entity name="Case" class="ptolemy.actor.lib.hoc.Case">
                                </entity>
                                <entity name="ExecuteActor" class="ptolemy.actor.lib.hoc.ExecuteActor">
                                </entity>
                                <entity name="IterateOverArray" class="ptolemy.actor.lib.hoc.IterateOverArray">
                                    <doc>Iterate a contained actor over input arrays</doc>
                                    <property name="_icon" class="ptolemy.vergil.icon.CopyCatIcon">
                                    </property>
                                    <property name="_configurer" class="ptolemy.actor.gui.InsideEntityEditorPaneFactory">
                                    </property>
                                    <property name="_tableauFactory" class="ptolemy.actor.gui.LevelSkippingTableauFactory">
                                    </property>
                                    <entity name="IterateComposite" class="ptolemy.actor.lib.hoc.IterateOverArray$IterateComposite">
                                        <property name="annotation" class="ptolemy.kernel.util.Attribute">
                                            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                            </property>
                                            <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Make sure there is a director here!</text></svg></configure>
                                            </property>
                                            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                <configure>
                <svg> 
                    <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-A-</text>
                </svg>
              </configure>
                                            </property>
                                            <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
                                            </property>
                                            <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
                                            </property>
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="-5.0, 5.0">
                                            </property>
                                        </property>
                                    </entity>
                                </entity>
                                <entity name="MobileModel" class="ptolemy.actor.lib.hoc.MobileModel">
                                    <doc>The inside model of this composite actor can be dynamically defined.</doc>
                                </entity>
                                <entity name="ModalModel" class="ptolemy.domains.modal.modal.ModalModel">
                                    <property name="_tableauFactory" class="ptolemy.vergil.modal.modal.ModalTableauFactory">
                                    </property>
                                    <entity name="_Controller" class="ptolemy.domains.modal.modal.ModalController">
                                        <property name="annotation" class="ptolemy.kernel.util.Attribute">
                                            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                            </property>
                                            <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Create a state machine here (and ports, if needed) and
create refinements for the states.  Create transitions
by holding the (Mac: command key, Windows: control key)
and dragging from one state to another.  
Right click to configure the properties 
of this model, including setting the final state(s).
Then delete this annotation.</text>
    </svg></configure>
                                            </property>
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="120.0, 5.0">
                                            </property>
                                            <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
                                            </property>
                                            <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
                                            </property>
                                        </property>
                                        <property name="_library" class="ptolemy.moml.LibraryAttribute">
                                            <configure>
      <entity name="state library" class="ptolemy.kernel.CompositeEntity"><input source="ptolemy/configs/basicUtilities.xml"></input><entity name="state" class="ptolemy.domains.modal.kernel.State"><property name="_centerName" class="ptolemy.kernel.util.Attribute"></property><property name="_controllerFactory" class="ptolemy.vergil.modal.modal.HierarchicalStateControllerFactory"></property></entity></entity>
    </configure>
                                        </property>
                                    </entity>
                                </entity>
                                <entity name="ModelDisplay" class="ptolemy.vergil.actor.lib.ModelDisplay">
                                    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                    </property>
                                    <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
                                    </property>
                                </entity>
                                <entity name="ModelReference" class="ptolemy.actor.lib.hoc.ModelReference">
                                    <property name="spawnSeparateModels" class="ptolemy.data.expr.Parameter" value="false">
                                    </property>
                                </entity>
                                <entity name="MultiInstanceComposite" class="ptolemy.actor.lib.hoc.MultiInstanceComposite">
                                    <doc>Creates multiple instances of itself</doc>
                                    <property name="annotation" class="ptolemy.kernel.util.Attribute">
                                        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                        </property>
                                        <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                            <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Make sure there is a director here!</text></svg></configure>
                                        </property>
                                        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                            <configure>
                <svg> 
                    <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-A-</text>
                </svg>
              </configure>
                                        </property>
                                        <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
                                        </property>
                                        <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
                                        </property>
                                        <property name="_location" class="ptolemy.kernel.util.Location" value="-5.0, 5.0">
                                        </property>
                                    </property>
                                </entity>
                                <entity name="RunCompositeActor" class="ptolemy.actor.lib.hoc.RunCompositeActor">
                                </entity>
                                <entity name="ThreadedComposite" class="ptolemy.actor.lib.hoc.ThreadedComposite">
                                    <doc>Execute the contained model in a separate thread with optional real-time properties.</doc>
                                    <property name="_icon" class="ptolemy.vergil.icon.CopyCatIcon">
                                        <property name="echos" class="ptolemy.data.expr.Parameter" value="1">
                                        </property>
                                        <property name="echoBoxColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 1.0, 0.0, 1.0}">
                                        </property>
                                    </property>
                                    <property name="_configurer" class="ptolemy.actor.gui.EditorPaneFactory">
                                    </property>
                                    <property name="_configurer2" class="ptolemy.actor.gui.InsideEntityEditorPaneFactory">
                                    </property>
                                    <property name="_tableauFactory" class="ptolemy.actor.gui.LevelSkippingTableauFactory">
                                    </property>
                                    <entity name="ThreadedCompositeInside" class="ptolemy.actor.lib.hoc.MirrorComposite$MirrorCompositeContents">
                                        <property name="annotation" class="ptolemy.kernel.util.Attribute">
                                            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                            </property>
                                            <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                <configure><svg><text x="20" y="20" style="font-size:14; font-family:SansSerif; fill:blue">Make sure there is a director here!</text></svg></configure>
                                            </property>
                                            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                <configure>
                <svg> 
                    <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-A-</text>
                </svg>
              </configure>
                                            </property>
                                            <property name="_controllerFactory" class="ptolemy.vergil.basic.NodeControllerFactory">
                                            </property>
                                            <property name="_editorFactory" class="ptolemy.vergil.toolbox.AnnotationEditorFactory">
                                            </property>
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="-5.0, 5.0">
                                            </property>
                                        </property>
                                    </entity>
                                </entity>
                                <entity name="VisualModelReference" class="ptolemy.vergil.actor.lib.VisualModelReference">
                                    <property name="spawnSeparateModels" class="ptolemy.data.expr.Parameter" value="false">
                                    </property>
                                </entity>
                                <entity name="PtalonActor" class="ptolemy.actor.ptalon.PtalonActor">
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="IO" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Actors that read and write to the file system or network.</doc>
                                <entity name="ArrowKeySensor" class="ptolemy.actor.lib.gui.ArrowKeySensor">
                                    <doc>Create a JFrame for sensing up, left, right, and down arrow key presses and releases</doc>
                                </entity>
                                <entity name="CSVReader" class="ptolemy.actor.lib.io.CSVReader">
                                </entity>
                                <entity name="CSVWriter" class="ptolemy.actor.lib.io.CSVWriter">
                                </entity>
                                <entity name="DatagramReader" class="ptolemy.actor.lib.net.DatagramReader">
                                </entity>
                                <entity name="DatagramWriter" class="ptolemy.actor.lib.net.DatagramWriter">
                                </entity>
                                <entity name="DirectoryListing" class="ptolemy.actor.lib.io.DirectoryListing">
                                </entity>
                                <entity name="FileReader" class="ptolemy.actor.lib.io.FileReader">
                                    <doc>Read an entire file and output as a string</doc>
                                </entity>
                                <entity name="IPAddress" class="ptolemy.actor.lib.net.IPAddress">
                                    <doc>Send the IP address of the host to the output port.</doc>
                                </entity>
                                <entity name="FileWriter" class="ptolemy.actor.lib.FileWriter">
                                    <doc>Write an entire file from a string</doc>
                                </entity>
                                <entity name="LineReader" class="ptolemy.actor.lib.io.LineReader">
                                    <doc>Read one line at a time from a text file and output as a string</doc>
                                </entity>
                                <entity name="LineWriter" class="ptolemy.actor.lib.io.LineWriter">
                                    <doc>Write the value of a string token, one per line, to a text file.</doc>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="Logic" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Logic functions</doc>
                                <entity name="Comparator" class="ptolemy.actor.lib.logic.Comparator">
                                    <property name="comparison" class="ptolemy.kernel.util.StringAttribute" value="&gt;">
                                        <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                            <property name="gt" class="ptolemy.kernel.util.StringAttribute" value="&gt;">
                                            </property>
                                            <property name="ge" class="ptolemy.kernel.util.StringAttribute" value="&gt;=">
                                            </property>
                                            <property name="lt" class="ptolemy.kernel.util.StringAttribute" value="&lt;">
                                            </property>
                                            <property name="le" class="ptolemy.kernel.util.StringAttribute" value="&lt;=">
                                            </property>
                                            <property name="eq" class="ptolemy.kernel.util.StringAttribute" value="==">
                                            </property>
                                        </property>
                                    </property>
                                    <property name="_icon" class="ptolemy.vergil.icon.AttributeValueIcon">
                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="comparison">
                                        </property>
                                    </property>
                                </entity>
                                <entity name="Equals" class="ptolemy.actor.lib.logic.Equals">
                                </entity>
                                <entity name="IsPresent" class="ptolemy.actor.lib.logic.IsPresent">
                                </entity>
                                <entity name="LogicalNot" class="ptolemy.actor.lib.logic.LogicalNot">
                                </entity>
                                <entity name="LogicGate" class="ptolemy.actor.lib.logic.LogicGate">
                                    <property name="LogicGate_Icon" class="ptolemy.vergil.icon.EditorIcon">
                                        <property name="polygon" class="ptolemy.vergil.kernel.attributes.ResizablePolygonAttribute">
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[9.0, 0.0]">
                                            </property>
                                            <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 0.0}">
                                            </property>
                                            <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 35">
                                            </property>
                                            <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 41">
                                            </property>
                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                            </property>
                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                            </property>
                                            <property name="vertices" class="ptolemy.data.expr.Parameter" value="{0.0, 0.0, 35.0, 20.0, 0.0, 40.0}">
                                            </property>
                                            <property name="_renderFirst" class="ptolemy.kernel.util.SingletonAttribute">
                                            </property>
                                        </property>
                                        <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                            </property>
                                            <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 0.0}">
                                            </property>
                                            <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                            </property>
                                            <property name="height" class="ptolemy.data.expr.Parameter" value="40">
                                            </property>
                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="false">
                                            </property>
                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                            </property>
                                        </property>
                                        <property name="arc" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[-14.0, -20.0]">
                                            </property>
                                            <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 1.0} : {0.0, 0.0, 0.0, 0.0}">
                                            </property>
                                            <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                            </property>
                                            <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                            </property>
                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="false">
                                                <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                    <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                    </property>
                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                    </property>
                                                </property>
                                            </property>
                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                            </property>
                                            <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                            </property>
                                            <property name="start" class="ptolemy.data.expr.Parameter" value="90.0">
                                            </property>
                                            <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? -180.0 : -60.0">
                                            </property>
                                        </property>
                                        <property name="arc2" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="{9.0, -10.0}">
                                            </property>
                                            <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 0.0} : {0.0, 0.0, 0.0, 1.0}">
                                            </property>
                                            <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                            </property>
                                            <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                            </property>
                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                    <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                    </property>
                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                    </property>
                                                </property>
                                            </property>
                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                            </property>
                                            <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                            </property>
                                            <property name="start" class="ptolemy.data.expr.Parameter" value="90.0">
                                            </property>
                                            <property name="extent" class="ptolemy.data.expr.Parameter" value="-60.0">
                                            </property>
                                        </property>
                                        <property name="arc3" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[9.0, 10.0]">
                                            </property>
                                            <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 0.0} : {0.0, 0.0, 0.0, 1.0}">
                                            </property>
                                            <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                            </property>
                                            <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                            </property>
                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                    <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                    </property>
                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                    </property>
                                                </property>
                                            </property>
                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                            </property>
                                            <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                            </property>
                                            <property name="start" class="ptolemy.data.expr.Parameter" value="-90.0">
                                            </property>
                                            <property name="extent" class="ptolemy.data.expr.Parameter" value="60.0">
                                            </property>
                                        </property>
                                        <property name="arc6" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[33.0, 0.0]">
                                            </property>
                                            <property name="width" class="ptolemy.data.expr.Parameter" value="14">
                                            </property>
                                            <property name="height" class="ptolemy.data.expr.Parameter" value="14">
                                            </property>
                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                            </property>
                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                            </property>
                                            <property name="type" class="ptolemy.data.expr.StringParameter" value="chord">
                                            </property>
                                            <property name="start" class="ptolemy.data.expr.Parameter" value="-180.0">
                                            </property>
                                            <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;nor&quot; || logic == &quot;nand&quot; || logic == &quot;xnor&quot;) ? 360.0 : 0.0">
                                            </property>
                                        </property>
                                        <property name="line" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                            </property>
                                            <property name="x" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                            </property>
                                            <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                            </property>
                                        </property>
                                        <property name="line2" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, 20.0]">
                                            </property>
                                            <property name="x" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                            </property>
                                            <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                            </property>
                                        </property>
                                        <property name="line3" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                            </property>
                                            <property name="x" class="ptolemy.data.expr.Parameter" value="0.0">
                                            </property>
                                            <property name="y" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                            </property>
                                        </property>
                                        <property name="arc4" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[-20.0, 0.0]">
                                            </property>
                                            <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                            </property>
                                            <property name="height" class="ptolemy.data.expr.Parameter" value="45">
                                            </property>
                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                            </property>
                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                            </property>
                                            <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                            </property>
                                            <property name="start" class="ptolemy.data.expr.Parameter" value="-60.0">
                                            </property>
                                            <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 120.0">
                                            </property>
                                        </property>
                                        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={130, 353, 934, 634}, maximized=false}">
                                        </property>
                                        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
                                        </property>
                                        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="4.0">
                                        </property>
                                        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{12.5, 9.25}">
                                        </property>
                                        <property name="arc5" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[-25.0, 0.0]">
                                            </property>
                                            <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;xnor&quot; || logic == &quot;xor&quot;) ? {0.0, 0.0, 0.0, 1.0} : {0.0, 0.0, 0.0, 0.0}">
                                            </property>
                                            <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                            </property>
                                            <property name="height" class="ptolemy.data.expr.Parameter" value="45">
                                            </property>
                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                            </property>
                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 0.0}">
                                            </property>
                                            <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                            </property>
                                            <property name="start" class="ptolemy.data.expr.Parameter" value="-60.0">
                                            </property>
                                            <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;xnor&quot; || logic == &quot;xor&quot;) ? 120.0 : 0">
                                            </property>
                                        </property>
                                        <property name="ParameterValue" class="ptolemy.vergil.kernel.attributes.AttributeExpressionAttribute">
                                            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="logic">
                                            </property>
                                            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="6">
                                            </property>
                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[-18.0, -9.0]">
                                            </property>
                                            <property name="_renderLast" class="ptolemy.kernel.util.SingletonAttribute">
                                            </property>
                                        </property>
                                    </property>
                                </entity>
                                <entity name="TrueGate" class="ptolemy.actor.lib.logic.TrueGate">
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="Math" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Arithmetic and mathematical functions</doc>
                                <entity name="AbsoluteValue" class="ptolemy.actor.lib.AbsoluteValue">
                                </entity>
                                <entity name="AddSubtract" class="ptolemy.actor.lib.AddSubtract">
                                </entity>
                                <entity name="Accumulator" class="ptolemy.actor.lib.Accumulator">
                                </entity>
                                <entity name="Average" class="ptolemy.actor.lib.Average">
                                </entity>
                                <entity name="Counter" class="ptolemy.actor.lib.Counter">
                                </entity>
                                <entity name="Differential" class="ptolemy.actor.lib.Differential">
                                </entity>
                                <entity name="DotProduct" class="ptolemy.domains.sdf.lib.DotProduct">
                                </entity>
                                <entity name="Expression" class="ptolemy.actor.lib.Expression">
                                    <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                                        </property>
                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                                        </property>
                                        <property name="displayHeight" class="ptolemy.data.expr.Parameter" value="10">
                                        </property>
                                    </property>
                                </entity>
                                <entity name="Limiter" class="ptolemy.actor.lib.Limiter">
                                </entity>
                                <entity name="LookupTable" class="ptolemy.actor.lib.LookupTable">
                                </entity>
                                <entity name="Maximum" class="ptolemy.actor.lib.Maximum">
                                </entity>
                                <entity name="Minimum" class="ptolemy.actor.lib.Minimum">
                                </entity>
                                <entity name="MovingAverage" class="ptolemy.actor.lib.MovingAverage">
                                </entity>
                                <entity name="MultiplyDivide" class="ptolemy.actor.lib.MultiplyDivide">
                                </entity>
                                <entity name="Quantizer" class="ptolemy.actor.lib.Quantizer">
                                </entity>
                                <entity name="Remainder" class="ptolemy.actor.lib.Remainder">
                                </entity>
                                <entity name="RunningMaximum" class="ptolemy.actor.lib.RunningMaximum">
                                </entity>
                                <entity name="RunningMinimum" class="ptolemy.actor.lib.RunningMinimum">
                                </entity>
                                <entity name="Scale" class="ptolemy.actor.lib.Scale">
                                    <property name="_icon" class="ptolemy.vergil.icon.AttributeValueIcon">
                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="factor">
                                        </property>
                                    </property>
                                </entity>
                                <entity name="TrigFunction" class="ptolemy.actor.lib.TrigFunction">
                                    <property name="_icon" class="ptolemy.vergil.icon.AttributeValueIcon">
                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="function">
                                        </property>
                                    </property>
                                </entity>
                                <entity name="UnaryMathFunction" class="ptolemy.actor.lib.UnaryMathFunction">
                                    <property name="_icon" class="ptolemy.vergil.icon.AttributeValueIcon">
                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="function">
                                        </property>
                                    </property>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="Matrix" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>matrix actors</doc>
                                <entity name="ArrayToMatrix" class="ptolemy.actor.lib.ArrayToMatrix">
                                </entity>
                                <entity name="MatrixJoin" class="ptolemy.domains.sdf.lib.MatrixJoin">
                                </entity>
                                <entity name="MatrixSplit" class="ptolemy.domains.sdf.lib.MatrixSplit">
                                </entity>
                                <entity name="MatrixToArray" class="ptolemy.actor.lib.MatrixToArray">
                                </entity>
                                <entity name="MatrixToSequence" class="ptolemy.domains.sdf.lib.MatrixToSequence">
                                </entity>
                                <entity name="MatrixViewer" class="ptolemy.actor.lib.gui.MatrixViewer">
                                    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                    </property>
                                    <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
                                    </property>
                                </entity>
                                <entity name="SequenceToMatrix" class="ptolemy.domains.sdf.lib.SequenceToMatrix">
                                </entity>
                                <entity name="SubMatrix" class="ptolemy.actor.lib.SubMatrix">
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="Random" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Actors that generate random data.</doc>
                                <entity name="Bernoulli" class="ptolemy.actor.lib.Bernoulli">
                                    <doc>Create a sequence of bernoulli random variables</doc>
                                </entity>
                                <entity name="DiscreteRandomSource" class="ptolemy.actor.lib.DiscreteRandomSource">
                                </entity>
                                <entity name="Gaussian" class="ptolemy.actor.lib.Gaussian">
                                    <doc>Create a sequence of gaussian random variables</doc>
                                </entity>
                                <entity name="RandomInteger" class="ptolemy.actor.lib.RandomInteger">
                                    <doc>Create a sequence of integers that are uniformly sampled from the range 32-bit integers</doc>
                                </entity>
                                <entity name="Rician" class="ptolemy.actor.lib.Rician">
                                    <doc>Create an array of rician random variables</doc>
                                </entity>
                                <entity name="Triangular" class="ptolemy.actor.lib.Triangular">
                                    <doc>Create a sequence of random numbers with a triangular distribution</doc>
                                </entity>
                                <entity name="Uniform" class="ptolemy.actor.lib.Uniform">
                                    <doc>Create a sequence of uniformly distributed random numbers</doc>
                                </entity>
                                <entity name="Colt" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Actors that generate random data.</doc>
                                            <entity name="ColtBeta" class="ptolemy.actor.lib.colt.ColtBeta">
                                                <doc>Create a sequence of Beta random variables</doc>
                                            </entity>
                                            <entity name="ColtBinomial" class="ptolemy.actor.lib.colt.ColtBinomial">
                                                <doc>Create a sequence of Binomial random variables</doc>
                                            </entity>
                                            <entity name="ColtBinomialSelector" class="ptolemy.actor.lib.colt.ColtBinomialSelector">
                                                <doc> Assign trials from several populations using a&#10;	conditional Binomial selection process.</doc>
                                            </entity>
                                            <entity name="ColtBreitWigner" class="ptolemy.actor.lib.colt.ColtBreitWigner">
                                                <doc>Create a sequence of BreitWigner random variables</doc>
                                            </entity>
                                            <entity name="ColtChiSquare" class="ptolemy.actor.lib.colt.ColtChiSquare">
                                                <doc>Create a sequence of ChiSquare random variables</doc>
                                            </entity>
                                            <entity name="ColtExponential" class="ptolemy.actor.lib.colt.ColtExponential">
                                                <doc>Create a sequence of Exponential random variables</doc>
                                            </entity>
                                            <entity name="ColtExponentialPower" class="ptolemy.actor.lib.colt.ColtExponentialPower">
                                                <doc>Create a sequence of Exponential Power random variables</doc>
                                            </entity>
                                            <entity name="ColtGamma" class="ptolemy.actor.lib.colt.ColtGamma">
                                                <doc>Create a sequence of Gamma random variables</doc>
                                            </entity>
                                            <entity name="ColtHyperGeometric" class="ptolemy.actor.lib.colt.ColtHyperGeometric">
                                                <doc>Create a sequence of HyperGeometric random variables</doc>
                                            </entity>
                                            <entity name="ColtLogarithmic" class="ptolemy.actor.lib.colt.ColtLogarithmic">
                                                <doc>Create a sequence of Logarithmic random variables</doc>
                                            </entity>
                                            <entity name="ColtNegativeBinomial" class="ptolemy.actor.lib.colt.ColtNegativeBinomial">
                                                <doc>Create a sequence of Negative Binomial random variables</doc>
                                            </entity>
                                            <entity name="ColtNormal" class="ptolemy.actor.lib.colt.ColtNormal">
                                                <doc>Create a sequence of Normal random variables</doc>
                                            </entity>
                                            <entity name="ColtPoisson" class="ptolemy.actor.lib.colt.ColtPoisson">
                                                <doc>Create a sequence of Poisson random variables</doc>
                                            </entity>
                                            <entity name="ColtPoissonSlow" class="ptolemy.actor.lib.colt.ColtPoissonSlow">
                                                <doc>Create a sequence of PoissonSlow random variables</doc>
                                            </entity>
                                            <entity name="ColtStudentT" class="ptolemy.actor.lib.colt.ColtStudentT">
                                                <doc>Create a sequence of StudentT random variables</doc>
                                            </entity>
                                            <entity name="ColtVonMises" class="ptolemy.actor.lib.colt.ColtVonMises">
                                                <doc>Create a sequence of VonMises random variables</doc>
                                            </entity>
                                            <entity name="ColtZeta" class="ptolemy.actor.lib.colt.ColtZeta">
                                                <doc>Create a sequence of Zeta random variables</doc>
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="RealTime" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Real Time Actors</doc>
                                <property name="SynchronizeToRealTime" class="ptolemy.actor.lib.SynchronizeToRealTime">
                                </property>
                                <entity name="DelayStart" class="ptolemy.actor.lib.DelayStart">
                                    <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="startTime">
                                        </property>
                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
                                        </property>
                                    </property>
                                </entity>
                                <entity name="ExecutionTime" class="ptolemy.actor.lib.ExecutionTime">
                                </entity>
                                <entity name="RealTimePlotter" class="ptolemy.actor.lib.gui.RealTimePlotter">
                                    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                    </property>
                                    <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute">
                                    </property>
                                </entity>
                                <entity name="Sleep" class="ptolemy.actor.lib.Sleep">
                                    <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="sleepTime">
                                        </property>
                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
                                        </property>
                                    </property>
                                </entity>
                                <entity name="VariableSleep" class="ptolemy.actor.lib.VariableSleep">
                                </entity>
                                <entity name="WallClockTime" class="ptolemy.actor.lib.WallClockTime">
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="SignalProcessing" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Signal processing actors</doc>
                                <entity name="Audio" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Audio actors</doc>
                                            <entity name="AudioCapture" class="ptolemy.actor.lib.javasound.AudioCapture">
                                                <property name="sampleRate" class="ptolemy.actor.parameters.SharedParameter" value="8000">
                                                    <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                                        <property name="8000" class="ptolemy.kernel.util.StringAttribute" value="8000">
                                                        </property>
                                                        <property name="11025" class="ptolemy.kernel.util.StringAttribute" value="11025">
                                                        </property>
                                                        <property name="22050" class="ptolemy.kernel.util.StringAttribute" value="22050">
                                                        </property>
                                                        <property name="44100" class="ptolemy.kernel.util.StringAttribute" value="44100">
                                                        </property>
                                                        <property name="48000" class="ptolemy.kernel.util.StringAttribute" value="48000">
                                                        </property>
                                                    </property>
                                                </property>
                                                <property name="bitsPerSample" class="ptolemy.actor.parameters.SharedParameter" value="16">
                                                    <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                                        <property name="8" class="ptolemy.kernel.util.StringAttribute" value="8">
                                                        </property>
                                                        <property name="16" class="ptolemy.kernel.util.StringAttribute" value="16">
                                                        </property>
                                                    </property>
                                                </property>
                                                <property name="channels" class="ptolemy.actor.parameters.SharedParameter" value="1">
                                                    <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                                        <property name="1" class="ptolemy.kernel.util.StringAttribute" value="1">
                                                        </property>
                                                        <property name="2" class="ptolemy.kernel.util.StringAttribute" value="2">
                                                        </property>
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="AudioReader" class="ptolemy.actor.lib.javasound.AudioReader">
                                            </entity>
                                            <entity name="AudioPlayer" class="ptolemy.actor.lib.javasound.AudioPlayer">
                                                <property name="sampleRate" class="ptolemy.actor.parameters.SharedParameter" value="8000">
                                                    <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                                        <property name="8000" class="ptolemy.kernel.util.StringAttribute" value="8000">
                                                        </property>
                                                        <property name="11025" class="ptolemy.kernel.util.StringAttribute" value="11025">
                                                        </property>
                                                        <property name="22050" class="ptolemy.kernel.util.StringAttribute" value="22050">
                                                        </property>
                                                        <property name="44100" class="ptolemy.kernel.util.StringAttribute" value="44100">
                                                        </property>
                                                        <property name="48000" class="ptolemy.kernel.util.StringAttribute" value="48000">
                                                        </property>
                                                    </property>
                                                </property>
                                                <property name="bitsPerSample" class="ptolemy.actor.parameters.SharedParameter" value="16">
                                                    <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                                        <property name="8" class="ptolemy.kernel.util.StringAttribute" value="8">
                                                        </property>
                                                        <property name="16" class="ptolemy.kernel.util.StringAttribute" value="16">
                                                        </property>
                                                    </property>
                                                </property>
                                                <property name="channels" class="ptolemy.actor.parameters.SharedParameter" value="1">
                                                    <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                                        <property name="1" class="ptolemy.kernel.util.StringAttribute" value="1">
                                                        </property>
                                                        <property name="2" class="ptolemy.kernel.util.StringAttribute" value="2">
                                                        </property>
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="AudioWriter" class="ptolemy.actor.lib.javasound.AudioWriter">
                                                <property name="sampleRate" class="ptolemy.data.expr.Parameter" value="8000">
                                                    <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                                        <property name="8000" class="ptolemy.kernel.util.StringAttribute" value="8000">
                                                        </property>
                                                        <property name="11025" class="ptolemy.kernel.util.StringAttribute" value="11025">
                                                        </property>
                                                        <property name="22050" class="ptolemy.kernel.util.StringAttribute" value="22050">
                                                        </property>
                                                        <property name="44100" class="ptolemy.kernel.util.StringAttribute" value="44100">
                                                        </property>
                                                        <property name="48000" class="ptolemy.kernel.util.StringAttribute" value="48000">
                                                        </property>
                                                    </property>
                                                </property>
                                                <property name="bitsPerSample" class="ptolemy.data.expr.Parameter" value="16">
                                                    <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                                        <property name="8" class="ptolemy.kernel.util.StringAttribute" value="8">
                                                        </property>
                                                        <property name="16" class="ptolemy.kernel.util.StringAttribute" value="16">
                                                        </property>
                                                    </property>
                                                </property>
                                                <property name="channels" class="ptolemy.data.expr.Parameter" value="1">
                                                    <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                                        <property name="1" class="ptolemy.kernel.util.StringAttribute" value="1">
                                                        </property>
                                                        <property name="2" class="ptolemy.kernel.util.StringAttribute" value="2">
                                                        </property>
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="ClipPlayer" class="ptolemy.actor.lib.javasound.ClipPlayer">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="communications" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <entity name="ConvolutionalCoder" class="ptolemy.actor.lib.comm.ConvolutionalCoder">
                                                <port name="input" class="ptolemy.actor.TypedIOPort">
                                                    <property name="input"/>
                                                    <property name="tokenConsumptionRate" class="ptolemy.data.expr.Parameter" value="1">
                                                    </property>
                                                </port>
                                                <port name="output" class="ptolemy.actor.TypedIOPort">
                                                    <property name="output"/>
                                                    <property name="tokenProductionRate" class="ptolemy.data.expr.Parameter" value="2">
                                                    </property>
                                                </port>
                                            </entity>
                                            <entity name="DeScrambler" class="ptolemy.actor.lib.comm.DeScrambler">
                                            </entity>
                                            <entity name="HadamardCode" class="ptolemy.actor.lib.comm.HadamardCode">
                                            </entity>
                                            <entity name="HammingCoder" class="ptolemy.actor.lib.comm.HammingCoder">
                                                <port name="input" class="ptolemy.actor.TypedIOPort">
                                                    <property name="input"/>
                                                    <property name="tokenConsumptionRate" class="ptolemy.data.expr.Parameter" value="4">
                                                    </property>
                                                </port>
                                                <port name="output" class="ptolemy.actor.TypedIOPort">
                                                    <property name="output"/>
                                                    <property name="tokenProductionRate" class="ptolemy.data.expr.Parameter" value="7">
                                                    </property>
                                                </port>
                                            </entity>
                                            <entity name="HammingDecoder" class="ptolemy.actor.lib.comm.HammingDecoder">
                                                <port name="input" class="ptolemy.actor.TypedIOPort">
                                                    <property name="input"/>
                                                    <property name="tokenConsumptionRate" class="ptolemy.data.expr.Parameter" value="7">
                                                    </property>
                                                </port>
                                                <port name="output" class="ptolemy.actor.TypedIOPort">
                                                    <property name="output"/>
                                                    <property name="tokenProductionRate" class="ptolemy.data.expr.Parameter" value="4">
                                                    </property>
                                                </port>
                                            </entity>
                                            <entity name="HuffmanCoder" class="ptolemy.actor.lib.comm.HuffmanCoder">
                                            </entity>
                                            <entity name="HuffmanDecoder" class="ptolemy.actor.lib.comm.HuffmanDecoder">
                                            </entity>
                                            <entity name="LempelZivCoder" class="ptolemy.actor.lib.comm.LempelZivCoder">
                                            </entity>
                                            <entity name="LempelZIvDecoder" class="ptolemy.actor.lib.comm.LempelZivDecoder">
                                            </entity>
                                            <entity name="LineCoder" class="ptolemy.domains.sdf.lib.LineCoder">
                                            </entity>
                                            <entity name="LMSAdaptive" class="ptolemy.domains.sdf.lib.LMSAdaptive">
                                                <property name="taps" class="ptolemy.data.expr.Parameter" value="{1.0, 0.0, 0.0, 0.0}">
                                                </property>
                                            </entity>
                                            <entity name="RaisedCosine" class="ptolemy.domains.sdf.lib.RaisedCosine">
                                            </entity>
                                            <entity name="Scrambler" class="ptolemy.actor.lib.comm.Scrambler">
                                            </entity>
                                            <entity name="Slicer" class="ptolemy.actor.lib.comm.Slicer">
                                            </entity>
                                            <entity name="TrellisDecoder" class="ptolemy.actor.lib.comm.TrellisDecoder">
                                                <port name="output" class="ptolemy.actor.TypedIOPort">
                                                    <property name="output"/>
                                                    <property name="tokenProductionRate" class="ptolemy.data.expr.Parameter" value="1">
                                                    </property>
                                                </port>
                                            </entity>
                                            <entity name="ViterbiDecoder" class="ptolemy.actor.lib.comm.ViterbiDecoder">
                                                <port name="input" class="ptolemy.actor.TypedIOPort">
                                                    <property name="input"/>
                                                    <property name="tokenConsumptionRate" class="ptolemy.data.expr.Parameter" value="2">
                                                    </property>
                                                </port>
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="Filtering" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <entity name="DelayLine" class="ptolemy.domains.sdf.lib.DelayLine">
                                            </entity>
                                            <entity name="DownSample" class="ptolemy.domains.sdf.lib.DownSample">
                                            </entity>
                                            <entity name="FIR" class="ptolemy.domains.sdf.lib.FIR">
                                            </entity>
                                            <entity name="GradientAdaptiveLattice" class="ptolemy.actor.lib.GradientAdaptiveLattice">
                                            </entity>
                                            <entity name="IIR" class="ptolemy.actor.lib.IIR">
                                            </entity>
                                            <entity name="Lattice" class="ptolemy.actor.lib.Lattice">
                                            </entity>
                                            <entity name="LinearDifferenceEquationSystem" class="ptolemy.actor.lib.LinearDifferenceEquationSystem">
                                            </entity>
                                            <entity name="LMSAdaptive" class="ptolemy.domains.sdf.lib.LMSAdaptive">
                                                <property name="taps" class="ptolemy.data.expr.Parameter" value="{1.0, 0.0, 0.0, 0.0}">
                                                </property>
                                            </entity>
                                            <entity name="RecursiveLattice" class="ptolemy.actor.lib.RecursiveLattice">
                                            </entity>
                                            <entity name="UpSample" class="ptolemy.domains.sdf.lib.UpSample">
                                            </entity>
                                            <entity name="VariableFIR" class="ptolemy.domains.sdf.lib.VariableFIR">
                                            </entity>
                                            <entity name="VariableLattice" class="ptolemy.domains.sdf.lib.VariableLattice">
                                            </entity>
                                            <entity name="VariableRecursiveLattice" class="ptolemy.domains.sdf.lib.VariableRecursiveLattice">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="Spectrum" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <entity name="DB" class="ptolemy.actor.lib.DB">
                                            </entity>
                                            <entity name="FFT" class="ptolemy.domains.sdf.lib.FFT">
                                            </entity>
                                            <entity name="IFFT" class="ptolemy.domains.sdf.lib.IFFT">
                                            </entity>
                                            <entity name="LevinsonDurbin" class="ptolemy.actor.lib.LevinsonDurbin">
                                            </entity>
                                            <entity name="MaximumEntropySpectrum" class="ptolemy.domains.sdf.lib.MaximumEntropySpectrum">
                                            </entity>
                                            <entity name="PhaseUnwrap" class="ptolemy.actor.lib.PhaseUnwrap">
                                            </entity>
                                            <entity name="SmoothedPeriodogram" class="ptolemy.domains.sdf.lib.SmoothedPeriodogram">
                                            </entity>
                                            <entity name="Spectrum" class="ptolemy.domains.sdf.lib.Spectrum">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="Statistical" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <entity name="Autocorrelation" class="ptolemy.domains.sdf.lib.Autocorrelation">
                                            </entity>
                                            <entity name="ComputeHistogram" class="ptolemy.actor.lib.ComputeHistogram">
                                            </entity>
                                            <entity name="PowerEstimate" class="ptolemy.actor.lib.PowerEstimate">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="String" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <entity name="StringCompare" class="ptolemy.actor.lib.string.StringCompare">
                                    <doc>Output a comparison function of two strings</doc>
                                    <property name="_icon" class="ptolemy.vergil.icon.AttributeValueIcon">
                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="function">
                                        </property>
                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="10">
                                        </property>
                                    </property>
                                </entity>
                                <entity name="StringFunction" class="ptolemy.actor.lib.string.StringFunction">
                                    <doc>Trim a string, convert a string to uppercase, or convert a string to&#10;            lowercase depending on the user's selection.</doc>
                                    <property name="_icon" class="ptolemy.vergil.icon.AttributeValueIcon">
                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="function">
                                        </property>
                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="11">
                                        </property>
                                    </property>
                                </entity>
                                <entity name="StringIndexOf" class="ptolemy.actor.lib.string.StringIndexOf">
                                    <doc>Output the length of an input string</doc>
                                </entity>
                                <entity name="StringLength" class="ptolemy.actor.lib.string.StringLength">
                                    <doc>Output the length of an input string</doc>
                                </entity>
                                <entity name="StringMatches" class="ptolemy.actor.lib.string.StringMatches">
                                    <doc>Determine if a string matches a regular expression</doc>
                                </entity>
                                <entity name="StringReplace" class="ptolemy.actor.lib.string.StringReplace">
                                    <doc>Replace the patterns that match a regular expression</doc>
                                </entity>
                                <entity name="StringSplit" class="ptolemy.actor.lib.string.StringSplit">
                                    <doc>Split a string into an array of strings</doc>
                                </entity>
                                <entity name="StringSubstring" class="ptolemy.actor.lib.string.StringSubstring">
                                    <doc>Output a substring of an input string</doc>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="DomainSpecific" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Common Domain Specific Actors</doc>
                                <entity name="Continuous" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Continuous actors</doc>
                                            <entity name="Signal Generators" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="ContinuousClock" class="ptolemy.domains.continuous.lib.ContinuousClock">
                                                        </entity>
                                                        <entity name="ContinuousSinewave" class="ptolemy.domains.continuous.lib.ContinuousSinewave">
                                                        </entity>
                                                        <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
                                                        </entity>
                                                        <entity name="PWM" class="ptolemy.domains.continuous.lib.PWM">
                                                        </entity>
                                                        <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
                                                        </entity>
                                                        <entity name="Waveform" class="ptolemy.domains.continuous.lib.Waveform">
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="Continuous to Discrete" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="LevelCrossingDetector" class="ptolemy.domains.continuous.lib.LevelCrossingDetector">
                                                        </entity>
                                                        <entity name="PeriodicSampler" class="ptolemy.domains.continuous.lib.PeriodicSampler">
                                                        </entity>
                                                        <entity name="Sampler" class="ptolemy.actor.lib.Sampler">
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="Discrete to Continuous" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="ZeroOrderHold" class="ptolemy.domains.continuous.lib.ZeroOrderHold">
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="Dynamics" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="ContinuousTransferFunction" class="ptolemy.domains.continuous.lib.ContinuousTransferFunction">
                                                        </entity>
                                                        <entity name="DCMotor" class="ptolemy.domains.continuous.lib.DCMotor">
                                                        </entity>
                                                        <entity name="Derivative" class="ptolemy.domains.continuous.lib.Derivative">
                                                        </entity>
                                                        <entity name="DifferentialSystem" class="ptolemy.domains.continuous.lib.DifferentialSystem">
                                                        </entity>
                                                        <entity name="Integrator" class="ptolemy.domains.continuous.lib.Integrator">
                                                        </entity>
                                                        <entity name="LinearStateSpace" class="ptolemy.domains.continuous.lib.LinearStateSpace">
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="Random" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="BandlimitedNoise" class="ptolemy.domains.continuous.lib.BandlimitedNoise">
                                                        </entity>
                                                        <entity name="ContinuousSpectrum" class="ptolemy.domains.continuous.lib.ContinuousSpectrum">
                                                            <entity name="Frequency Domain Display" class="ptolemy.actor.lib.gui.SequencePlotter">
                                                                <configure>
<?plotml <!DOCTYPE plot PUBLIC "-//UC Berkeley//DTD PlotML 1//EN"
"http://ptolemy.eecs.berkeley.edu/xml/dtd/PlotML_1.dtd">
<plot>
<title>Spectrum</title>
<xLabel>frequency</xLabel>
<yLabel>dB</yLabel>
<xRange min="-50.0" max="49.9755859375"/>
<yRange min="-100.0" max="30.163494159740733"/>
<noGrid/>
</plot>?>
                                                                </configure>
                                                            </entity>
                                                        </entity>
                                                        <entity name="Noise" class="ptolemy.domains.continuous.lib.Noise">
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="Miscellaneous" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
                                                        </entity>
                                                        <entity name="ResettableTimer" class="ptolemy.actor.lib.ResettableTimer">
                                                        </entity>
                                                        <entity name="ContinuousMerge" class="ptolemy.domains.continuous.lib.ContinuousMerge">
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="DynamicDataFlow" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Dynamic dataflow actors</doc>
                                            <entity name="ActorRecursion" class="ptolemy.domains.ddf.lib.ActorRecursion">
                                            </entity>
                                            <entity name="DDFSingleTokenCommutator" class="ptolemy.domains.ddf.lib.DDFSingleTokenCommutator">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="DiscreteEvent" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Discrete-event actors</doc>
                                            <entity name="Date" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <doc>Date actors</doc>
                                                        <entity name="CurrentDate" class="ptolemy.actor.lib.CurrentDate">
                                                        </entity>
                                                        <entity name="DateElements" class="ptolemy.actor.lib.DateElements">
                                                        </entity>
                                                        <entity name="DateConstructor" class="ptolemy.actor.lib.DateConstructor">
                                                        </entity>
                                                        <entity name="DateToEvent" class="ptolemy.domains.de.lib.DateToEvent">
                                                        </entity>
                                                        <entity name="DateToModelTime" class="ptolemy.domains.de.lib.DateToModelTime">
                                                        </entity>
                                                        <entity name="EventToDate" class="ptolemy.domains.de.lib.EventToDate">
                                                        </entity>
                                                        <entity name="ModifyDate" class="ptolemy.actor.lib.ModifyDate">
                                                        </entity>
                                                        <entity name="StringToDate" class="ptolemy.actor.lib.conversions.StringToDate">
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="AverageOverTime" class="ptolemy.domains.de.lib.AverageOverTime">
                                            </entity>
                                            <entity name="Derivative" class="ptolemy.domains.de.lib.Derivative">
                                                <doc>Discrete derivative.</doc>
                                            </entity>
                                            <entity name="EventButton" class="ptolemy.actor.lib.gui.EventButton">
                                            </entity>
                                            <entity name="EventFilter" class="ptolemy.domains.de.lib.EventFilter">
                                            </entity>
                                            <entity name="Inhibit" class="ptolemy.domains.de.lib.Inhibit">
                                            </entity>
                                            <entity name="Integrator" class="ptolemy.domains.de.lib.Integrator">
                                                <doc>Discrete integrator.</doc>
                                            </entity>
                                            <entity name="Merge" class="ptolemy.domains.de.lib.Merge">
                                            </entity>
                                            <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
                                            </entity>
                                            <entity name="MostRecent" class="ptolemy.domains.de.lib.MostRecent">
                                            </entity>
                                            <entity name="PID" class="ptolemy.domains.de.lib.PID">
                                                <doc>Discrete proportional, integral, and derivative controller.</doc>
                                            </entity>
                                            <entity name="Previous" class="ptolemy.domains.de.lib.Previous">
                                            </entity>
                                            <entity name="Queue" class="ptolemy.domains.de.lib.Queue">
                                            </entity>
                                            <entity name="Register" class="ptolemy.domains.de.lib.Register">
                                            </entity>
                                            <entity name="ResettableTimer" class="ptolemy.actor.lib.ResettableTimer">
                                            </entity>
                                            <entity name="Server" class="ptolemy.domains.de.lib.Server">
                                            </entity>
                                            <entity name="SharedQueue" class="ptolemy.domains.de.lib.SharedQueue">
                                            </entity>
                                            <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
                                            </entity>
                                            <entity name="TimeCompare" class="ptolemy.domains.de.lib.TimeCompare">
                                            </entity>
                                            <entity name="TimeDelay" class="ptolemy.actor.lib.TimeDelay">
                                            </entity>
                                            <entity name="TimeGap" class="ptolemy.domains.de.lib.TimeGap">
                                            </entity>
                                            <entity name="WaitingTime" class="ptolemy.domains.de.lib.WaitingTime">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="ProcessNetworks" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Process Network actors</doc>
                                            <entity name="NondeterministicMerge" class="ptolemy.domains.pn.kernel.NondeterministicMerge">
                                            </entity>
                                            <entity name="OrderedMerge" class="ptolemy.actor.lib.OrderedMerge">
                                            </entity>
                                            <entity name="Sequencer" class="ptolemy.actor.lib.Sequencer">
                                            </entity>
                                            <entity name="Starver" class="ptolemy.domains.pn.lib.Starver">
                                            </entity>
                                            <entity name="Stop" class="ptolemy.actor.lib.Stop">
                                            </entity>
                                            <entity name="Synchronizer" class="ptolemy.actor.lib.Synchronizer">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="Rendezvous" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Rendezvous actors</doc>
                                            <property name="SuppressDeadlockReporting" class="ptolemy.data.expr.Parameter" value="true">
                                                <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                                </property>
                                                <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                                    <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                                                    </property>
                                                </property>
                                                <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                    <configure>
              <svg>
                <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-D-</text>
              </svg>
            </configure>
                                                </property>
                                                <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                                </property>
                                            </property>
                                            <entity name="Barrier" class="ptolemy.domains.rendezvous.lib.Barrier">
                                            </entity>
                                            <entity name="Buffer" class="ptolemy.domains.rendezvous.lib.Buffer">
                                            </entity>
                                            <entity name="Merge" class="ptolemy.domains.rendezvous.lib.Merge">
                                            </entity>
                                            <entity name="ResourcePool" class="ptolemy.domains.rendezvous.lib.ResourcePool">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="SynchronousReactive" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Synchronous-reactive actors</doc>
                                            <entity name="Absent" class="ptolemy.domains.sr.lib.Absent">
                                                <property name="outputType" class="ptolemy.kernel.util.StringAttribute" value="int">
                                                    <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                                                        <property name="boolean" class="ptolemy.kernel.util.StringAttribute" value="boolean">
                                                        </property>
                                                        <property name="complex" class="ptolemy.kernel.util.StringAttribute" value="complex">
                                                        </property>
                                                        <property name="double" class="ptolemy.kernel.util.StringAttribute" value="double">
                                                        </property>
                                                        <property name="fix" class="ptolemy.kernel.util.StringAttribute" value="fix">
                                                        </property>
                                                        <property name="int" class="ptolemy.kernel.util.StringAttribute" value="int">
                                                        </property>
                                                        <property name="long" class="ptolemy.kernel.util.StringAttribute" value="long">
                                                        </property>
                                                        <property name="string" class="ptolemy.kernel.util.StringAttribute" value="string">
                                                        </property>
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="Current" class="ptolemy.domains.sr.lib.Current">
                                            </entity>
                                            <entity name="Default" class="ptolemy.actor.lib.Default">
                                            </entity>
                                            <entity name="EnabledComposite" class="ptolemy.domains.sr.lib.EnabledComposite">
                                            </entity>
                                            <entity name="InstantaneousDialogGenerator" class="ptolemy.domains.sr.lib.InstantaneousDialogGenerator">
                                            </entity>
                                            <entity name="IsPresent" class="ptolemy.actor.lib.logic.IsPresent">
                                            </entity>
                                            <entity name="NonStrictDelay" class="ptolemy.domains.sr.lib.NonStrictDelay">
                                                <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                                    <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="initialValue">
                                                    </property>
                                                    <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="NonStrictDisplay" class="ptolemy.domains.sr.lib.gui.NonStrictDisplay">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
                                                </property>
                                            </entity>
                                            <entity name="BinaryNonStrictLogicGate" class="ptolemy.domains.sr.lib.BinaryNonStrictLogicGate">
                                                <property name="LogicGate_Icon" class="ptolemy.vergil.icon.EditorIcon">
                                                    <property name="polygon" class="ptolemy.vergil.kernel.attributes.ResizablePolygonAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[9.0, 0.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 35">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 41">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="vertices" class="ptolemy.data.expr.Parameter" value="{0.0, 0.0, 35.0, 20.0, 0.0, 40.0}">
                                                        </property>
                                                        <property name="_renderFirst" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                    <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="40">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="false">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                    </property>
                                                    <property name="arc" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-14.0, -20.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 1.0} : {0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="false">
                                                            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                                </property>
                                                                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                                </property>
                                                            </property>
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="90.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? -180.0 : -60.0">
                                                        </property>
                                                    </property>
                                                    <property name="arc2" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{9.0, -10.0}">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 0.0} : {0.0, 0.0, 0.0, 1.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                                </property>
                                                                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                                </property>
                                                            </property>
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="90.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="-60.0">
                                                        </property>
                                                    </property>
                                                    <property name="arc3" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[9.0, 10.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 0.0} : {0.0, 0.0, 0.0, 1.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                                </property>
                                                                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                                </property>
                                                            </property>
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-90.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="60.0">
                                                        </property>
                                                    </property>
                                                    <property name="arc6" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[33.0, 0.0]">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="14">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="14">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="chord">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-180.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;nor&quot; || logic == &quot;nand&quot; || logic == &quot;xnor&quot;) ? 360.0 : 0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line2" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, 20.0]">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line3" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                                        </property>
                                                    </property>
                                                    <property name="arc4" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-20.0, 0.0]">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="45">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-60.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 120.0">
                                                        </property>
                                                    </property>
                                                    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={130, 353, 934, 634}, maximized=false}">
                                                    </property>
                                                    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
                                                    </property>
                                                    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="4.0">
                                                    </property>
                                                    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{12.5, 9.25}">
                                                    </property>
                                                    <property name="arc5" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-25.0, 0.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;xnor&quot; || logic == &quot;xor&quot;) ? {0.0, 0.0, 0.0, 1.0} : {0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="45">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 0.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-60.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;xnor&quot; || logic == &quot;xor&quot;) ? 120.0 : 0">
                                                        </property>
                                                    </property>
                                                    <property name="ParameterValue" class="ptolemy.vergil.kernel.attributes.AttributeExpressionAttribute">
                                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="logic">
                                                        </property>
                                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="6">
                                                        </property>
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-18.0, -9.0]">
                                                        </property>
                                                        <property name="_renderLast" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="NonStrictLogicGate" class="ptolemy.domains.sr.lib.NonStrictLogicGate">
                                                <property name="LogicGate_Icon" class="ptolemy.vergil.icon.EditorIcon">
                                                    <property name="polygon" class="ptolemy.vergil.kernel.attributes.ResizablePolygonAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[9.0, 0.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 35">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 41">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="vertices" class="ptolemy.data.expr.Parameter" value="{0.0, 0.0, 35.0, 20.0, 0.0, 40.0}">
                                                        </property>
                                                        <property name="_renderFirst" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                    <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="40">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="false">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                    </property>
                                                    <property name="arc" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-14.0, -20.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 1.0} : {0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="false">
                                                            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                                </property>
                                                                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                                </property>
                                                            </property>
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="90.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? -180.0 : -60.0">
                                                        </property>
                                                    </property>
                                                    <property name="arc2" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{9.0, -10.0}">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 0.0} : {0.0, 0.0, 0.0, 1.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                                </property>
                                                                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                                </property>
                                                            </property>
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="90.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="-60.0">
                                                        </property>
                                                    </property>
                                                    <property name="arc3" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[9.0, 10.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 0.0} : {0.0, 0.0, 0.0, 1.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                                </property>
                                                                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                                </property>
                                                            </property>
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-90.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="60.0">
                                                        </property>
                                                    </property>
                                                    <property name="arc6" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[33.0, 0.0]">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="14">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="14">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="chord">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-180.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;nor&quot; || logic == &quot;nand&quot; || logic == &quot;xnor&quot;) ? 360.0 : 0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line2" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, 20.0]">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line3" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                                        </property>
                                                    </property>
                                                    <property name="arc4" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-20.0, 0.0]">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="45">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-60.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 120.0">
                                                        </property>
                                                    </property>
                                                    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={130, 353, 934, 634}, maximized=false}">
                                                    </property>
                                                    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
                                                    </property>
                                                    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="4.0">
                                                    </property>
                                                    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{12.5, 9.25}">
                                                    </property>
                                                    <property name="arc5" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-25.0, 0.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;xnor&quot; || logic == &quot;xor&quot;) ? {0.0, 0.0, 0.0, 1.0} : {0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="45">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 0.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-60.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;xnor&quot; || logic == &quot;xor&quot;) ? 120.0 : 0">
                                                        </property>
                                                    </property>
                                                    <property name="ParameterValue" class="ptolemy.vergil.kernel.attributes.AttributeExpressionAttribute">
                                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="logic">
                                                        </property>
                                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="6">
                                                        </property>
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-18.0, -9.0]">
                                                        </property>
                                                        <property name="_renderLast" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="NonStrictAndGate" class="ptolemy.domains.sr.lib.NonStrictAndGate">
                                                <property name="logic" class="ptolemy.data.expr.StringParameter" value="and">
                                                </property>
                                                <property name="LogicGate_Icon" class="ptolemy.vergil.icon.EditorIcon">
                                                    <property name="polygon" class="ptolemy.vergil.kernel.attributes.ResizablePolygonAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[9.0, 0.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 35">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 41">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="vertices" class="ptolemy.data.expr.Parameter" value="{0.0, 0.0, 35.0, 20.0, 0.0, 40.0}">
                                                        </property>
                                                        <property name="_renderFirst" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                    <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="40">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="false">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                    </property>
                                                    <property name="arc" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-14.0, -20.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 1.0} : {0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="false">
                                                            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                                </property>
                                                                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                                </property>
                                                            </property>
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="90.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? -180.0 : -60.0">
                                                        </property>
                                                    </property>
                                                    <property name="arc2" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{9.0, -10.0}">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 0.0} : {0.0, 0.0, 0.0, 1.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                                </property>
                                                                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                                </property>
                                                            </property>
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="90.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="-60.0">
                                                        </property>
                                                    </property>
                                                    <property name="arc3" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[9.0, 10.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 0.0} : {0.0, 0.0, 0.0, 1.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                                </property>
                                                                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                                </property>
                                                            </property>
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-90.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="60.0">
                                                        </property>
                                                    </property>
                                                    <property name="arc6" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[33.0, 0.0]">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="14">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="14">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="chord">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-180.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;nor&quot; || logic == &quot;nand&quot; || logic == &quot;xnor&quot;) ? 360.0 : 0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line2" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, 20.0]">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line3" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                                        </property>
                                                    </property>
                                                    <property name="arc4" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-20.0, 0.0]">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="45">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-60.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 120.0">
                                                        </property>
                                                    </property>
                                                    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={130, 353, 934, 634}, maximized=false}">
                                                    </property>
                                                    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
                                                    </property>
                                                    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="4.0">
                                                    </property>
                                                    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{12.5, 9.25}">
                                                    </property>
                                                    <property name="arc5" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-25.0, 0.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;xnor&quot; || logic == &quot;xor&quot;) ? {0.0, 0.0, 0.0, 1.0} : {0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="45">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 0.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-60.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;xnor&quot; || logic == &quot;xor&quot;) ? 120.0 : 0">
                                                        </property>
                                                    </property>
                                                    <property name="ParameterValue" class="ptolemy.vergil.kernel.attributes.AttributeExpressionAttribute">
                                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="logic">
                                                        </property>
                                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="6">
                                                        </property>
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-18.0, -9.0]">
                                                        </property>
                                                        <property name="_renderLast" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="NonStrictOrGate" class="ptolemy.domains.sr.lib.NonStrictOrGate">
                                                <property name="logic" class="ptolemy.data.expr.StringParameter" value="or">
                                                </property>
                                                <property name="LogicGate_Icon" class="ptolemy.vergil.icon.EditorIcon">
                                                    <property name="polygon" class="ptolemy.vergil.kernel.attributes.ResizablePolygonAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[9.0, 0.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 35">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 41">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="vertices" class="ptolemy.data.expr.Parameter" value="{0.0, 0.0, 35.0, 20.0, 0.0, 40.0}">
                                                        </property>
                                                        <property name="_renderFirst" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                    <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="40">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="false">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                    </property>
                                                    <property name="arc" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-14.0, -20.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 1.0} : {0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="false">
                                                            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                                </property>
                                                                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                                </property>
                                                            </property>
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="90.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? -180.0 : -60.0">
                                                        </property>
                                                    </property>
                                                    <property name="arc2" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{9.0, -10.0}">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 0.0} : {0.0, 0.0, 0.0, 1.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                                </property>
                                                                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                                </property>
                                                            </property>
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="90.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="-60.0">
                                                        </property>
                                                    </property>
                                                    <property name="arc3" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[9.0, 10.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 0.0} : {0.0, 0.0, 0.0, 1.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                                </property>
                                                                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                                </property>
                                                            </property>
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-90.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="60.0">
                                                        </property>
                                                    </property>
                                                    <property name="arc6" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[33.0, 0.0]">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="14">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="14">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="chord">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-180.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;nor&quot; || logic == &quot;nand&quot; || logic == &quot;xnor&quot;) ? 360.0 : 0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line2" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, 20.0]">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line3" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                                        </property>
                                                    </property>
                                                    <property name="arc4" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-20.0, 0.0]">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="45">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-60.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 120.0">
                                                        </property>
                                                    </property>
                                                    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={130, 353, 934, 634}, maximized=false}">
                                                    </property>
                                                    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
                                                    </property>
                                                    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="4.0">
                                                    </property>
                                                    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{12.5, 9.25}">
                                                    </property>
                                                    <property name="arc5" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-25.0, 0.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;xnor&quot; || logic == &quot;xor&quot;) ? {0.0, 0.0, 0.0, 1.0} : {0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="45">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 0.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-60.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;xnor&quot; || logic == &quot;xor&quot;) ? 120.0 : 0">
                                                        </property>
                                                    </property>
                                                    <property name="ParameterValue" class="ptolemy.vergil.kernel.attributes.AttributeExpressionAttribute">
                                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="logic">
                                                        </property>
                                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="6">
                                                        </property>
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-18.0, -9.0]">
                                                        </property>
                                                        <property name="_renderLast" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="NonStrictXorGate" class="ptolemy.domains.sr.lib.NonStrictXorGate">
                                                <property name="logic" class="ptolemy.data.expr.StringParameter" value="xor">
                                                </property>
                                                <property name="LogicGate_Icon" class="ptolemy.vergil.icon.EditorIcon">
                                                    <property name="polygon" class="ptolemy.vergil.kernel.attributes.ResizablePolygonAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[9.0, 0.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 35">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 41">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="vertices" class="ptolemy.data.expr.Parameter" value="{0.0, 0.0, 35.0, 20.0, 0.0, 40.0}">
                                                        </property>
                                                        <property name="_renderFirst" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                    <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="40">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="false">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                    </property>
                                                    <property name="arc" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-14.0, -20.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 1.0} : {0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="false">
                                                            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                                </property>
                                                                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                                </property>
                                                            </property>
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="90.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? -180.0 : -60.0">
                                                        </property>
                                                    </property>
                                                    <property name="arc2" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{9.0, -10.0}">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 0.0} : {0.0, 0.0, 0.0, 1.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                                </property>
                                                                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                                </property>
                                                            </property>
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="90.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="-60.0">
                                                        </property>
                                                    </property>
                                                    <property name="arc3" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[9.0, 10.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? {0.0, 0.0, 0.0, 0.0} : {0.0, 0.0, 0.0, 1.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 80">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                                                                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                                                                </property>
                                                                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                                </property>
                                                            </property>
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-90.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="60.0">
                                                        </property>
                                                    </property>
                                                    <property name="arc6" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[33.0, 0.0]">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="14">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="14">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="chord">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-180.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;nor&quot; || logic == &quot;nand&quot; || logic == &quot;xnor&quot;) ? 360.0 : 0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line2" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, 20.0]">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 30 : 16">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line3" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-24.0, -20.0]">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 40 : 0">
                                                        </property>
                                                    </property>
                                                    <property name="arc4" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-20.0, 0.0]">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="45">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-60.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;and&quot; || logic == &quot;nand&quot;) ? 0 : 120.0">
                                                        </property>
                                                    </property>
                                                    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={130, 353, 934, 634}, maximized=false}">
                                                    </property>
                                                    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
                                                    </property>
                                                    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="4.0">
                                                    </property>
                                                    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{12.5, 9.25}">
                                                    </property>
                                                    <property name="arc5" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-25.0, 0.0]">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="(logic == &quot;xnor&quot; || logic == &quot;xor&quot;) ? {0.0, 0.0, 0.0, 1.0} : {0.0, 0.0, 0.0, 0.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="45">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 0.0}">
                                                        </property>
                                                        <property name="type" class="ptolemy.data.expr.StringParameter" value="open">
                                                        </property>
                                                        <property name="start" class="ptolemy.data.expr.Parameter" value="-60.0">
                                                        </property>
                                                        <property name="extent" class="ptolemy.data.expr.Parameter" value="(logic == &quot;xnor&quot; || logic == &quot;xor&quot;) ? 120.0 : 0">
                                                        </property>
                                                    </property>
                                                    <property name="ParameterValue" class="ptolemy.vergil.kernel.attributes.AttributeExpressionAttribute">
                                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="logic">
                                                        </property>
                                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="6">
                                                        </property>
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[-18.0, -9.0]">
                                                        </property>
                                                        <property name="_renderLast" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="NonStrictThreeBitAdder" class="ptolemy.domains.sr.lib.NonStrictThreeBitAdder">
                                            </entity>
                                            <entity name="Pre" class="ptolemy.domains.sr.lib.Pre">
                                            </entity>
                                            <entity name="SingleTokenDistributor" class="ptolemy.domains.sr.lib.SingleTokenDistributor">
                                            </entity>
                                            <entity name="When" class="ptolemy.domains.sr.lib.When">
                                            </entity>
                                            <entity name="TrueGate" class="ptolemy.actor.lib.logic.TrueGate">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                </group>
            </configure>
        </entity>
        <entity name="MoreLibraries" class="ptolemy.moml.EntityLibrary">
            <configure>
                <group>
                    <entity name="Automata" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <entity name="FSMActor" class="ptolemy.domains.modal.kernel.FSMActor">
                                    <property name="_library" class="ptolemy.moml.LibraryAttribute">
                                        <configure>
    <entity name="StateLibrary" class="ptolemy.kernel.CompositeEntity"><input source="ptolemy/configs/basicUtilities.xml"></input><entity name="State" class="ptolemy.domains.modal.kernel.State"><property name="_centerName" class="ptolemy.kernel.util.Attribute"></property></entity></entity>
  </configure>
                                    </property>
                                </entity>
                                <entity name="InterfaceAutomaton" class="ptolemy.domains.modal.kernel.ia.InterfaceAutomaton">
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="Backtracking" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Backtracking Actors</doc>
                                <entity name="Actors" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <entity name="Sources" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="TimedSources" class="ptolemy.moml.EntityLibrary">
                                                            <configure>
                                                                <group>
                                                                    <entity name="PoissonClock" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.PoissonClock">
                                                                    </entity>
                                                                </group>
                                                            </configure>
                                                        </entity>
                                                        <entity name="SequenceSources" class="ptolemy.moml.EntityLibrary">
                                                            <configure>
                                                                <group>
                                                                    <entity name="Interpolator" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Interpolator">
                                                                    </entity>
                                                                    <entity name="Pulse" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Pulse">
                                                                    </entity>
                                                                    <entity name="Ramp" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Ramp">
                                                                    </entity>
                                                                    <entity name="Sequence" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Sequence">
                                                                    </entity>
                                                                </group>
                                                            </configure>
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="Sinks" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="GenericSinks" class="ptolemy.moml.EntityLibrary">
                                                            <configure>
                                                                <group>
                                                                    <entity name="Recorder" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Recorder">
                                                                    </entity>
                                                                </group>
                                                            </configure>
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="Array" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="ArrayPeakSearch" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.ArrayPeakSearch">
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="FlowControl" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="Aggregators" class="ptolemy.moml.EntityLibrary">
                                                            <configure>
                                                                <group>
                                                                    <entity name="Commutator" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Commutator">
                                                                    </entity>
                                                                    <entity name="Distributor" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Distributor">
                                                                    </entity>
                                                                    <entity name="Multiplexor" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Multiplexor">
                                                                    </entity>
                                                                    <entity name="Select" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Select">
                                                                    </entity>
                                                                    <entity name="Switch" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Switch">
                                                                    </entity>
                                                                </group>
                                                            </configure>
                                                        </entity>
                                                        <entity name="BooleanFlowControl" class="ptolemy.moml.EntityLibrary">
                                                            <configure>
                                                                <group>
                                                                    <entity name="BooleanSelect" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.BooleanSelect">
                                                                    </entity>
                                                                    <entity name="BooleanSwitch" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.BooleanSwitch">
                                                                    </entity>
                                                                </group>
                                                            </configure>
                                                        </entity>
                                                        <entity name="SequenceControl" class="ptolemy.moml.EntityLibrary">
                                                            <configure>
                                                                <group>
                                                                    <entity name="Chop" class="ptolemy.backtrack.automatic.ptolemy.domains.sdf.lib.Chop">
                                                                    </entity>
                                                                    <entity name="Sequencer" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Sequencer">
                                                                    </entity>
                                                                </group>
                                                            </configure>
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="Math" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="Accumulator" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Accumulator">
                                                        </entity>
                                                        <entity name="Average" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Average">
                                                        </entity>
                                                        <entity name="Counter" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Counter">
                                                        </entity>
                                                        <entity name="Differential" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Differential">
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="Random" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="Gaussian" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Gaussian">
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="SignalProcessing" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="Filtering" class="ptolemy.moml.EntityLibrary">
                                                            <configure>
                                                                <group>
                                                                    <entity name="DelayLine" class="ptolemy.backtrack.automatic.ptolemy.domains.sdf.lib.DelayLine">
                                                                    </entity>
                                                                    <entity name="GradientAdaptiveLattice" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.GradientAdaptiveLattice">
                                                                    </entity>
                                                                    <entity name="IIR" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.IIR">
                                                                    </entity>
                                                                    <entity name="LinearDifferenceEquationSystem" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.LinearDifferenceEquationSystem">
                                                                    </entity>
                                                                    <entity name="RecursiveLattice" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.RecursiveLattice">
                                                                    </entity>
                                                                </group>
                                                            </configure>
                                                        </entity>
                                                        <entity name="Spectrum" class="ptolemy.moml.EntityLibrary">
                                                            <configure>
                                                                <group>
                                                                    <entity name="DB" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.DB">
                                                                    </entity>
                                                                    <entity name="FFT" class="ptolemy.backtrack.automatic.ptolemy.domains.sdf.lib.FFT">
                                                                    </entity>
                                                                    <entity name="IFFT" class="ptolemy.backtrack.automatic.ptolemy.domains.sdf.lib.IFFT">
                                                                    </entity>
                                                                    <entity name="PhaseUnwrap" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.PhaseUnwrap">
                                                                    </entity>
                                                                </group>
                                                            </configure>
                                                        </entity>
                                                        <entity name="Statistical" class="ptolemy.moml.EntityLibrary">
                                                            <configure>
                                                                <group>
                                                                    <entity name="Autocorrelation" class="ptolemy.backtrack.automatic.ptolemy.domains.sdf.lib.Autocorrelation">
                                                                    </entity>
                                                                    <entity name="ComputeHistogram" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.ComputeHistogram">
                                                                    </entity>
                                                                </group>
                                                            </configure>
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="DomainSpecific" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="ProcessNetworks" class="ptolemy.moml.EntityLibrary">
                                                            <configure>
                                                                <group>
                                                                    <entity name="OrderedMerge" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.OrderedMerge">
                                                                    </entity>
                                                                    <entity name="Sequencer" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Sequencer">
                                                                    </entity>
                                                                </group>
                                                            </configure>
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="Domain Specific" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="Backtrack" class="ptolemy.backtrack.manual.ptolemy.actor.lib.Backtrack">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="MoreLibraries" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <entity name="DesignPatterns" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="DiscreteEvent" class="ptolemy.moml.EntityLibrary">
                                                            <configure>
                                                                <group>
                                                                    <entity name="DESourceSink" class="ptolemy.actor.TypedCompositeActor">
                                                                        <entity name="PoissonClock" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.PoissonClock">
                                                                        </entity>
                                                                        <entity name="Ramp" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Ramp">
                                                                        </entity>
                                                                    </entity>
                                                                </group>
                                                            </configure>
                                                        </entity>
                                                        <entity name="DynamicDataFlow" class="ptolemy.moml.EntityLibrary">
                                                            <configure>
                                                                <group>
                                                                    <entity name="DDFRepeatForCount" class="ptolemy.actor.TypedCompositeActor">
                                                                        <entity name="Ramp" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Ramp">
                                                                        </entity>
                                                                        <entity name="Switch" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.BooleanSwitch">
                                                                        </entity>
                                                                        <entity name="RepeatedAction" class="ptolemy.actor.TypedCompositeActor">
                                                                            <entity name="Counter" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.Counter">
                                                                            </entity>
                                                                        </entity>
                                                                    </entity>
                                                                </group>
                                                            </configure>
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                            <entity name="Esoteric" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <entity name="OrderedMerge" class="ptolemy.backtrack.automatic.ptolemy.actor.lib.OrderedMerge">
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="DatabaseActors" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Database Actors</doc>
                                <entity name="DatabaseManager" class="ptolemy.actor.lib.database.DatabaseManager">
                                </entity>
                                <entity name="DatabaseQuery" class="ptolemy.actor.lib.database.DatabaseQuery">
                                </entity>
                                <entity name="DatabaseSelect" class="ptolemy.actor.lib.database.DatabaseSelect">
                                </entity>
                                <entity name="DatabaseInsert" class="ptolemy.actor.lib.database.DatabaseInsert">
                                </entity>
                                <entity name="SQLStatement" class="ptolemy.actor.lib.database.SQLStatement">
                                </entity>
                                <entity name="ArrayOfRecordsRecorder" class="ptolemy.actor.lib.database.ArrayOfRecordsRecorder">
                                    <property name="_configurer" class="ptolemy.vergil.toolbox.ArrayOfRecordsConfigureFactory">
                                        <property name="parameterName" class="ptolemy.data.expr.StringParameter" value="records">
                                        </property>
                                        <property name="columns" class="ptolemy.data.expr.Parameter" value="columns">
                                        </property>
                                    </property>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="DesignPatterns" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <property name="DesignPatternImporter" class="ptolemy.actor.gt.controller.DesignPatternImporter">
                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                        <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                                        </property>
                                    </property>
                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                        <configure>
        <svg>
          <text style="font-size:14; font-family:SansSerif; fill:blue">-D-</text>
        </svg>
      </configure>
                                    </property>
                                </property>
                                <entity name="InputOutputPorts" class="ptolemy.actor.TypedCompositeActor">
                                    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="7.1.devel">
                                    </property>
                                    <property name="_alternateGetMomlAction" class="ptolemy.kernel.util.StringAttribute" value="ptolemy.actor.DesignPatternGetMoMLAction">
                                    </property>
                                    <property name="_designPatternIcon" class="ptolemy.vergil.icon.DesignPatternIcon">
                                        <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                        </property>
                                        <property name="rounding" class="ptolemy.data.expr.Parameter" value="0.0">
                                        </property>
                                        <property name="spacing" class="ptolemy.data.expr.Parameter" value="0.0">
                                        </property>
                                    </property>
                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                    </property>
                                    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={288, 268, 823, 514}, maximized=false}">
                                    </property>
                                    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[600, 400]">
                                    </property>
                                    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
                                    </property>
                                    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{300.0, 200.0}">
                                    </property>
                                    <port name="input" class="ptolemy.actor.TypedIOPort">
                                        <property name="input"/>
                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 200.0}">
                                        </property>
                                    </port>
                                    <port name="output" class="ptolemy.actor.TypedIOPort">
                                        <property name="output"/>
                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[570.0, 200.0]">
                                        </property>
                                    </port>
                                </entity>
                                <entity name="DiscreteEvent" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <entity name="DESourceSink" class="ptolemy.actor.TypedCompositeActor">
                                                <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="7.1.devel">
                                                </property>
                                                <property name="_alternateGetMomlAction" class="ptolemy.kernel.util.StringAttribute" value="ptolemy.actor.DesignPatternGetMoMLAction">
                                                </property>
                                                <property name="_designPatternIcon" class="ptolemy.vergil.icon.DesignPatternIcon">
                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                    </property>
                                                    <property name="rounding" class="ptolemy.data.expr.Parameter" value="0.0">
                                                    </property>
                                                    <property name="spacing" class="ptolemy.data.expr.Parameter" value="0.0">
                                                    </property>
                                                </property>
                                                <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                </property>
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={288, 268, 823, 514}, maximized=false}">
                                                </property>
                                                <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[600, 400]">
                                                </property>
                                                <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
                                                </property>
                                                <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{300.0, 200.0}">
                                                </property>
                                                <entity name="PoissonClock" class="ptolemy.actor.lib.PoissonClock">
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[50.0, 155.0]">
                                                    </property>
                                                </entity>
                                                <entity name="Ramp" class="ptolemy.actor.lib.Ramp">
                                                    <doc>Create a sequence of tokens with increasing value</doc>
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[170.0, 165.0]">
                                                    </property>
                                                </entity>
                                                <entity name="TimedPlotter" class="ptolemy.actor.lib.gui.TimedPlotter">
                                                    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                    </property>
                                                    <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute">
                                                    </property>
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[525.0, 165.0]">
                                                    </property>
                                                </entity>
                                                <relation name="relation" class="ptolemy.actor.TypedIORelation">
                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                    </property>
                                                </relation>
                                                <link port="PoissonClock.output" relation="relation"/>
                                                <link port="Ramp.trigger" relation="relation"/>
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="DynamicDataFlow" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <entity name="DDFRepeatForCount" class="ptolemy.actor.TypedCompositeActor">
                                                <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="7.2.devel">
                                                </property>
                                                <property name="count" class="ptolemy.data.expr.Parameter" value="3">
                                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                                    </property>
                                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                                        <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                                                        </property>
                                                    </property>
                                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                        <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
                                                    </property>
                                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                                    </property>
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[500.0, 45.0]">
                                                    </property>
                                                </property>
                                                <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                                                    <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Fire RepeatedAction for &quot;count&quot; times with Source&#10;as initial input, and send the result to Sink.">
                                                    </property>
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[150.0, 25.0]">
                                                    </property>
                                                </property>
                                                <property name="_alternateGetMomlAction" class="ptolemy.kernel.util.StringAttribute" value="ptolemy.actor.DesignPatternGetMoMLAction">
                                                </property>
                                                <property name="_designPatternIcon" class="ptolemy.vergil.icon.DesignPatternIcon">
                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                    </property>
                                                    <property name="rounding" class="ptolemy.data.expr.Parameter" value="0.0">
                                                    </property>
                                                    <property name="spacing" class="ptolemy.data.expr.Parameter" value="0.0">
                                                    </property>
                                                </property>
                                                <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                </property>
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={288, 268, 815, 517}, maximized=false}">
                                                </property>
                                                <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[600, 400]">
                                                </property>
                                                <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
                                                </property>
                                                <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{300.0, 200.0}">
                                                </property>
                                                <property name="Before" class="ptolemy.actor.gt.controller.TransformationAttribute">
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[70.0, 250.0]">
                                                    </property>
                                                    <configure>
                                                        <entity name="ModelUpdater" class="ptolemy.actor.gt.controller.ModelUpdater">
                                                            <entity name="_Controller" class="ptolemy.domains.ptera.kernel.PteraController">
                                                                <entity name="Match" class="ptolemy.actor.gt.controller.Match">
                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="{105.0, 145.0}">
                                                                    </property>
                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                    </property>
                                                                    <configure>
                                                                        <entity name="Transformation" class="ptolemy.actor.gt.TransformationRule">
                                                                            <property name="mode" class="ptolemy.actor.gt.TransformationMode" value="match only">
                                                                            </property>
                                                                            <property name="repeatUntilFixpoint" class="ptolemy.data.expr.Parameter" value="false">
                                                                            </property>
                                                                            <property name="repeatCount" class="ptolemy.data.expr.Parameter" value="1">
                                                                            </property>
                                                                            <property name="GTDirector" class="ptolemy.actor.gt.TransformationRule$TransformationDirector">
                                                                                <property name="timeResolution" class="ptolemy.actor.parameters.SharedParameter" value="1E-10">
                                                                                </property>
                                                                            </property>
                                                                            <entity name="Pattern" class="ptolemy.actor.gt.Pattern">
                                                                                <property name="criteria" class="ptolemy.actor.gt.GTIngredientsAttribute" value="(ptolemy.actor.gt.ingredients.criteria.AttributeCriterion/false/&quot;count&quot;/false//false/)">
                                                                                </property>
                                                                            </entity>
                                                                        </entity>
                                                                    </configure>
                                                                </entity>
                                                                <entity name="Report" class="ptolemy.domains.ptera.lib.Report">
                                                                    <property name="message" class="ptolemy.data.expr.StringParameter" value="There is a &quot;count&quot; parameter in your model. If you apply this pattern, that parameter will be overwritten. Continue?">
                                                                    </property>
                                                                    <property name="mode" class="ptolemy.data.expr.ChoiceParameter" value="yes or no">
                                                                    </property>
                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="{245.0, 145.0}">
                                                                    </property>
                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                    </property>
                                                                </entity>
                                                                <entity name="Exception" class="ptolemy.domains.ptera.lib.Report">
                                                                    <property name="message" class="ptolemy.data.expr.StringParameter" value="User operation cancelled.">
                                                                    </property>
                                                                    <property name="mode" class="ptolemy.data.expr.ChoiceParameter" value="runtime exception">
                                                                    </property>
                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="{390.0, 145.0}">
                                                                    </property>
                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                    </property>
                                                                </entity>
                                                                <relation name="relation" class="ptolemy.domains.ptera.kernel.SchedulingRelation">
                                                                    <property name="annotation" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="guardExpression" class="ptolemy.kernel.util.StringAttribute" value="matched">
                                                                        <display name="condition"/>
                                                                    </property>
                                                                    <property name="exitAngle" class="ptolemy.data.expr.Parameter" value="0.6283185307179586">
                                                                    </property>
                                                                    <property name="gamma" class="ptolemy.data.expr.Parameter" value="1.422126641418444">
                                                                    </property>
                                                                    <property name="defaultTransition" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="default"/>
                                                                    </property>
                                                                    <property name="nondeterministic" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="preemptive" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="delay" class="ptolemy.domains.ptera.kernel.SchedulingRelation$1" value="0.0">
                                                                    </property>
                                                                    <property name="arguments" class="ptolemy.kernel.util.StringAttribute" value="{}">
                                                                    </property>
                                                                    <property name="canceling" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="priority" class="ptolemy.actor.parameters.Priority" value="0">
                                                                    </property>
                                                                    <property name="triggers" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="reset" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="initialize"/>
                                                                    </property>
                                                                </relation>
                                                                <relation name="relation_1_" class="ptolemy.domains.ptera.kernel.SchedulingRelation">
                                                                    <property name="annotation" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="guardExpression" class="ptolemy.kernel.util.StringAttribute" value="!response">
                                                                        <display name="condition"/>
                                                                    </property>
                                                                    <property name="exitAngle" class="ptolemy.data.expr.Parameter" value="0.6283185307179586">
                                                                    </property>
                                                                    <property name="gamma" class="ptolemy.data.expr.Parameter" value="0.057391971584200424">
                                                                    </property>
                                                                    <property name="defaultTransition" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="default"/>
                                                                    </property>
                                                                    <property name="nondeterministic" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="preemptive" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="delay" class="ptolemy.domains.ptera.kernel.SchedulingRelation$1" value="0.0">
                                                                    </property>
                                                                    <property name="arguments" class="ptolemy.kernel.util.StringAttribute" value="{}">
                                                                    </property>
                                                                    <property name="canceling" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="priority" class="ptolemy.actor.parameters.Priority" value="0">
                                                                    </property>
                                                                    <property name="triggers" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="reset" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="initialize"/>
                                                                    </property>
                                                                </relation>
                                                                <relation name="relation_1_2" class="ptolemy.domains.ptera.kernel.SchedulingRelation">
                                                                    <property name="annotation" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="exitAngle" class="ptolemy.data.expr.Parameter" value="0.6283185307179586">
                                                                    </property>
                                                                    <property name="gamma" class="ptolemy.data.expr.Parameter" value="1.5770300327865816">
                                                                    </property>
                                                                    <property name="defaultTransition" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="default"/>
                                                                    </property>
                                                                    <property name="nondeterministic" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="preemptive" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="delay" class="ptolemy.domains.ptera.kernel.SchedulingRelation$1" value="0.0">
                                                                    </property>
                                                                    <property name="arguments" class="ptolemy.kernel.util.StringAttribute" value="{}">
                                                                    </property>
                                                                    <property name="canceling" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="priority" class="ptolemy.actor.parameters.Priority" value="0">
                                                                    </property>
                                                                    <property name="triggers" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="reset" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="initialize"/>
                                                                    </property>
                                                                </relation>
                                                                <link port="InitModelWithContainer.outgoingPort" relation="relation_1_2"/>
                                                                <link port="Match.incomingPort" relation="relation_1_2"/>
                                                                <link port="Match.outgoingPort" relation="relation"/>
                                                                <link port="Report.incomingPort" relation="relation"/>
                                                                <link port="Report.outgoingPort" relation="relation_1_"/>
                                                                <link port="Exception.incomingPort" relation="relation_1_"/>
                                                            </entity>
                                                        </entity>
                                                    </configure>
                                                </property>
                                                <property name="After" class="ptolemy.actor.gt.controller.TransformationAttribute">
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[135.0, 250.0]">
                                                    </property>
                                                    <configure>
                                                        <entity name="ModelUpdater" class="ptolemy.actor.gt.controller.ModelUpdater">
                                                            <entity name="_Controller" class="ptolemy.domains.ptera.kernel.PteraController">
                                                                <entity name="Transform" class="ptolemy.actor.gt.controller.Transform">
                                                                    <property name="parameters" class="ptolemy.domains.ptera.kernel.ParametersAttribute" value="(c : int)">
                                                                    </property>
                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="{150.0, 230.0}">
                                                                    </property>
                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                    </property>
                                                                    <configure>
                                                                        <entity name="Transformation" class="ptolemy.actor.gt.TransformationRule">
                                                                            <property name="mode" class="ptolemy.actor.gt.TransformationMode" value="replace first">
                                                                            </property>
                                                                            <property name="repeatUntilFixpoint" class="ptolemy.data.expr.Parameter" value="false">
                                                                            </property>
                                                                            <property name="repeatCount" class="ptolemy.data.expr.Parameter" value="1">
                                                                            </property>
                                                                            <property name="GTDirector" class="ptolemy.actor.gt.TransformationRule$TransformationDirector">
                                                                                <property name="timeResolution" class="ptolemy.actor.parameters.SharedParameter" value="1.0E-10">
                                                                                </property>
                                                                            </property>
                                                                            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={286, 254, 828, 542}, maximized=false}">
                                                                            </property>
                                                                            <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[600, 400]">
                                                                            </property>
                                                                            <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
                                                                            </property>
                                                                            <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{300.0, 200.0}">
                                                                            </property>
                                                                            <entity name="Pattern" class="ptolemy.actor.gt.Pattern">
                                                                                <property name="criteria" class="ptolemy.actor.gt.GTIngredientsAttribute" value="(ptolemy.actor.gt.ingredients.criteria.AttributeCriterion/false/&quot;count&quot;/false//false/)">
                                                                                </property>
                                                                            </entity>
                                                                            <entity name="Replacement" class="ptolemy.actor.gt.Replacement">
                                                                                <property name="operations" class="ptolemy.actor.gt.GTIngredientsAttribute" value="(ptolemy.actor.gt.ingredients.operations.AttributeOperation/false/&quot;count&quot;/false//false/&quot;$(c)&quot;)">
                                                                                </property>
                                                                                <property name="RelationHiding" class="ptolemy.actor.gt.RelationHidingAttribute" value="false">
                                                                                    <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                                                        <configure><svg><rect x="0" y="0" width="94" height="32" style="fill:#00FFFF"></rect><line x1="8" y1="7" x2="20" y2="7" style="stroke:#000000"></line><line x1="20" y1="7" x2="20" y2="25" style="stroke:#000000"></line><line x1="20" y1="25" x2="32" y2="25" style="stroke:#000000"></line><polygon points="20,10 14,16 20,22 26,16" style="fill:#000000"></polygon><line x1="39" y1="14" x2="52" y2="14" style="stroke:#303030; stroke-width:2"></line><line x1="39" y1="18" x2="52" y2="18" style="stroke:#303030; stroke-width:2"></line><line x1="50" y1="11" x2="55" y2="16" style="stroke:#303030; stroke-width:2"></line><line x1="50" y1="21" x2="55" y2="16" style="stroke:#303030; stroke-width:2"></line><line x1="62" y1="7" x2="74" y2="7" style="stroke:#000000"></line><line x1="74" y1="7" x2="74" y2="25" style="stroke:#000000"></line><line x1="74" y1="25" x2="86" y2="25" style="stroke:#000000"></line><line x1="41" y1="9" x2="49" y2="23" style="stroke:#C00000; stroke-width:3"></line></svg></configure>
                                                                                    </property>
                                                                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                                                        <configure>
          <svg>
            <rect x="0" y="0" width="26" height="18" style="fill:#00FFFF"></rect>
            <text x="2" y="15" style="font-size:16; font-family:SansSerif; fill:blue">RH</text>
          </svg>
        </configure>
                                                                                    </property>
                                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[235.0, 110.0]">
                                                                                    </property>
                                                                                </property>
                                                                            </entity>
                                                                        </entity>
                                                                    </configure>
                                                                </entity>
                                                                <entity name="Configure" class="ptolemy.domains.ptera.lib.Configure">
                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="{150.0, 125.0}">
                                                                    </property>
                                                                    <property name="count" class="ptolemy.data.expr.Parameter" value="3">
                                                                    </property>
                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                    </property>
                                                                </entity>
                                                                <relation name="relation_1_" class="ptolemy.domains.ptera.kernel.SchedulingRelation">
                                                                    <property name="annotation" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="exitAngle" class="ptolemy.data.expr.Parameter" value="0.3158753078196075">
                                                                    </property>
                                                                    <property name="gamma" class="ptolemy.data.expr.Parameter" value="1.7805222510865935">
                                                                    </property>
                                                                    <property name="defaultTransition" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="default"/>
                                                                    </property>
                                                                    <property name="nondeterministic" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="preemptive" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="delay" class="ptolemy.domains.ptera.kernel.SchedulingRelation$1" value="0.0">
                                                                    </property>
                                                                    <property name="arguments" class="ptolemy.kernel.util.StringAttribute" value="{count}">
                                                                    </property>
                                                                    <property name="canceling" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="priority" class="ptolemy.actor.parameters.Priority" value="0">
                                                                    </property>
                                                                    <property name="triggers" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="reset" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="initialize"/>
                                                                    </property>
                                                                </relation>
                                                                <relation name="relation" class="ptolemy.domains.ptera.kernel.SchedulingRelation">
                                                                    <property name="annotation" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="exitAngle" class="ptolemy.data.expr.Parameter" value="0.32918504506055624">
                                                                    </property>
                                                                    <property name="gamma" class="ptolemy.data.expr.Parameter" value="1.1198809981128832">
                                                                    </property>
                                                                    <property name="defaultTransition" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="default"/>
                                                                    </property>
                                                                    <property name="nondeterministic" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="preemptive" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="delay" class="ptolemy.domains.ptera.kernel.SchedulingRelation$1" value="0.0">
                                                                    </property>
                                                                    <property name="arguments" class="ptolemy.kernel.util.StringAttribute" value="{}">
                                                                    </property>
                                                                    <property name="canceling" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="priority" class="ptolemy.actor.parameters.Priority" value="0">
                                                                    </property>
                                                                    <property name="triggers" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="reset" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="initialize"/>
                                                                    </property>
                                                                </relation>
                                                                <link port="InitModelWithContainer.outgoingPort" relation="relation"/>
                                                                <link port="Transform.incomingPort" relation="relation_1_"/>
                                                                <link port="Configure.incomingPort" relation="relation"/>
                                                                <link port="Configure.outgoingPort" relation="relation_1_"/>
                                                            </entity>
                                                        </entity>
                                                    </configure>
                                                </property>
                                                <entity name="SampleDelay" class="ptolemy.domains.sdf.lib.SampleDelay">
                                                    <property name="initialOutputs" class="ptolemy.data.expr.Parameter" value="{true}">
                                                    </property>
                                                    <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="initialOutputs">
                                                        </property>
                                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
                                                        </property>
                                                    </property>
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[140.0, 180.0]">
                                                    </property>
                                                </entity>
                                                <entity name="Const" class="ptolemy.actor.lib.Const">
                                                    <property name="value" class="ptolemy.data.expr.Parameter" value="false">
                                                    </property>
                                                    <property name="firingCountLimit" class="ptolemy.data.expr.Parameter" value="count">
                                                    </property>
                                                    <doc>Create a constant sequence</doc>
                                                    <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                                                        </property>
                                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                                                        </property>
                                                    </property>
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[70.0, 180.0]">
                                                    </property>
                                                </entity>
                                                <entity name="Ramp" class="ptolemy.actor.lib.Ramp">
                                                    <property name="firingCountLimit" class="ptolemy.data.expr.Parameter" value="count">
                                                    </property>
                                                    <doc>Create a sequence of tokens with increasing value</doc>
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[290.0, 205.0]">
                                                    </property>
                                                </entity>
                                                <entity name="Expression" class="ptolemy.actor.lib.Expression">
                                                    <property name="expression" class="ptolemy.kernel.util.StringAttribute" value="in+1&gt;=count">
                                                    </property>
                                                    <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="expression">
                                                        </property>
                                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                                                        </property>
                                                    </property>
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[390.0, 205.0]">
                                                    </property>
                                                    <port name="in" class="ptolemy.actor.TypedIOPort">
                                                        <property name="input"/>
                                                    </port>
                                                </entity>
                                                <entity name="Switch" class="ptolemy.actor.lib.BooleanSwitch">
                                                    <property name="BooleanSwitchIcon" class="ptolemy.vergil.icon.EditorIcon">
                                                        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds = {5, 136, 815, 516}, maximized = false}">
                                                        </property>
                                                        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[600, 400]">
                                                        </property>
                                                    </property>
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[450.0, 120.0]">
                                                    </property>
                                                    <port name="control" class="ptolemy.actor.TypedIOPort">
                                                        <property name="input"/>
                                                        <property name="_cardinal" class="ptolemy.kernel.util.StringAttribute" value="SOUTH">
                                                        </property>
                                                    </port>
                                                </entity>
                                                <entity name="Select" class="ptolemy.domains.ddf.lib.DDFBooleanSelect">
                                                    <property name="DDFBooleanSelectIcon" class="ptolemy.vergil.icon.EditorIcon">
                                                        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds = {17, -12, 815, 516}, maximized = false}">
                                                        </property>
                                                        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[600, 400]">
                                                        </property>
                                                    </property>
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[240.0, 120.0]">
                                                    </property>
                                                </entity>
                                                <entity name="Source" class="ptolemy.actor.lib.Const">
                                                    <property name="firingCountLimit" class="ptolemy.data.expr.Parameter" value="1">
                                                    </property>
                                                    <doc>Create a constant sequence.</doc>
                                                    <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
                                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
                                                        </property>
                                                        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
                                                        </property>
                                                    </property>
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[65.0, 110.0]">
                                                    </property>
                                                </entity>
                                                <entity name="Sink" class="ptolemy.actor.lib.gui.Display">
                                                    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={529, 403, 342, 243}, maximized=false}">
                                                    </property>
                                                    <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[326, 186]">
                                                    </property>
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[535.0, 110.0]">
                                                    </property>
                                                </entity>
                                                <entity name="RepeatedAction" class="ptolemy.actor.TypedCompositeActor">
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[350.0, 120.0]">
                                                    </property>
                                                    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                                                        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Remove Counter and add the action to be repeated.">
                                                        </property>
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[120.0, 100.0]">
                                                        </property>
                                                    </property>
                                                    <port name="input" class="ptolemy.actor.TypedIOPort">
                                                        <property name="input"/>
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 200.0}">
                                                        </property>
                                                    </port>
                                                    <port name="output" class="ptolemy.actor.TypedIOPort">
                                                        <property name="output"/>
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[570.0, 200.0]">
                                                        </property>
                                                    </port>
                                                    <entity name="Counter" class="ptolemy.actor.lib.Counter">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{295.0, 210.0}">
                                                        </property>
                                                    </entity>
                                                    <relation name="relation" class="ptolemy.actor.TypedIORelation">
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                        </property>
                                                    </relation>
                                                    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                        </property>
                                                    </relation>
                                                    <link port="input" relation="relation"/>
                                                    <link port="output" relation="relation2"/>
                                                    <link port="Counter.increment" relation="relation"/>
                                                    <link port="Counter.output" relation="relation2"/>
                                                </entity>
                                                <relation name="relation" class="ptolemy.actor.TypedIORelation">
                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                    </property>
                                                </relation>
                                                <relation name="relation2" class="ptolemy.actor.TypedIORelation">
                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                    </property>
                                                </relation>
                                                <relation name="relation3" class="ptolemy.actor.TypedIORelation">
                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                    </property>
                                                </relation>
                                                <relation name="relation4" class="ptolemy.actor.TypedIORelation">
                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                    </property>
                                                    <vertex name="vertex1" value="[485.0, 245.0]">
                                                    </vertex>
                                                </relation>
                                                <relation name="relation5" class="ptolemy.actor.TypedIORelation">
                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                    </property>
                                                </relation>
                                                <relation name="relation6" class="ptolemy.actor.TypedIORelation">
                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                    </property>
                                                    <vertex name="vertex1" value="[200.0, 245.0]">
                                                    </vertex>
                                                </relation>
                                                <relation name="relation7" class="ptolemy.actor.TypedIORelation">
                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                    </property>
                                                </relation>
                                                <relation name="relation8" class="ptolemy.actor.TypedIORelation">
                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                    </property>
                                                </relation>
                                                <relation name="relation9" class="ptolemy.actor.TypedIORelation">
                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                    </property>
                                                </relation>
                                                <relation name="relation10" class="ptolemy.actor.TypedIORelation">
                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                    </property>
                                                </relation>
                                                <link port="SampleDelay.input" relation="relation"/>
                                                <link port="SampleDelay.output" relation="relation5"/>
                                                <link port="Const.output" relation="relation"/>
                                                <link port="Ramp.output" relation="relation2"/>
                                                <link port="Expression.output" relation="relation3"/>
                                                <link port="Expression.in" relation="relation2"/>
                                                <link port="Switch.input" relation="relation10"/>
                                                <link port="Switch.control" relation="relation3"/>
                                                <link port="Switch.trueOutput" relation="relation8"/>
                                                <link port="Switch.falseOutput" relation="relation4"/>
                                                <link port="Select.trueInput" relation="relation7"/>
                                                <link port="Select.falseInput" relation="relation6"/>
                                                <link port="Select.control" relation="relation5"/>
                                                <link port="Select.output" relation="relation9"/>
                                                <link port="Source.output" relation="relation7"/>
                                                <link port="Sink.input" relation="relation8"/>
                                                <link port="RepeatedAction.input" relation="relation9"/>
                                                <link port="RepeatedAction.output" relation="relation10"/>
                                                <link relation1="relation4" relation2="relation6"/>
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="Rendezvous" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <entity name="RendezvousSynchrony" class="ptolemy.actor.TypedCompositeActor">
                                                <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="7.2.devel">
                                                </property>
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={288, 268, 823, 514}, maximized=false}">
                                                </property>
                                                <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[600, 400]">
                                                </property>
                                                <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
                                                </property>
                                                <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{300.0, 200.0}">
                                                </property>
                                                <property name="After" class="ptolemy.actor.gt.controller.TransformationAttribute">
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[495.0, 125.0]">
                                                    </property>
                                                    <configure>
                                                        <entity name="ModelUpdater" class="ptolemy.actor.gt.controller.ModelUpdater">
                                                            <entity name="_Controller" class="ptolemy.domains.ptera.kernel.PteraController">
                                                                <property name="xOffset" class="ptolemy.data.expr.Parameter" value="5">
                                                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                                                    </property>
                                                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                                                        <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                                                                        </property>
                                                                    </property>
                                                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                                        <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
                                                                    </property>
                                                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                                                    </property>
                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="{280.0, 65.0}">
                                                                    </property>
                                                                </property>
                                                                <property name="yOffset" class="ptolemy.data.expr.Parameter" value="30">
                                                                    <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
                                                                    </property>
                                                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                                                        <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                                                                        </property>
                                                                    </property>
                                                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                                        <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
                                                                    </property>
                                                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
                                                                    </property>
                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[280.0, 85.0]">
                                                                    </property>
                                                                </property>
                                                                <entity name="Transform" class="ptolemy.actor.gt.controller.Transform">
                                                                    <property name="parameters" class="ptolemy.domains.ptera.kernel.ParametersAttribute" value="(i : int, count : int)">
                                                                    </property>
                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[320.0, 145.0]">
                                                                    </property>
                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                    </property>
                                                                    <configure>
                                                                        <entity name="Transformation" class="ptolemy.actor.gt.TransformationRule">
                                                                            <property name="mode" class="ptolemy.actor.gt.TransformationMode" value="replace first">
                                                                            </property>
                                                                            <property name="repeatUntilFixpoint" class="ptolemy.data.expr.Parameter" value="false">
                                                                            </property>
                                                                            <property name="repeatCount" class="ptolemy.data.expr.Parameter" value="1">
                                                                            </property>
                                                                            <property name="GTDirector" class="ptolemy.actor.gt.TransformationRule$TransformationDirector">
                                                                                <property name="timeResolution" class="ptolemy.actor.parameters.SharedParameter" value="1.0E-10">
                                                                                </property>
                                                                            </property>
                                                                            <entity name="Pattern" class="ptolemy.actor.gt.Pattern">
                                                                                <property name="Constraint" class="ptolemy.actor.gt.Constraint" value="&#10;A.getName().equals(&quot;_A&quot; + i + &quot;_&quot;) &amp;&amp;&#10;B.getName().equals(&quot;_B&quot; + i + &quot;_&quot;)">
                                                                                    <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                                                                                        <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                                                                                        </property>
                                                                                    </property>
                                                                                    <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                                                        <configure>
          <svg>
            <text style="font-size:14; font-family:SansSerif; fill:blue">-C-</text>
          </svg>
        </configure>
                                                                                    </property>
                                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[90.0, 180.0]">
                                                                                    </property>
                                                                                </property>
                                                                                <entity name="Barrier" class="ptolemy.domains.rendezvous.lib.Barrier">
                                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[230.0, 65.0]">
                                                                                    </property>
                                                                                </entity>
                                                                                <entity name="A" class="ptolemy.actor.TypedCompositeActor">
                                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[95.0, 130.0]">
                                                                                    </property>
                                                                                    <property name="_icon" class="ptolemy.vergil.icon.EditorIcon">
                                                                                        <property name="ellipse" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
                                                                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, 0.0]">
                                                                                            </property>
                                                                                            <property name="width" class="ptolemy.data.expr.Parameter" value="20">
                                                                                            </property>
                                                                                            <property name="height" class="ptolemy.data.expr.Parameter" value="20">
                                                                                            </property>
                                                                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                                                            </property>
                                                                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                                                            </property>
                                                                                        </property>
                                                                                    </property>
                                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                                    </property>
                                                                                    <port name="input" class="ptolemy.actor.TypedIOPort">
                                                                                        <property name="input"/>
                                                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 200.0}">
                                                                                        </property>
                                                                                    </port>
                                                                                    <port name="output" class="ptolemy.actor.TypedIOPort">
                                                                                        <property name="output"/>
                                                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[570.0, 200.0]">
                                                                                        </property>
                                                                                    </port>
                                                                                    <relation name="relation" class="ptolemy.actor.TypedIORelation">
                                                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                                                        </property>
                                                                                    </relation>
                                                                                    <link port="input" relation="relation"/>
                                                                                    <link port="output" relation="relation"/>
                                                                                </entity>
                                                                                <entity name="B" class="ptolemy.actor.TypedCompositeActor">
                                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[300.0, 130.0]">
                                                                                    </property>
                                                                                    <property name="_icon" class="ptolemy.vergil.icon.EditorIcon">
                                                                                        <property name="ellipse" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
                                                                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, 0.0]">
                                                                                            </property>
                                                                                            <property name="width" class="ptolemy.data.expr.Parameter" value="20">
                                                                                            </property>
                                                                                            <property name="height" class="ptolemy.data.expr.Parameter" value="20">
                                                                                            </property>
                                                                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                                                            </property>
                                                                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                                                            </property>
                                                                                        </property>
                                                                                    </property>
                                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                                    </property>
                                                                                    <port name="input" class="ptolemy.actor.TypedIOPort">
                                                                                        <property name="input"/>
                                                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 200.0}">
                                                                                        </property>
                                                                                    </port>
                                                                                    <port name="output" class="ptolemy.actor.TypedIOPort">
                                                                                        <property name="output"/>
                                                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[570.0, 200.0]">
                                                                                        </property>
                                                                                    </port>
                                                                                    <relation name="relation" class="ptolemy.actor.TypedIORelation">
                                                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                                                        </property>
                                                                                    </relation>
                                                                                    <link port="input" relation="relation"/>
                                                                                    <link port="output" relation="relation"/>
                                                                                </entity>
                                                                                <relation name="relation" class="ptolemy.actor.TypedIORelation">
                                                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                                                    </property>
                                                                                    <vertex name="vertex1" value="[165.0, 130.0]">
                                                                                    </vertex>
                                                                                </relation>
                                                                                <link port="Barrier.input" relation="relation"/>
                                                                                <link port="A.output" relation="relation"/>
                                                                                <link port="B.input" relation="relation"/>
                                                                            </entity>
                                                                            <entity name="Replacement" class="ptolemy.actor.gt.Replacement">
                                                                                <entity name="C" class="ptolemy.actor.TypedCompositeActor">
                                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[95.0, 170.0]">
                                                                                    </property>
                                                                                    <property name="_icon" class="ptolemy.vergil.icon.EditorIcon">
                                                                                        <property name="ellipse" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
                                                                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, 0.0]">
                                                                                            </property>
                                                                                            <property name="width" class="ptolemy.data.expr.Parameter" value="20">
                                                                                            </property>
                                                                                            <property name="height" class="ptolemy.data.expr.Parameter" value="20">
                                                                                            </property>
                                                                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                                                            </property>
                                                                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                                                            </property>
                                                                                        </property>
                                                                                    </property>
                                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                                    </property>
                                                                                    <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute">
                                                                                    </property>
                                                                                    <property name="operations" class="ptolemy.actor.gt.GTIngredientsAttribute" value="(ptolemy.actor.gt.ingredients.operations.AttributeOperation/false/&quot;_location&quot;/false//false/&quot;{$(A._location.getLocation()(0)), $(A._location.getLocation()(1) + yOffset)}&quot;)(ptolemy.actor.gt.ingredients.operations.RenameOperation/false/&quot;_A$(i+1)_&quot;)">
                                                                                    </property>
                                                                                    <port name="input" class="ptolemy.actor.TypedIOPort">
                                                                                        <property name="input"/>
                                                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 200.0}">
                                                                                        </property>
                                                                                    </port>
                                                                                    <port name="output" class="ptolemy.actor.TypedIOPort">
                                                                                        <property name="output"/>
                                                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[570.0, 200.0]">
                                                                                        </property>
                                                                                    </port>
                                                                                    <relation name="relation" class="ptolemy.actor.TypedIORelation">
                                                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                                                        </property>
                                                                                    </relation>
                                                                                    <link port="input" relation="relation"/>
                                                                                    <link port="output" relation="relation"/>
                                                                                </entity>
                                                                                <entity name="D" class="ptolemy.actor.TypedCompositeActor">
                                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[300.0, 170.0]">
                                                                                    </property>
                                                                                    <property name="_icon" class="ptolemy.vergil.icon.EditorIcon">
                                                                                        <property name="ellipse" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
                                                                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, 0.0]">
                                                                                            </property>
                                                                                            <property name="width" class="ptolemy.data.expr.Parameter" value="20">
                                                                                            </property>
                                                                                            <property name="height" class="ptolemy.data.expr.Parameter" value="20">
                                                                                            </property>
                                                                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                                                            </property>
                                                                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                                                            </property>
                                                                                        </property>
                                                                                    </property>
                                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                                    </property>
                                                                                    <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute">
                                                                                    </property>
                                                                                    <property name="operations" class="ptolemy.actor.gt.GTIngredientsAttribute" value="(ptolemy.actor.gt.ingredients.operations.AttributeOperation/false/&quot;_location&quot;/false//false/&quot;{$(B._location.getLocation()(0)), $(B._location.getLocation()(1) + yOffset)}&quot;)(ptolemy.actor.gt.ingredients.operations.RenameOperation/false/&quot;_B$(i+1)_&quot;)">
                                                                                    </property>
                                                                                    <port name="input" class="ptolemy.actor.TypedIOPort">
                                                                                        <property name="input"/>
                                                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 200.0}">
                                                                                        </property>
                                                                                    </port>
                                                                                    <port name="output" class="ptolemy.actor.TypedIOPort">
                                                                                        <property name="output"/>
                                                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[570.0, 200.0]">
                                                                                        </property>
                                                                                    </port>
                                                                                    <relation name="relation" class="ptolemy.actor.TypedIORelation">
                                                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                                                        </property>
                                                                                    </relation>
                                                                                    <link port="input" relation="relation"/>
                                                                                    <link port="output" relation="relation"/>
                                                                                </entity>
                                                                                <entity name="Barrier" class="ptolemy.domains.rendezvous.lib.Barrier">
                                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[230.0, 65.0]">
                                                                                    </property>
                                                                                    <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="Barrier">
                                                                                    </property>
                                                                                </entity>
                                                                                <entity name="A" class="ptolemy.actor.TypedCompositeActor">
                                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[95.0, 130.0]">
                                                                                    </property>
                                                                                    <property name="_icon" class="ptolemy.vergil.icon.EditorIcon">
                                                                                        <property name="ellipse" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
                                                                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, 0.0]">
                                                                                            </property>
                                                                                            <property name="width" class="ptolemy.data.expr.Parameter" value="20">
                                                                                            </property>
                                                                                            <property name="height" class="ptolemy.data.expr.Parameter" value="20">
                                                                                            </property>
                                                                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                                                            </property>
                                                                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                                                            </property>
                                                                                        </property>
                                                                                    </property>
                                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                                    </property>
                                                                                    <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="A">
                                                                                    </property>
                                                                                    <port name="input" class="ptolemy.actor.TypedIOPort">
                                                                                        <property name="input"/>
                                                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 200.0}">
                                                                                        </property>
                                                                                        <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="A.input">
                                                                                        </property>
                                                                                    </port>
                                                                                    <port name="output" class="ptolemy.actor.TypedIOPort">
                                                                                        <property name="output"/>
                                                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[570.0, 200.0]">
                                                                                        </property>
                                                                                        <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="A.output">
                                                                                        </property>
                                                                                    </port>
                                                                                    <relation name="relation" class="ptolemy.actor.TypedIORelation">
                                                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                                                        </property>
                                                                                        <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="A.relation">
                                                                                        </property>
                                                                                    </relation>
                                                                                    <link port="input" relation="relation"/>
                                                                                    <link port="output" relation="relation"/>
                                                                                </entity>
                                                                                <entity name="B" class="ptolemy.actor.TypedCompositeActor">
                                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[300.0, 130.0]">
                                                                                    </property>
                                                                                    <property name="_icon" class="ptolemy.vergil.icon.EditorIcon">
                                                                                        <property name="ellipse" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
                                                                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, 0.0]">
                                                                                            </property>
                                                                                            <property name="width" class="ptolemy.data.expr.Parameter" value="20">
                                                                                            </property>
                                                                                            <property name="height" class="ptolemy.data.expr.Parameter" value="20">
                                                                                            </property>
                                                                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                                                            </property>
                                                                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                                                            </property>
                                                                                        </property>
                                                                                    </property>
                                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                                    </property>
                                                                                    <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="B">
                                                                                    </property>
                                                                                    <port name="input" class="ptolemy.actor.TypedIOPort">
                                                                                        <property name="input"/>
                                                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 200.0}">
                                                                                        </property>
                                                                                        <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="B.input">
                                                                                        </property>
                                                                                    </port>
                                                                                    <port name="output" class="ptolemy.actor.TypedIOPort">
                                                                                        <property name="output"/>
                                                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[570.0, 200.0]">
                                                                                        </property>
                                                                                        <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="B.output">
                                                                                        </property>
                                                                                    </port>
                                                                                    <relation name="relation" class="ptolemy.actor.TypedIORelation">
                                                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                                                        </property>
                                                                                        <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="B.relation">
                                                                                        </property>
                                                                                    </relation>
                                                                                    <link port="input" relation="relation"/>
                                                                                    <link port="output" relation="relation"/>
                                                                                </entity>
                                                                                <relation name="relation" class="ptolemy.actor.TypedIORelation">
                                                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                                                    </property>
                                                                                    <vertex name="vertex1" value="[165.0, 130.0]">
                                                                                    </vertex>
                                                                                    <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="relation">
                                                                                    </property>
                                                                                </relation>
                                                                                <relation name="relation2" class="ptolemy.actor.TypedIORelation">
                                                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                                                    </property>
                                                                                    <vertex name="vertex1" value="[165.0, 170.0]">
                                                                                    </vertex>
                                                                                    <property name="operations" class="ptolemy.actor.gt.GTIngredientsAttribute" value="(ptolemy.actor.gt.ingredients.operations.AttributeOperation/false/&quot;vertex1&quot;/false//false/&quot;{$(relation.vertex1.getLocation()(0) + xOffset), $(relation.vertex1.getLocation()(1) + yOffset)}&quot;)">
                                                                                    </property>
                                                                                </relation>
                                                                                <link port="C.output" relation="relation2"/>
                                                                                <link port="D.input" relation="relation2"/>
                                                                                <link port="Barrier.input" relation="relation"/>
                                                                                <link port="Barrier.input" relation="relation2"/>
                                                                                <link port="A.output" relation="relation"/>
                                                                                <link port="B.input" relation="relation"/>
                                                                            </entity>
                                                                        </entity>
                                                                    </configure>
                                                                </entity>
                                                                <entity name="Configure" class="ptolemy.domains.ptera.lib.Configure">
                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[100.0, 150.0]">
                                                                    </property>
                                                                    <property name="count" class="ptolemy.data.expr.Parameter" value="2">
                                                                    </property>
                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                    </property>
                                                                </entity>
                                                                <relation name="relation" class="ptolemy.domains.ptera.kernel.SchedulingRelation">
                                                                    <property name="annotation" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="guardExpression" class="ptolemy.kernel.util.StringAttribute" value="1 &lt; count">
                                                                        <display name="condition"/>
                                                                    </property>
                                                                    <property name="exitAngle" class="ptolemy.data.expr.Parameter" value="0.46513192374471185">
                                                                    </property>
                                                                    <property name="gamma" class="ptolemy.data.expr.Parameter" value="0.053646183862353675">
                                                                    </property>
                                                                    <property name="defaultTransition" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="default"/>
                                                                    </property>
                                                                    <property name="nondeterministic" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="preemptive" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="delay" class="ptolemy.domains.ptera.kernel.SchedulingRelation$1" value="0.0">
                                                                    </property>
                                                                    <property name="arguments" class="ptolemy.kernel.util.StringAttribute" value="{1, count}">
                                                                    </property>
                                                                    <property name="canceling" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="priority" class="ptolemy.actor.parameters.Priority" value="0">
                                                                    </property>
                                                                    <property name="triggers" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="reset" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="initialize"/>
                                                                    </property>
                                                                </relation>
                                                                <relation name="relation_1_3" class="ptolemy.domains.ptera.kernel.SchedulingRelation">
                                                                    <property name="annotation" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="guardExpression" class="ptolemy.kernel.util.StringAttribute" value="i + 1 &lt; count">
                                                                        <display name="condition"/>
                                                                    </property>
                                                                    <property name="exitAngle" class="ptolemy.data.expr.Parameter" value="2.3360429733254624">
                                                                    </property>
                                                                    <property name="gamma" class="ptolemy.data.expr.Parameter" value="-0.126268677155754">
                                                                    </property>
                                                                    <property name="defaultTransition" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="default"/>
                                                                    </property>
                                                                    <property name="nondeterministic" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="preemptive" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="delay" class="ptolemy.domains.ptera.kernel.SchedulingRelation$1" value="0.0">
                                                                    </property>
                                                                    <property name="arguments" class="ptolemy.kernel.util.StringAttribute" value="{i + 1, count}">
                                                                    </property>
                                                                    <property name="canceling" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="priority" class="ptolemy.actor.parameters.Priority" value="0">
                                                                    </property>
                                                                    <property name="triggers" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="reset" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="initialize"/>
                                                                    </property>
                                                                </relation>
                                                                <relation name="relation_1_4" class="ptolemy.domains.ptera.kernel.SchedulingRelation">
                                                                    <property name="annotation" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="exitAngle" class="ptolemy.data.expr.Parameter" value="0.2870977775771039">
                                                                    </property>
                                                                    <property name="gamma" class="ptolemy.data.expr.Parameter" value="1.2373971171868319">
                                                                    </property>
                                                                    <property name="defaultTransition" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="default"/>
                                                                    </property>
                                                                    <property name="nondeterministic" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="preemptive" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="delay" class="ptolemy.domains.ptera.kernel.SchedulingRelation$1" value="0.0">
                                                                    </property>
                                                                    <property name="arguments" class="ptolemy.kernel.util.StringAttribute" value="{}">
                                                                    </property>
                                                                    <property name="canceling" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="priority" class="ptolemy.actor.parameters.Priority" value="0">
                                                                    </property>
                                                                    <property name="triggers" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="reset" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="initialize"/>
                                                                    </property>
                                                                </relation>
                                                                <link port="InitModelWithContainer.outgoingPort" relation="relation_1_4"/>
                                                                <link port="Transform.incomingPort" relation="relation"/>
                                                                <link port="Transform.incomingPort" relation="relation_1_3"/>
                                                                <link port="Transform.outgoingPort" relation="relation_1_3"/>
                                                                <link port="Configure.incomingPort" relation="relation_1_4"/>
                                                                <link port="Configure.outgoingPort" relation="relation"/>
                                                            </entity>
                                                        </entity>
                                                    </configure>
                                                </property>
                                                <property name="_alternateGetMomlAction" class="ptolemy.kernel.util.StringAttribute" value="ptolemy.actor.DesignPatternGetMoMLAction">
                                                </property>
                                                <property name="_designPatternIcon" class="ptolemy.vergil.icon.DesignPatternIcon">
                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                    </property>
                                                    <property name="rounding" class="ptolemy.data.expr.Parameter" value="0.0">
                                                    </property>
                                                    <property name="spacing" class="ptolemy.data.expr.Parameter" value="0.0">
                                                    </property>
                                                </property>
                                                <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                </property>
                                                <property name="Before" class="ptolemy.actor.gt.controller.TransformationAttribute">
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[430.0, 125.0]">
                                                    </property>
                                                    <configure>
                                                        <entity name="ModelUpdater" class="ptolemy.actor.gt.controller.ModelUpdater">
                                                            <entity name="_Controller" class="ptolemy.domains.ptera.kernel.PteraController">
                                                                <entity name="Match" class="ptolemy.actor.gt.controller.Match">
                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[120.0, 120.0]">
                                                                    </property>
                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                    </property>
                                                                    <configure>
                                                                        <entity name="Transformation" class="ptolemy.actor.gt.TransformationRule">
                                                                            <property name="mode" class="ptolemy.actor.gt.TransformationMode" value="match only">
                                                                            </property>
                                                                            <property name="repeatUntilFixpoint" class="ptolemy.data.expr.Parameter" value="false">
                                                                            </property>
                                                                            <property name="repeatCount" class="ptolemy.data.expr.Parameter" value="1">
                                                                            </property>
                                                                            <property name="GTDirector" class="ptolemy.actor.gt.TransformationRule$TransformationDirector">
                                                                                <property name="timeResolution" class="ptolemy.actor.parameters.SharedParameter" value="1E-10">
                                                                                </property>
                                                                            </property>
                                                                            <entity name="Pattern" class="ptolemy.actor.gt.Pattern">
                                                                                <entity name="A" class="ptolemy.actor.gt.AtomicActorMatcher">
                                                                                    <property name="criteria" class="ptolemy.actor.gt.GTIngredientsAttribute" value="(ptolemy.actor.gt.ingredients.criteria.NameCriterion/false/&quot;_(A|B)[0-9]+_&quot;)">
                                                                                    </property>
                                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="{195, 80}">
                                                                                    </property>
                                                                                    <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                                                        <configure><svg><rect x="0" y="0" width="60" height="40"  style="fill:#C0C0C0"/><rect x="5" y="17" width="16" height="10"  style="fill:#FFFFFF; stroke:#B00000"/><rect x="39" y="25" width="16" height="10"  style="fill:#FFFFFF; stroke:#B00000"/><line x1="25" y1="22" x2="30" y2="22"  style="stroke:#404040"/><line x1="30" y1="22" x2="30" y2="30"  style="stroke:#404040"/><line x1="30" y1="30" x2="35" y2="30"  style="stroke:#404040"/><text x="17" y="13"  style="font-size:12; fill:#E00000; font-family:SansSerif">  match</text></svg></configure>
                                                                                    </property>
                                                                                </entity>
                                                                            </entity>
                                                                        </entity>
                                                                    </configure>
                                                                </entity>
                                                                <entity name="Report" class="ptolemy.domains.ptera.lib.Report">
                                                                    <property name="message" class="ptolemy.data.expr.StringParameter" value="Your model contains entities with name collisions. Automatic renaming can be performed. Continue?">
                                                                    </property>
                                                                    <property name="mode" class="ptolemy.data.expr.ChoiceParameter" value="yes or no">
                                                                    </property>
                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[120.0, 195.0]">
                                                                    </property>
                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                    </property>
                                                                </entity>
                                                                <entity name="Transform" class="ptolemy.actor.gt.controller.Transform">
                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[120.0, 290.0]">
                                                                    </property>
                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                    </property>
                                                                    <configure>
                                                                        <entity name="Transformation" class="ptolemy.actor.gt.TransformationRule">
                                                                            <property name="mode" class="ptolemy.actor.gt.TransformationMode" value="replace first">
                                                                            </property>
                                                                            <property name="repeatUntilFixpoint" class="ptolemy.data.expr.Parameter" value="false">
                                                                            </property>
                                                                            <property name="repeatCount" class="ptolemy.data.expr.Parameter" value="1">
                                                                            </property>
                                                                            <property name="GTDirector" class="ptolemy.actor.gt.TransformationRule$TransformationDirector">
                                                                                <property name="timeResolution" class="ptolemy.actor.parameters.SharedParameter" value="1.0E-10">
                                                                                </property>
                                                                            </property>
                                                                            <entity name="Pattern" class="ptolemy.actor.gt.Pattern">
                                                                                <entity name="A" class="ptolemy.actor.gt.AtomicActorMatcher">
                                                                                    <property name="criteria" class="ptolemy.actor.gt.GTIngredientsAttribute" value="(ptolemy.actor.gt.ingredients.criteria.NameCriterion/false/&quot;_(A|B)[0-9]+_&quot;)">
                                                                                    </property>
                                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="{210, 140}">
                                                                                    </property>
                                                                                    <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                                                        <configure><svg><rect x="0" y="0" width="60" height="40"  style="fill:#C0C0C0"/><rect x="5" y="17" width="16" height="10"  style="fill:#FFFFFF; stroke:#B00000"/><rect x="39" y="25" width="16" height="10"  style="fill:#FFFFFF; stroke:#B00000"/><line x1="25" y1="22" x2="30" y2="22"  style="stroke:#404040"/><line x1="30" y1="22" x2="30" y2="30"  style="stroke:#404040"/><line x1="30" y1="30" x2="35" y2="30"  style="stroke:#404040"/><text x="17" y="13"  style="font-size:12; fill:#E00000; font-family:SansSerif">  match</text></svg></configure>
                                                                                    </property>
                                                                                </entity>
                                                                            </entity>
                                                                            <entity name="Replacement" class="ptolemy.actor.gt.Replacement">
                                                                                <entity name="A" class="ptolemy.actor.gt.AtomicActorMatcher">
                                                                                    <property name="operations" class="ptolemy.actor.gt.GTIngredientsAttribute" value="(ptolemy.actor.gt.ingredients.operations.RenameOperation/false/&quot;_$(A.getName())_&quot;)">
                                                                                    </property>
                                                                                    <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="A">
                                                                                    </property>
                                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="{210, 140}">
                                                                                    </property>
                                                                                    <property name="_iconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                                                                                        <configure><svg><rect x="0" y="0" width="60" height="40"  style="fill:#C0C0C0"/><rect x="5" y="17" width="16" height="10"  style="fill:#FFFFFF; stroke:#B00000"/><rect x="39" y="25" width="16" height="10"  style="fill:#FFFFFF; stroke:#B00000"/><line x1="25" y1="22" x2="30" y2="22"  style="stroke:#404040"/><line x1="30" y1="22" x2="30" y2="30"  style="stroke:#404040"/><line x1="30" y1="30" x2="35" y2="30"  style="stroke:#404040"/><text x="17" y="13"  style="font-size:12; fill:#E00000; font-family:SansSerif">  match</text></svg></configure>
                                                                                    </property>
                                                                                </entity>
                                                                            </entity>
                                                                        </entity>
                                                                    </configure>
                                                                </entity>
                                                                <entity name="Exception" class="ptolemy.domains.ptera.lib.Report">
                                                                    <property name="message" class="ptolemy.data.expr.StringParameter" value="User operation cancelled.">
                                                                    </property>
                                                                    <property name="mode" class="ptolemy.data.expr.ChoiceParameter" value="runtime exception">
                                                                    </property>
                                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[240.0, 195.0]">
                                                                    </property>
                                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                                    </property>
                                                                </entity>
                                                                <relation name="relation" class="ptolemy.domains.ptera.kernel.SchedulingRelation">
                                                                    <property name="annotation" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="exitAngle" class="ptolemy.data.expr.Parameter" value="0.6283185307179586">
                                                                    </property>
                                                                    <property name="gamma" class="ptolemy.data.expr.Parameter" value="1.6976782830365942">
                                                                    </property>
                                                                    <property name="defaultTransition" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="default"/>
                                                                    </property>
                                                                    <property name="nondeterministic" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="preemptive" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="delay" class="ptolemy.domains.ptera.kernel.SchedulingRelation$1" value="0.0">
                                                                    </property>
                                                                    <property name="arguments" class="ptolemy.kernel.util.StringAttribute" value="{}">
                                                                    </property>
                                                                    <property name="canceling" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="priority" class="ptolemy.actor.parameters.Priority" value="0">
                                                                    </property>
                                                                    <property name="triggers" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="reset" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="initialize"/>
                                                                    </property>
                                                                </relation>
                                                                <relation name="relation_1_2" class="ptolemy.domains.ptera.kernel.SchedulingRelation">
                                                                    <property name="annotation" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="guardExpression" class="ptolemy.kernel.util.StringAttribute" value="matched">
                                                                        <display name="condition"/>
                                                                    </property>
                                                                    <property name="exitAngle" class="ptolemy.data.expr.Parameter" value="0.6283185307179586">
                                                                    </property>
                                                                    <property name="gamma" class="ptolemy.data.expr.Parameter" value="1.7252882586172558">
                                                                    </property>
                                                                    <property name="defaultTransition" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="default"/>
                                                                    </property>
                                                                    <property name="nondeterministic" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="preemptive" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="delay" class="ptolemy.domains.ptera.kernel.SchedulingRelation$1" value="0.0">
                                                                    </property>
                                                                    <property name="arguments" class="ptolemy.kernel.util.StringAttribute" value="{}">
                                                                    </property>
                                                                    <property name="canceling" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="priority" class="ptolemy.actor.parameters.Priority" value="0">
                                                                    </property>
                                                                    <property name="triggers" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="reset" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="initialize"/>
                                                                    </property>
                                                                </relation>
                                                                <relation name="relation_1_3" class="ptolemy.domains.ptera.kernel.SchedulingRelation">
                                                                    <property name="annotation" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="guardExpression" class="ptolemy.kernel.util.StringAttribute" value="response">
                                                                        <display name="condition"/>
                                                                    </property>
                                                                    <property name="exitAngle" class="ptolemy.data.expr.Parameter" value="0.6096594365021583">
                                                                    </property>
                                                                    <property name="gamma" class="ptolemy.data.expr.Parameter" value="1.6758540925766647">
                                                                    </property>
                                                                    <property name="defaultTransition" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="default"/>
                                                                    </property>
                                                                    <property name="nondeterministic" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="preemptive" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="delay" class="ptolemy.domains.ptera.kernel.SchedulingRelation$1" value="0.0">
                                                                    </property>
                                                                    <property name="arguments" class="ptolemy.kernel.util.StringAttribute" value="{}">
                                                                    </property>
                                                                    <property name="canceling" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="priority" class="ptolemy.actor.parameters.Priority" value="0">
                                                                    </property>
                                                                    <property name="triggers" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="reset" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="initialize"/>
                                                                    </property>
                                                                </relation>
                                                                <relation name="relation_1_4" class="ptolemy.domains.ptera.kernel.SchedulingRelation">
                                                                    <property name="annotation" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="guardExpression" class="ptolemy.kernel.util.StringAttribute" value="matched">
                                                                        <display name="condition"/>
                                                                    </property>
                                                                    <property name="exitAngle" class="ptolemy.data.expr.Parameter" value="2.4360514983322235">
                                                                    </property>
                                                                    <property name="gamma" class="ptolemy.data.expr.Parameter" value="0.07284049670960514">
                                                                    </property>
                                                                    <property name="defaultTransition" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="default"/>
                                                                    </property>
                                                                    <property name="nondeterministic" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="preemptive" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="delay" class="ptolemy.domains.ptera.kernel.SchedulingRelation$1" value="0.0">
                                                                    </property>
                                                                    <property name="arguments" class="ptolemy.kernel.util.StringAttribute" value="{}">
                                                                    </property>
                                                                    <property name="canceling" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="priority" class="ptolemy.actor.parameters.Priority" value="0">
                                                                    </property>
                                                                    <property name="triggers" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="reset" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="initialize"/>
                                                                    </property>
                                                                </relation>
                                                                <relation name="relation_1_5" class="ptolemy.domains.ptera.kernel.SchedulingRelation">
                                                                    <property name="annotation" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="guardExpression" class="ptolemy.kernel.util.StringAttribute" value="!response">
                                                                        <display name="condition"/>
                                                                    </property>
                                                                    <property name="exitAngle" class="ptolemy.data.expr.Parameter" value="0.6283185307179586">
                                                                    </property>
                                                                    <property name="gamma" class="ptolemy.data.expr.Parameter" value="0.08501772930757115">
                                                                    </property>
                                                                    <property name="defaultTransition" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="default"/>
                                                                    </property>
                                                                    <property name="nondeterministic" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="preemptive" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="delay" class="ptolemy.domains.ptera.kernel.SchedulingRelation$1" value="0.0">
                                                                    </property>
                                                                    <property name="arguments" class="ptolemy.kernel.util.StringAttribute" value="{}">
                                                                    </property>
                                                                    <property name="canceling" class="ptolemy.data.expr.Parameter" value="false">
                                                                    </property>
                                                                    <property name="priority" class="ptolemy.actor.parameters.Priority" value="0">
                                                                    </property>
                                                                    <property name="triggers" class="ptolemy.data.expr.StringParameter" value="">
                                                                    </property>
                                                                    <property name="reset" class="ptolemy.data.expr.Parameter" value="false">
                                                                        <display name="initialize"/>
                                                                    </property>
                                                                </relation>
                                                                <link port="InitModelWithContainer.outgoingPort" relation="relation"/>
                                                                <link port="Match.incomingPort" relation="relation"/>
                                                                <link port="Match.outgoingPort" relation="relation_1_2"/>
                                                                <link port="Report.incomingPort" relation="relation_1_2"/>
                                                                <link port="Report.outgoingPort" relation="relation_1_3"/>
                                                                <link port="Report.outgoingPort" relation="relation_1_5"/>
                                                                <link port="Transform.incomingPort" relation="relation_1_3"/>
                                                                <link port="Transform.incomingPort" relation="relation_1_4"/>
                                                                <link port="Transform.outgoingPort" relation="relation_1_4"/>
                                                                <link port="Exception.incomingPort" relation="relation_1_5"/>
                                                            </entity>
                                                        </entity>
                                                    </configure>
                                                </property>
                                                <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
                                                    <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Synchronize the communication between&#10;left-hand-side actors and right-hand-side&#10;actors in the Rendezvous (CSP) model of&#10;computation.">
                                                    </property>
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[285.0, 25.0]">
                                                    </property>
                                                </property>
                                                <entity name="Barrier" class="ptolemy.domains.rendezvous.lib.Barrier">
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[215.0, 65.0]">
                                                    </property>
                                                </entity>
                                                <entity name="_A1_" class="ptolemy.actor.TypedCompositeActor">
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[80.0, 125.0]">
                                                    </property>
                                                    <property name="_icon" class="ptolemy.vergil.icon.EditorIcon">
                                                        <property name="ellipse" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
                                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, 0.0]">
                                                            </property>
                                                            <property name="width" class="ptolemy.data.expr.Parameter" value="20">
                                                            </property>
                                                            <property name="height" class="ptolemy.data.expr.Parameter" value="20">
                                                            </property>
                                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                            </property>
                                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                            </property>
                                                        </property>
                                                    </property>
                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                    </property>
                                                    <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="A">
                                                    </property>
                                                    <port name="input" class="ptolemy.actor.TypedIOPort">
                                                        <property name="input"/>
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 200.0}">
                                                        </property>
                                                        <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="A.input">
                                                        </property>
                                                    </port>
                                                    <port name="output" class="ptolemy.actor.TypedIOPort">
                                                        <property name="output"/>
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[570.0, 200.0]">
                                                        </property>
                                                        <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="A.output">
                                                        </property>
                                                    </port>
                                                    <relation name="relation" class="ptolemy.actor.TypedIORelation">
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                        </property>
                                                    </relation>
                                                    <link port="input" relation="relation"/>
                                                    <link port="output" relation="relation"/>
                                                </entity>
                                                <entity name="_B1_" class="ptolemy.actor.TypedCompositeActor">
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[285.0, 125.0]">
                                                    </property>
                                                    <property name="_icon" class="ptolemy.vergil.icon.EditorIcon">
                                                        <property name="ellipse" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
                                                            <property name="_location" class="ptolemy.kernel.util.Location" value="[0.0, 0.0]">
                                                            </property>
                                                            <property name="width" class="ptolemy.data.expr.Parameter" value="20">
                                                            </property>
                                                            <property name="height" class="ptolemy.data.expr.Parameter" value="20">
                                                            </property>
                                                            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                            </property>
                                                            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                            </property>
                                                        </property>
                                                    </property>
                                                    <property name="_hideName" class="ptolemy.data.expr.SingletonParameter" value="true">
                                                    </property>
                                                    <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="B">
                                                    </property>
                                                    <port name="input" class="ptolemy.actor.TypedIOPort">
                                                        <property name="input"/>
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 200.0}">
                                                        </property>
                                                        <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="B.input">
                                                        </property>
                                                    </port>
                                                    <port name="output" class="ptolemy.actor.TypedIOPort">
                                                        <property name="output"/>
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[570.0, 200.0]">
                                                        </property>
                                                        <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="B.output">
                                                        </property>
                                                    </port>
                                                    <relation name="relation" class="ptolemy.actor.TypedIORelation">
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                        </property>
                                                    </relation>
                                                    <link port="input" relation="relation"/>
                                                    <link port="output" relation="relation"/>
                                                </entity>
                                                <relation name="relation2" class="ptolemy.actor.TypedIORelation">
                                                    <property name="width" class="ptolemy.data.expr.Parameter" value="1">
                                                    </property>
                                                    <vertex name="vertex1" value="[140.0, 125.0]">
                                                    </vertex>
                                                    <property name="patternObject" class="ptolemy.actor.gt.PatternObjectAttribute" value="relation">
                                                    </property>
                                                </relation>
                                                <link port="Barrier.input" relation="relation2"/>
                                                <link port="_A1_.output" relation="relation2"/>
                                                <link port="_B1_.input" relation="relation2"/>
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="Esoteric" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <entity name="Exec" class="ptolemy.actor.lib.Exec">
                                </entity>
                                <entity name="CalInterpreter" class="ptolemy.caltrop.actors.CalInterpreter">
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="calCode">
                                        </property>
                                    </property>
                                </entity>
                                <entity name="OrderedMerge" class="ptolemy.actor.lib.OrderedMerge">
                                </entity>
                                <entity name="RemoveNilTokens" class="ptolemy.actor.lib.RemoveNilTokens">
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="ExperimentalDomains" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Experimental Domains</doc>
                                <entity name="CellularAutomata" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>cellular automata actors</doc>
                                            <property name="CA Director" class="ptolemy.domains.ca.kernel.CADirector">
                                            </property>
                                            <entity name="2D Convolution" class="ptolemy.domains.ca.lib.CA2DConvolution">
                                            </entity>
                                            <entity name="CA Viewer" class="ptolemy.domains.ca.lib.gui.CAViewer">
                                                <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
                                                </property>
                                                <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
                                                </property>
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="DDE" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Distributed Discrete Event Domain</doc>
                                            <property name="DDE Director" class="ptolemy.domains.dde.kernel.DDEDirector">
                                            </property>
                                            <entity name="dde" class="ptolemy.moml.EntityLibrary">
                                                <configure>
                                                    <group>
                                                        <doc>Distributed Discrete Event actors</doc>
                                                        <entity name="DDESink" class="ptolemy.domains.dde.lib.DDESink">
                                                        </entity>
                                                        <entity name="DoubleFork" class="ptolemy.domains.dde.lib.DoubleFork">
                                                        </entity>
                                                        <entity name="Wire" class="ptolemy.domains.dde.lib.Wire">
                                                        </entity>
                                                    </group>
                                                </configure>
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="Giotto" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Giotto Domain</doc>
                                            <property name="CodeGenerator" class="ptolemy.domains.giotto.kernel.GiottoCodeGenerator">
                                            </property>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="PetriNet" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Petri net actors</doc>
                                            <entity name="Place" class="ptolemy.domains.petrinet.kernel.Place">
                                            </entity>
                                            <entity name="PetriNetActor" class="ptolemy.domains.petrinet.kernel.PetriNetActor">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="PSDF" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>PSDF Domain</doc>
                                            <property name="PSDF Director" class="ptolemy.domains.psdf.kernel.PSDFDirector">
                                            </property>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="Pthales" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>PThales actors</doc>
                                            <entity name="PthalesGenericActor" class="ptolemy.domains.pthales.lib.PthalesGenericActor">
                                            </entity>
                                            <entity name="PthalesCompositeActor" class="ptolemy.domains.pthales.lib.PthalesCompositeActor">
                                            </entity>
                                            <entity name="PthalesAddHeaderActor" class="ptolemy.domains.pthales.lib.PthalesAddHeaderActor">
                                            </entity>
                                            <entity name="PthalesRemoveHeaderActor" class="ptolemy.domains.pthales.lib.PthalesRemoveHeaderActor">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="Ptides" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Ptides actors</doc>
                                            <entity name="PtidesPlatform" class="ptolemy.domains.ptides.kernel.PtidesPlatform">
                                                <property name="_configurer" class="ptolemy.actor.gui.InsideEntityEditorPaneFactory">
                                                </property>
                                                <property name="_tableauFactory" class="ptolemy.actor.gui.LevelSkippingTableauFactory">
                                                </property>
                                                <property name="_location" class="ptolemy.kernel.util.Location" value="[230.0, 365.0]">
                                                </property>
                                                <property name="_icon" class="ptolemy.vergil.icon.EditorIcon">
                                                    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={195, 129, 934, 634}, maximized=false}">
                                                    </property>
                                                    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
                                                    </property>
                                                    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="4.0">
                                                    </property>
                                                    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{0.0, 0.0}">
                                                    </property>
                                                    <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{10.0, 6.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="60">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="40">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.0,0.0,1.0}">
                                                        </property>
                                                        <property name="_renderFirst" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                    <property name="rectangle2" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{10.0, 6.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="56.0">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="36.0">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.8,0.8,1.0}">
                                                        </property>
                                                    </property>
                                                    <property name="rectangle3" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{1.0, 4.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="10.0">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="8.0">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="_renderLast" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                    <property name="rectangle4" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{1.0, 17.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="10.0">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="8.0">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="_renderLast" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                    <property name="rectangle5" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{24.0, 12.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="10.0">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="8.0">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
                                                        </property>
                                                        <property name="_renderLast" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                    <property name="line" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{13.0, 11.0}">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="5.0">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line2" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{7.0, 4.0}">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="5.0">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line3" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{7.0, 17.0}">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="5.0">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                    </property>
                                                    <property name="line4" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{13.0, 4.0}">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="13.0">
                                                        </property>
                                                    </property>
                                                    <property name="line5" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{30.0, 11.0}">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="5.0">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                    </property>
                                                    <property name="rectangle6" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{-16.0, 4.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="4.0">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="4.0">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
                                                        </property>
                                                        <property name="_renderLast" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                    <property name="line6" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{-14.0, 4.0}">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="10.0">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
                                                        </property>
                                                    </property>
                                                    <property name="rectangle7" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{36.0, 11.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="4.0">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="4.0">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
                                                        </property>
                                                        <property name="_renderLast" class="ptolemy.kernel.util.SingletonAttribute">
                                                        </property>
                                                    </property>
                                                    <property name="ellipse" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{29.0, -3.0}">
                                                        </property>
                                                        <property name="lineColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0,0.0,0.0,1.0}">
                                                        </property>
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="13.0">
                                                        </property>
                                                        <property name="height" class="ptolemy.data.expr.Parameter" value="13.0">
                                                        </property>
                                                        <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
                                                        </property>
                                                        <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,1.0,0.0,1.0}">
                                                        </property>
                                                    </property>
                                                    <property name="line7" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{26.0, -5.0}">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="3.0">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="2.0">
                                                        </property>
                                                    </property>
                                                    <property name="line8" class="ptolemy.vergil.kernel.attributes.LineAttribute">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="{29.0, -3.0}">
                                                        </property>
                                                        <property name="x" class="ptolemy.data.expr.Parameter" value="2.0">
                                                        </property>
                                                        <property name="y" class="ptolemy.data.expr.Parameter" value="-2.0">
                                                        </property>
                                                    </property>
                                                </property>
                                                <entity name="PtidesPlatformContents" class="ptolemy.domains.ptides.kernel.PtidesPlatform$PtidesPlatformContents">
                                                    <property name="PtidesDirector" class="ptolemy.domains.ptides.kernel.PtidesDirector">
                                                        <property name="_location" class="ptolemy.kernel.util.Location" value="[95.0, 65.0]">
                                                        </property>
                                                    </property>
                                                    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={23, 47, 934, 634}, maximized=false}">
                                                    </property>
                                                    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
                                                    </property>
                                                    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
                                                    </property>
                                                    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{350.0, 262.0}">
                                                    </property>
                                                </entity>
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="TimedMultitasking" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>TM actors</doc>
                                            <property name="SchedulePlotter" class="ptolemy.domains.tm.kernel.SchedulePlotter">
                                            </property>
                                            <entity name="TMCompositeFacade" class="ptolemy.domains.tm.lib.TMCompositeFacade">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="GraphTransformation" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <property name="TransformationAttribute" class="ptolemy.actor.gt.controller.TransformationAttribute">
                                    <configure>
                                        <entity name="ModelUpdater" class="ptolemy.actor.gt.controller.ModelUpdater">
                                        </entity>
                                    </configure>
                                </property>
                                <entity name="ModelCombine" class="ptolemy.actor.gt.ModelCombine">
                                </entity>
                                <entity name="ModelExecutor" class="ptolemy.actor.gt.ModelExecutor">
                                </entity>
                                <entity name="ModelGenerator" class="ptolemy.actor.gt.ModelGenerator">
                                </entity>
                                <entity name="ModelView" class="ptolemy.actor.gt.ModelView">
                                </entity>
                                <entity name="ModelUpdater" class="ptolemy.actor.gt.controller.ModelUpdater">
                                </entity>
                                <entity name="MoMLGenerator" class="ptolemy.actor.gt.MoMLGenerator">
                                </entity>
                                <entity name="TransformationController" class="ptolemy.actor.gt.controller.TransformationController">
                                </entity>
                                <entity name="TransformationRule" class="ptolemy.actor.gt.TransformationRule">
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="Python" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Python actors</doc>
                                <entity name="PythonActor" class="ptolemy.actor.lib.python.PythonScript">
                                    <property name="script" class="ptolemy.kernel.util.StringAttribute" value="class Main :&#10;  &quot;scale&quot;&#10;  def fire(self) :&#10;    if not self.input.hasToken(0) :&#10;      return&#10;    s = self.scale.getToken()&#10;    t = self.input.get(0)&#10;    self.output.broadcast(s.multiply(t))&#10;&#10;">
                                        <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                                            <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                                            </property>
                                        </property>
                                    </property>
                                    <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                                        </property>
                                        <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/python">
                                        </property>
                                    </property>
                                    <port name="input" class="ptolemy.actor.TypedIOPort">
                                        <property name="input"/>
                                    </port>
                                    <port name="output" class="ptolemy.actor.TypedIOPort">
                                        <property name="output"/>
                                    </port>
                                </entity>
                                <entity name="PythonScript" class="ptolemy.actor.lib.python.PythonScript">
                                    <property name="_editorFactory" class="ptolemy.vergil.toolbox.TextEditorConfigureFactory">
                                        <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                                        </property>
                                    </property>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="RegressionTest" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <property name="TesterDirector" class="ptolemy.domains.tester.kernel.TesterDirector">
                                </property>
                                <property name="TestExceptionAttribute" class="ptolemy.actor.lib.TestExceptionAttribute">
                                </property>
                                <entity name="GetCausalityInterface" class="ptolemy.actor.lib.GetCausalityInterface">
                                </entity>
                                <entity name="CurrentMicrostep" class="ptolemy.actor.lib.CurrentMicrostep">
                                </entity>
                                <entity name="NonStrictTest" class="ptolemy.actor.lib.NonStrictTest">
                                </entity>
                                <entity name="Test" class="ptolemy.actor.lib.Test">
                                </entity>
                                <entity name="TestActorPortDepth" class="ptolemy.domains.de.lib.TestActorPortDepth">
                                </entity>
                                <entity name="TypeTest" class="ptolemy.actor.lib.TypeTest">
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="Security" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <entity name="KeyWriter" class="ptolemy.actor.lib.security.KeyWriter">
                                    <doc>Read a secret key or public key and write it to a key store.&#10;	   </doc>
                                </entity>
                                <entity name="PublicKeyReader" class="ptolemy.actor.lib.security.PublicKeyReader">
                                    <doc>Read a public key from a key store and output it.</doc>
                                </entity>
                                <entity name="PrivateKeyReader" class="ptolemy.actor.lib.security.PrivateKeyReader">
                                    <doc>Read a private key from a key store and output it.</doc>
                                </entity>
                                <entity name="SecretKey" class="ptolemy.actor.lib.security.SecretKey">
                                    <doc>Create a secret key and output it.</doc>
                                </entity>
                                <entity name="SecretKeyReader" class="ptolemy.actor.lib.security.SecretKeyReader">
                                    <doc>Read a secret key from a key store and output it.</doc>
                                </entity>
                                <entity name="SignatureSigner" class="ptolemy.actor.lib.security.SignatureSigner">
                                    <doc>Creates a signature for the given piece of data and&#10;	  creates the key to be sent to the signature verifier.</doc>
                                </entity>
                                <entity name="SignatureVerifier" class="ptolemy.actor.lib.security.SignatureVerifier">
                                    <doc>Receives a key from an AsymmetricDecryption actor and&#10;          uses it to encrypt a data input based on a given asymmetric&#10;          algorithm.</doc>
                                </entity>
                                <entity name="SymmetricDecryption" class="ptolemy.actor.lib.security.SymmetricDecryption">
                                    <doc>Receives a key from a SymmetricEncryption actor and&#10;          uses it to decrypt a data input based on a given symmetric&#10;          algorithm.</doc>
                                </entity>
                                <entity name="SymmetricEncryption" class="ptolemy.actor.lib.security.SymmetricEncryption">
                                    <doc>Creates and sends a key to a SymmetricDecryption and&#10;	  encrypts incoming data based on a given symmetric&#10;	  algorithm.</doc>
                                </entity>
                                <entity name="SymmetricCrypto" class="ptolemy.actor.lib.security.SymmetricCrypto">
                                    <doc>Perform symmetric encryption or decryption using a given key.</doc>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="Wireless" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <doc>Wireless/Sensor network library</doc>
                                <property name="WirelessDirector" class="ptolemy.domains.wireless.kernel.WirelessDirector">
                                </property>
                                <entity name="WirelessActors" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Wireless domain actors</doc>
                                            <entity name="CollisionDetector" class="ptolemy.domains.wireless.lib.CollisionDetector">
                                            </entity>
                                            <entity name="GetProperties" class="ptolemy.domains.wireless.lib.GetProperties">
                                            </entity>
                                            <entity name="GraphicalLocator" class="ptolemy.domains.wireless.lib.GraphicalLocator">
                                            </entity>
                                            <entity name="Locator" class="ptolemy.domains.wireless.lib.Locator">
                                            </entity>
                                            <entity name="NodeRandomizer" class="ptolemy.domains.wireless.lib.NodeRandomizer">
                                            </entity>
                                            <entity name="TerrainProperty" class="ptolemy.domains.wireless.lib.TerrainProperty">
                                                <property name="_icon" class="ptolemy.vergil.icon.EditorIcon">
                                                    <property name="terrain" class="ptolemy.domains.wireless.lib.TerrainProperty$1">
                                                        <property name="width" class="ptolemy.data.expr.Parameter" value="3.0">
                                                        </property>
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="LinkVisualizer" class="ptolemy.domains.wireless.lib.LinkVisualizer">
                                            </entity>
                                            <entity name="TransmitPropertyTransformer" class="ptolemy.domains.wireless.lib.TransmitPropertyTransformer">
                                            </entity>
                                            <entity name="Triangulator" class="ptolemy.domains.wireless.lib.Triangulator">
                                            </entity>
                                            <entity name="WirelessComposite" class="ptolemy.domains.wireless.kernel.WirelessComposite">
                                                <property name="DEDirector" class="ptolemy.domains.de.kernel.DEDirector">
                                                    <property name="_location" class="ptolemy.kernel.util.Location" value="[70.0, 35.0]">
                                                    </property>
                                                </property>
                                            </entity>
                                            <entity name="WiredToWireless" class="ptolemy.domains.wireless.lib.WiredToWireless">
                                            </entity>
                                            <entity name="WirelessToWired" class="ptolemy.domains.wireless.lib.WirelessToWired">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                                <entity name="WirelessChannels" class="ptolemy.moml.EntityLibrary">
                                    <configure>
                                        <group>
                                            <doc>Wireless domain channels</doc>
                                            <entity name="AtomicWirelessChannel" class="ptolemy.domains.wireless.kernel.AtomicWirelessChannel">
                                            </entity>
                                            <entity name="DelayChannel" class="ptolemy.domains.wireless.lib.DelayChannel">
                                            </entity>
                                            <entity name="LimitedRangeChannel" class="ptolemy.domains.wireless.lib.LimitedRangeChannel">
                                            </entity>
                                            <entity name="ErasureChannel" class="ptolemy.domains.wireless.lib.ErasureChannel">
                                            </entity>
                                            <entity name="PowerLossChannel" class="ptolemy.domains.wireless.lib.PowerLossChannel">
                                            </entity>
                                        </group>
                                    </configure>
                                </entity>
                            </group>
                        </configure>
                    </entity>
                    <entity name="XML" class="ptolemy.moml.EntityLibrary">
                        <configure>
                            <group>
                                <entity name="StringToXML" class="ptolemy.actor.lib.conversions.StringToXML">
                                </entity>
                                <entity name="XSLTransformer" class="ptolemy.actor.lib.xslt.XSLTransformer">
                                </entity>
                                <entity name="XMLInclusion" class="ptolemy.actor.lib.xslt.XMLInclusion">
                                </entity>
                            </group>
                        </configure>
                    </entity>
                </group>
            </configure>
        </entity>
    </entity>
    <entity name="icon editor library" class="ptolemy.kernel.CompositeEntity">
        <property name="_libraryMarker" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
            <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 1.0}">
            </property>
        </property>
        <property name="ellipse" class="ptolemy.vergil.kernel.attributes.EllipseAttribute">
            <property name="width" class="ptolemy.data.expr.Parameter" value="30">
            </property>
            <property name="height" class="ptolemy.data.expr.Parameter" value="30">
            </property>
            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="arc" class="ptolemy.vergil.kernel.attributes.ArcAttribute">
            <property name="width" class="ptolemy.data.expr.Parameter" value="30">
            </property>
            <property name="height" class="ptolemy.data.expr.Parameter" value="30">
            </property>
            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="image" class="ptolemy.vergil.kernel.attributes.ImageAttribute">
        </property>
        <property name="line" class="ptolemy.vergil.kernel.attributes.LineAttribute">
            <property name="x" class="ptolemy.data.expr.Parameter" value="40.0">
            </property>
            <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
            </property>
        </property>
        <property name="Arrow" class="ptolemy.vergil.kernel.attributes.ArrowAttribute">
            <property name="x" class="ptolemy.data.expr.Parameter" value="40.0">
            </property>
            <property name="y" class="ptolemy.data.expr.Parameter" value="0.0">
            </property>
        </property>
        <property name="polygon" class="ptolemy.vergil.kernel.attributes.ResizablePolygonAttribute">
            <property name="width" class="ptolemy.data.expr.Parameter" value="35">
            </property>
            <property name="height" class="ptolemy.data.expr.Parameter" value="20">
            </property>
            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
            </property>
            <property name="vertices" class="ptolemy.data.expr.Parameter" value="{0.0, 0.0, 20.0, 0.0, 5.0, 20.0, -15.0, 20.0}">
            </property>
        </property>
        <property name="rectangle" class="ptolemy.vergil.kernel.attributes.RectangleAttribute">
            <property name="width" class="ptolemy.data.expr.Parameter" value="60">
            </property>
            <property name="height" class="ptolemy.data.expr.Parameter" value="40">
            </property>
            <property name="centered" class="ptolemy.data.expr.Parameter" value="true">
            </property>
            <property name="fillColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 1.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="ParameterValue" class="ptolemy.vergil.kernel.attributes.AttributeValueAttribute">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="6">
            </property>
        </property>
        <property name="ParameterExpression" class="ptolemy.vergil.kernel.attributes.AttributeExpressionAttribute">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="6">
            </property>
        </property>
    </entity>
</entity>

/home/travis/build/icyphy/ptII/ptolemy/configs/test/configurationTools.tcl
/home/travis/build/icyphy/ptII/ptolemy/configs/test/missingDemos.tcl
Updating /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/configs/doc/models.txt.  This could take a minute.


==== $PTII/ptolemy/configs/test/missingDemos.tcl: missingDemos-0.5 Update ptolemy/configs/doc/models.txt
==== Contents of test case:

    puts "Updating $PTII/ptolemy/configs/doc/models.txt.  This could take a minute."
    exec -stderrok make -C ../doc update
    puts "Done updating $PTII/ptolemy/configs/doc/models.txt"
    file exists ../doc/models.txt

==== Test generated error:
make: *** ../doc: No such file or directory.  Stop.
    while executing
"exec -stderrok make -C ../doc update"
    ("uplevel" body line 3)
    invoked from within
"uplevel $contents_of_test"


==== $PTII/ptolemy/configs/test/missingDemos.tcl: missingDemos-1.0 Look for demos listed in configs/doc/demos.html that are not in models.txt
==== Contents of test case:

    # Run it once to build any missing files.  It is ok if we have output on stderr.
    exec -stderrok make -C ../doc missingDemos
    jdkCaptureOutAndErr {
	exec make -C ../doc --no-print-directory missingDemos
    } out err
    puts "Stderr for 'make -C ../doc missingDemos' was\n--start--\n$err\n--end--"
    regsub -all {make: [^']*'} $err {} err2
    list $out $err2

==== Test generated error:
make: *** ../doc: No such file or directory.  Stop.
    while executing
"exec -stderrok make -C ../doc missingDemos"
    ("uplevel" body line 3)
    invoked from within
"uplevel $contents_of_test"
Stderr for '/home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/configs/test/missingDemos' was
--start--
/home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/configs/test/missingDemos: 45: /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/configs/test/missingDemos: Syntax error: Bad fd number
--end--


==== $PTII/ptolemy/configs/test/missingDemos.tcl: missingDemos-2.0 Run the missingDemos script.
==== Contents of test case:

    jdkCaptureOutAndErr {
	# In the installer, missingDemos might not be executable.
	exec chmod a+x $PTII/ptolemy/configs/test/missingDemos
        exec $PTII/ptolemy/configs/test/missingDemos
    } out err
    puts "Stderr for '$PTII/ptolemy/configs/test/missingDemos' was\n--start--\n$err\n--end--"
    regsub -all {make: [^']*'} $err {} err2
    list $out $err2

==== Result was:
{} {/home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/configs/test/missingDemos: 45: /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/configs/test/missingDemos: Syntax error: Bad fd number}
---- Result should have been:
{} {}
---- missingDemos-2.0 FAILED
/home/travis/build/icyphy/ptII/ptolemy/configs/test/validDemos.tcl
Validating the xml in /auto/ xml files after removing the configure blocks
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y11/modularSemantics/test/auto/DEWithAdd.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y11/modularSemantics/test/auto/DECTController.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-3 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y11/modularSemantics/test/auto/CTLorenz.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-3 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-4 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y11/modularSemantics/test/auto/PNRampAdd.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-4 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-5 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y11/modularSemantics/test/auto/FSMInFeedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-5 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-6 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y11/modularSemantics/test/auto/SRConstructiveFeedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-6 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-7 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y12/designContracts/test/auto/DCMotorTol.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-7 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-8 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y12/designContracts/test/auto/DCMotorTolWithDelayCompensation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-8 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-9 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/Collision.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-9 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-10 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/CollisionSimultaneousDifferentMasses.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-10 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-11 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/Collision6Modal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-11 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-12 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/Collision5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-12 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-13 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/BilliardsOneDimensional.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-13 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-14 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/IntegratorLoopPlot.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-14 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-15 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/Friction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-15 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-16 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/Collision3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-16 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-17 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/LCDModal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-17 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-18 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/CollisionSimultaneousLoss.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-18 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-19 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/Collision4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-19 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-20 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/BouncingBall.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-20 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-21 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/DiodeInductorModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-21 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-22 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/BouncingBallModal2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-22 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-23 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/TwoCapacitorsModelWithDelays.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-23 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-24 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/CollisionSimultaneous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-24 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-25 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/papers/y14/constructive/models/test/auto/CollisionSimultaneousDifferentMasses2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-25 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-26 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/embedded/concurrent/test/auto/TrafficLight.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-26 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-27 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/architecture/test/auto/Count.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-27 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-28 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modal/test/auto/FSK.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-28 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-29 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modal/test/auto/ResettableTimer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-29 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-30 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modal/test/auto/Timeout.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-30 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-31 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modal/test/auto/ModalModelExample.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-31 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-32 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modal/test/auto/Preemptive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-32 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-33 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modal/test/auto/PreemptiveFixed.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-33 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-34 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modal/test/auto/History.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-34 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-35 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modal/test/auto/ModalSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-35 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-36 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modal/test/auto/SpontaneousFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-36 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-37 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modal/test/auto/Merge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-37 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-38 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modal/test/auto/Fibonacci.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-38 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-39 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modal/test/auto/Reset.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-39 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-40 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modal/test/auto/ModalClocks.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-40 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-41 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modal/test/auto/ModalDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-41 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-42 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/plotter/test/auto/SpectrumOfNoisySinusoids.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-42 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-43 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/pn/test/auto/SensorModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-43 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-44 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/pn/test/auto/HammingNumbers.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-44 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-45 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/pn/test/auto/RendezvousMerge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-45 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-46 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/pn/test/auto/WriteRegulator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-46 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-47 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/pn/test/auto/Barrier.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-47 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-48 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/pn/test/auto/ResourcePool.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-48 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-49 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/pn/test/auto/RendezvousOrderedMerge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-49 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-50 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/FinalStates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-50 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-51 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/ABROFlat_SA.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-51 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-52 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/ExtendedFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-52 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-53 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/ABCROHierarchical_SA.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-53 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-54 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/HysteresisWithDefault.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-54 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-55 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/ABROHierarchical_SA.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-55 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-56 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/FinalStatesImmediate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-56 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-57 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/FinalStatesResetDefault.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-57 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-58 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/ABROFlat_SA_BruteForce.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-58 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-59 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/ABCROFlat_SA.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-59 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-60 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/Hysteresis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-60 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-61 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/HierarchicalFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-61 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-62 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/CapriciousThermostat.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-62 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-63 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/ABROHierarchicalTermination.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-63 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-64 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/FinalStatesReset.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-64 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-65 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/ABCROHierarchicalTermination.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-65 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-66 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/FixedPointFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-66 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-67 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/fsm/test/auto/HierarchicalFSM_Flattened.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-67 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-68 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/ChannelSingle.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-68 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-69 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/ChannelWithOverrides.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-69 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-70 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/WidthInference.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-70 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-71 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/ChannelWithMultiInstance.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-71 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-72 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/ChannelBadDesign.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-72 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-73 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/AddingStringsException.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-73 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-74 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/AddingStrings.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-74 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-75 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/ApplyFunction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-75 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-76 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/ChannelGoodDesign.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-76 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-77 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/SpectrumOfNoisySinusoid.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-77 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-78 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/ChannelWithIterate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-78 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-79 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/ChannelWithSubclass.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-79 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-80 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/ChannelWithSubclassWithOverrides.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-80 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-81 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/HelloWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-81 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-82 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/CustomIcon.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-82 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-83 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/TypeModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-83 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-84 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/Spectrum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-84 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-85 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/vergil/test/auto/ChannelWithIcon.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-85 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-86 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/expressions/test/auto/NilTypes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-86 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-87 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/expressions/test/auto/FunctionComplex.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-87 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-88 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/expressions/test/auto/UnionTypes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-88 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-89 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/dataflow/test/auto/BetterFibonacci.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-89 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-90 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/discreteevents/test/auto/MM1Queue.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-90 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-91 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/discreteevents/test/auto/FSMSource.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-91 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-92 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/discreteevents/test/auto/InterarrivalTimes2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-92 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-93 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/discreteevents/test/auto/OpenQueueingNetwork.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-93 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-94 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/discreteevents/test/auto/Iteration.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-94 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-95 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/discreteevents/test/auto/FSMSource2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-95 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-96 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/discreteevents/test/auto/Feedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-96 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-97 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/discreteevents/test/auto/ModelTimeVsRealTime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-97 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-98 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/discreteevents/test/auto/DEExample.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-98 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-99 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/discreteevents/test/auto/SDFWithinDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-99 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-100 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/discreteevents/test/auto/Zeno.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-100 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-101 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/discreteevents/test/auto/InterarrivalTimes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-101 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-102 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/discreteevents/test/auto/InterarrivalTimes3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-102 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-103 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/discreteevents/test/auto/Wireless.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-103 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-104 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/discreteevents/test/auto/Priorities.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-104 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-105 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/LineFaultModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-105 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-106 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/LineFaultModel_noClockSync.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-106 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-107 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/LocalSource.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-107 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-108 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/SimplePtides.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-108 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-109 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/LineFaultModelWithTwoQMs.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-109 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-110 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/DEModelOfPtidesSimple.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-110 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-111 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/GeneratorResourceScheduler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-111 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-112 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/CommunicationDelayActors.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-112 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-113 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/HeartBeatDetector.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-113 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-114 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/ExecutionTime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-114 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-115 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/ResourceScheduler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-115 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-116 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/TimePlot.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-116 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-117 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/CommunicationDelayQM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-117 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-118 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/LineFaultModelWithCQM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-118 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-119 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/LineFaultModelWithDelays.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-119 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-120 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/CommunicationDelay1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-120 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-121 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/LineFaultModelWithQM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-121 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-122 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/PtidesSchema.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-122 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-123 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/PtidesSchema_Exception.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-123 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-124 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/modelingtime/test/auto/LineFaultModelWithBetterCQM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-124 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-125 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/synchronous/test/auto/PeriodicController.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-125 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-126 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/synchronous/test/auto/NonConstructive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-126 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-127 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/synchronous/test/auto/NotInLoop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-127 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-128 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/synchronous/test/auto/GuardedCount.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-128 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-129 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/synchronous/test/auto/Counter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-129 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-130 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/synchronous/test/auto/IfThenElseSR.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-130 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-131 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/synchronous/test/auto/NonStrictAndInLoop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-131 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-132 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/synchronous/test/auto/MalikCyclic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-132 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-133 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/synchronous/test/auto/CounterWithPre.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-133 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-134 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/synchronous/test/auto/MalikAcyclic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-134 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-135 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/synchronous/test/auto/ScaleInLoop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-135 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-136 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/synchronous/test/auto/PlaceHolderBecauseSynchronousHasNoTestsYet.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-136 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-137 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/continuous/test/auto/PiecewiseContinuous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-137 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-138 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/continuous/test/auto/NotPiecewiseContinuous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-138 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-139 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/continuous/test/auto/ImpulseResponse.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-139 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-140 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/continuous/test/auto/IntegratorInitialState.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-140 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-141 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/continuous/test/auto/ContinuousTransferFunctionEquiv.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-141 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-142 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/continuous/test/auto/LevelCrossingDetectorFeedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-142 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-143 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/continuous/test/auto/ContinuousTransferFunction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-143 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-144 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/continuous/test/auto/Lorenz.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-144 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-145 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/continuous/test/auto/ContinuousInsideDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-145 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-146 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/continuous/test/auto/FixedPointNoLimitation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-146 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-147 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/continuous/test/auto/BouncingBall.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-147 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-148 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/continuous/test/auto/TestTrigger.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-148 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-149 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/continuous/test/auto/PeriodicSamplerIntegrator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-149 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-150 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/intro/test/auto/GeneratorRegulatorProtector.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-150 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-151 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/types/test/auto/ObjectTypeCoerced2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-151 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-152 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/types/test/auto/ObjectTypeMethodInvocation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-152 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-153 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/types/test/auto/ObjectType.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-153 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-154 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/types/test/auto/TypeConversion.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-154 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-155 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../doc/books/systems/types/test/auto/ObjectTypeCoerced.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-155 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-156 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/moml/filter/test/auto/VariableDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-156 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-157 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/moml/filter/test/auto/expression.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-157 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-158 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/moml/filter/test/auto/modulation2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-158 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-159 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/moml/filter/test/auto/TimeGap.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-159 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-160 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/caltrop/test/auto/FunctionDefinition.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-160 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-161 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/caltrop/test/auto/FunctionClosures.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-161 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-162 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/caltrop/test/auto/Primes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-162 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-163 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/caltrop/test/auto/DDFDDI.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-163 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-164 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/caltrop/test/auto/SDFDDI.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-164 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-165 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/export/html/jsoup/test/auto/HTMLPageAssembler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-165 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-166 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/export/html/jsoup/test/auto/HTMLPageAssemblerInputError.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-166 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-167 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/export/html/jsoup/test/auto/HTMLPageAssemblerDivNotFound.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-167 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-168 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/export/html/jsoup/test/auto/HTMLPageAssemblerDuplicateID.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-168 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-169 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/export/html/jsoup/test/auto/HTMLPageAssemblerTemplateErrors.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-169 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-170 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/actor/lib/test/auto/ModelReference.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-170 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-171 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/taskpt/test/auto/SharedMemory.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-171 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-172 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/taskpt/test/auto/Task.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-172 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-173 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-flat-simple-1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-173 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-174 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-flat-simple-4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-174 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-175 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-flat-simple-5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-175 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-176 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-mulport-pn-1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-176 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-177 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-petrinetactor-4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-177 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-178 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-petrinetactor-1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-178 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-179 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-mulport.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-179 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-180 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-pn-composite-2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-180 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-181 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-flat-1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-181 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-182 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-petrinetactor-5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-182 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-183 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-flat-simple-6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-183 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-184 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-flat-simple-3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-184 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-185 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-flat-simple-9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-185 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-186 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-petrinetactor-2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-186 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-187 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-flat-simple-8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-187 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-188 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-pn-composite-4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-188 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-189 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-flat-simple-2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-189 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-190 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-flat-simple-7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-190 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-191 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/kernel/test/auto/test-petrinetactor-3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-191 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-192 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pthales/test/auto/HelloWorld0.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-192 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-193 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pthales/test/auto/Test3D.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-193 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-194 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pthales/test/auto/HelloWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-194 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-195 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pthales/test/auto/Test3D2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-195 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-196 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pthales/test/auto/Test2D2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-196 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-197 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pthales/test/auto/Test2D3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-197 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-198 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pthales/test/auto/Illustrative.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-198 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-199 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pthales/test/auto/Test2D1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-199 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-200 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/space/test/auto/DOPCenter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-200 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-201 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/space/test/auto/DOPCSV.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-201 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-202 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/space/test/auto/Placard.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-202 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-203 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/optimize/test/auto/SDFOptimize.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-203 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-204 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/feedbackHierarchy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-204 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-205 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/zeroRate7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-205 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-206 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/test1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-206 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-207 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/zeroRate_delay5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-207 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-208 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/bus.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-208 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-209 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/tunneling2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-209 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-210 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/test5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-210 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-211 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/vectorizationFactor1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-211 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-212 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/hierarchy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-212 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-213 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/zeroRate_delay4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-213 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-214 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/zeroRate8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-214 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-215 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/test6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-215 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-216 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/zeroRate_delay6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-216 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-217 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/test7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-217 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-218 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/knownFailedTests/tunneling2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-218 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-219 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/knownFailedTests/SDFMultiportCompositeWidthNotSet.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-219 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-220 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/test8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-220 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-221 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/test2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-221 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-222 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/zeroRate3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-222 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-223 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/tunneling.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-223 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-224 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/SDFMultiportCompositeWidthSet.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-224 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-225 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/test3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-225 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-226 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/vectorizationFactor2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-226 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-227 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/zeroRate1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-227 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-228 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/transparentHierarchy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-228 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-229 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/kernel/test/auto/zeroRate2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-229 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-230 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/Array.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-230 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-231 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/MultirateSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-231 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-232 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/relationGroup4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-232 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-233 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/NoisySinewave.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-233 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-234 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/FixPoint.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-234 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-235 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/test1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-235 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-236 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/InferInitProduction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-236 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-237 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/InferInitProductionDeeper.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-237 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-238 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/Objects.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-238 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-239 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/relationGroup12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-239 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-240 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/MaximumEntropySpectrum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-240 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-241 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/sdf_inside_pn.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-241 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-242 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/disconnectedSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-242 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-243 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/HDFwithTransientStates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-243 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-244 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/Expression.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-244 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-245 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/time1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-245 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-246 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/emptyRefinement.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-246 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-247 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/relationGroup9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-247 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-248 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/Butterfly.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-248 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-249 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/LMSAdaptive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-249 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-250 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/width2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-250 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-251 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/relationGroup8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-251 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-252 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/HDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-252 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-253 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/typeSystem_declared_Inports_OutportTypeException.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-253 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-254 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/typeSystem_oneDeclaredInportType_wrongTypeOutport.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-254 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-255 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/time2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-255 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-256 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/width3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-256 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-257 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/relationGroup7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-257 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-258 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/time5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-258 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-259 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/relationGroup14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-259 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-260 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/inferRelationWidth1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-260 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-261 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/relationGroup10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-261 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-262 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/HTVQ.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-262 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-263 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/relationGroup.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-263 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-264 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/typeSystem_Const_Integer_smallest_Type.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-264 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-265 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/GravitationWithCollisionDetection.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-265 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-266 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/width.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-266 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-267 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/Gravitation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-267 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-268 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/relationGroup11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-268 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-269 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/LogisticMap.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-269 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-270 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/relationGroup3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-270 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-271 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/FixFIR.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-271 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-272 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/filePortParameter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-272 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-273 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/initProductionInference.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-273 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-274 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/de_inside_sdf.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-274 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-275 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/sdf_inside_de.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-275 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-276 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/time3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-276 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-277 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/sdf_sdf1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-277 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-278 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/relationGroup13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-278 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-279 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/disconnectedHierarchicalSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-279 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-280 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/Spectrum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-280 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-281 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/RijndaelEncryption.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-281 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-282 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/time4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-282 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-283 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/OrthogonalCom.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-283 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-284 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/SDFEmptyIterations.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-284 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-285 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/relationGroup15.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-285 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-286 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/relationGroup6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-286 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-287 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/relationGroup2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-287 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-288 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/MultirateSDFwithTransientStates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-288 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-289 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/Eye.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-289 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-290 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/test/auto/relationGroup5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-290 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-291 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/vq/test/auto/test1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-291 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-292 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/vq/test/auto/test2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-292 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-293 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/LMSAdaptiveFIR.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-293 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-294 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/Autocorrelation5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-294 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-295 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/UpSample1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-295 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-296 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixSplit14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-296 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-297 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/Chop2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-297 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-298 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/LongJoin.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-298 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-299 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/DownSample1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-299 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-300 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/DotProductMatrix.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-300 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-301 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/IntJoin3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-301 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-302 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/FIR2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-302 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-303 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/DelayLine.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-303 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-304 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MaximumEntropySpectrum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-304 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-305 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/BitsToInt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-305 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-306 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/VariableLattice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-306 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-307 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixSplit9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-307 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-308 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixToSequence.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-308 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-309 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixSplit13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-309 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-310 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/VariableRecursiveLattice2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-310 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-311 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/ArrayToSequenceTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-311 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-312 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixSplit10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-312 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-313 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/VariableRecursiveLattice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-313 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-314 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/DotProduct.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-314 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-315 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixSplit3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-315 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-316 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixSplit4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-316 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-317 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/IntJoin1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-317 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-318 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/Autocorrelation4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-318 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-319 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/VariableFIR2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-319 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-320 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/VariableLattice2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-320 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-321 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/LMSAdaptive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-321 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-322 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/DynamicRateChange.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-322 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-323 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/UpDownSample1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-323 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-324 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/Matrix2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-324 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-325 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/BooleanJoin.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-325 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-326 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixSplit2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-326 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-327 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/Autocorrelation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-327 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-328 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/SampleDelayConversion.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-328 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-329 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/ArrayToSequence.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-329 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-330 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/IntJoin4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-330 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-331 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/CountTrues.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-331 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-332 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/SequenceToMatrix.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-332 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-333 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/FIR4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-333 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-334 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixSplit8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-334 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-335 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/SequenceToArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-335 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-336 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/FFT1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-336 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-337 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/LMSAdaptiveFIR2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-337 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-338 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/IntJoin5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-338 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-339 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixJoin4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-339 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-340 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixSplit6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-340 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-341 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/VariableFIR.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-341 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-342 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/Autocorrelation2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-342 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-343 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixSplit7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-343 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-344 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixJoin3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-344 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-345 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/ComplexJoin.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-345 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-346 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/FIR1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-346 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-347 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/SmoothedPeriodogram.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-347 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-348 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/IntJoin2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-348 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-349 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixJoin5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-349 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-350 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/Chop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-350 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-351 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/DynamicRates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-351 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-352 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/BootstrapSampleDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-352 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-353 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixSplit12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-353 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-354 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixJoin2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-354 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-355 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixSplit11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-355 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-356 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/Autocorrelation3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-356 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-357 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/Matrix1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-357 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-358 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixSplit5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-358 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-359 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/FixJoin.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-359 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-360 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixJoin1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-360 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-361 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/MatrixSplit1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-361 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-362 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/lib/test/auto/IntToBits.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-362 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-363 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/kernel/test/auto/changingParams.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-363 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-364 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/kernel/test/auto/finalState2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-364 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-365 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/kernel/test/auto/matrixSimple.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-365 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-366 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/kernel/test/auto/SinglePort.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-366 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-367 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/kernel/test/auto/finalState.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-367 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-368 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/kernel/test/auto/OutputActionsAttribute.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-368 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-369 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/kernel/test/auto/IOPortAsBothInputAndOutput.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-369 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-370 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/kernel/test/auto/typePropagationTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-370 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-371 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/kernel/test/auto/multirate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-371 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-372 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/kernel/test/auto/CommitActionsAttribute.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-372 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-373 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/kernel/test/auto/verySimple2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-373 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-374 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/kernel/test/auto/OutputActionsAttributeForNewDesign.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-374 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-375 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/kernel/test/auto/verySimple.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-375 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-376 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CannotAnalysisWithPreemption3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-376 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-377 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ErrorTransition4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-377 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-378 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Case.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-378 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-379 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/FinalStates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-379 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-380 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ErrorTransition2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-380 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-381 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CycleOfImmediateTransitionsModal2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-381 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-382 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/MouseClickFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-382 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-383 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Timeout2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-383 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-384 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/modalModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-384 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-385 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/InitialImmediateTransition.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-385 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-386 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CannotProduceModal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-386 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-387 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ModalModelWithReset.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-387 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-388 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ImmediateNonConstructiveness2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-388 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-389 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CausalityInterface7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-389 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-390 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Timeout3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-390 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-391 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/InitialOutputs.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-391 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-392 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CausalityInterface12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-392 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-393 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/TerminationTransition7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-393 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-394 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ForbiddenInstantanousLoop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-394 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-395 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/TerminationTransition3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-395 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-396 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Timeout1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-396 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-397 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/NormalTermination.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-397 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-398 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ModalModelFromMemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-398 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-399 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/HysteresisWithDefault2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-399 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-400 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/BroadcastHierarchy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-400 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-401 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CausalityInterface10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-401 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-402 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CausalityInterface9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-402 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-403 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/TransientstateModelAdvanced2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-403 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-404 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/NonStrictFSM_FeedbackLoop_preemptive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-404 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-405 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/InitialStateTransition4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-405 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-406 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ExtendedFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-406 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-407 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/StateTrackerTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-407 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-408 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Blending.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-408 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-409 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CausalityInterface8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-409 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-410 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Pong.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-410 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-411 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/SeeminglyNondeterminate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-411 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-412 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/MouseClickFSMModal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-412 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-413 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/model1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-413 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-414 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ResetFinal2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-414 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-415 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Default3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-415 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-416 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ResetFinal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-416 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-417 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/modalChangingParams.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-417 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-418 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/InitialStateTransition2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-418 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-419 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ModalBSC.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-419 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-420 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CausalityInterface3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-420 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-421 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/StrongImmediateTransition.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-421 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-422 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/FixedPointIterationFSMActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-422 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-423 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/FunctionDependencyOfFSMActorTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-423 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-424 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/DeepModal1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-424 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-425 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Case2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-425 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-426 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ErrorTransition3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-426 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-427 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/HysteresisWithDefault.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-427 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-428 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/TerminationTransition4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-428 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-429 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/modalModel3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-429 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-430 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CannotAnalysisWithPreemption2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-430 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-431 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ImmediateNonConstructiveness.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-431 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-432 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/WeakImmediateTransition.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-432 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-433 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/MalformedGuardExpressionNotCaught.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-433 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-434 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/DeepModal3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-434 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-435 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/booleanSelect.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-435 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-436 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/TransitionRefinements.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-436 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-437 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/TerminationTransition2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-437 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-438 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/TerminationTransition6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-438 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-439 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Default5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-439 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-440 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CausalityInterface6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-440 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-441 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/PreemptionHierarchy2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-441 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-442 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Case1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-442 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-443 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/InitialStateTransition3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-443 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-444 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ABPTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-444 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-445 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Pong_test.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-445 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-446 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ErrorTransition7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-446 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-447 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Default4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-447 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-448 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/test-direct-in-out.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-448 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-449 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/SustainHierarchy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-449 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-450 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/TwoRefinements2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-450 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-451 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/TerminationTransition8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-451 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-452 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/modalModel2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-452 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-453 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ChainedTransitions.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-453 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-454 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/EmptyGuard.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-454 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-455 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ABRO_present_hmm.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-455 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-456 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/PreemptionHierarchy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-456 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-457 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/AMICoderExample.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-457 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-458 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CausalityInterface11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-458 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-459 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/InitialStateTransition1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-459 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-460 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/GuardOnAbsent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-460 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-461 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ErrorTransition8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-461 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-462 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ABROFlat2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-462 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-463 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/knownFailedTests/CannotAnalysisWithPreemption.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-463 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-464 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/FixedPointIterationFSMActor2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-464 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-465 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ModalDelay2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-465 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-466 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/DeepModal4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-466 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-467 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CausalityInterface4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-467 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-468 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/NonStrictFSM_FeedbackLoop_Refinement.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-468 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-469 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ErrorTransition6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-469 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-470 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ImmediateTransitionsInstantaneousCommunication.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-470 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-471 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ErrorTransition10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-471 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-472 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Thermostat_NoHysteresis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-472 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-473 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CausalityInterface13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-473 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-474 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CausalityInterface5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-474 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-475 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CausalityInterface1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-475 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-476 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CausalityInterface2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-476 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-477 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CannotProduce.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-477 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-478 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CycleOfImmediateTransitionsFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-478 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-479 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Default1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-479 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-480 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/SpontaneousFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-480 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-481 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/BroadcastHierarchy2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-481 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-482 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/BroadcastHierarchy3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-482 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-483 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ErrorTransition1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-483 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-484 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ModalModelWithMultirateTransient.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-484 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-485 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/SpontaneousFSM2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-485 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-486 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ErrorTransition11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-486 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-487 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/NonStrictFSM_FeedbackLoop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-487 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-488 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/GuardNotEvaluated2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-488 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-489 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Timeout4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-489 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-490 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Priorities.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-490 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-491 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Hysteresis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-491 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-492 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ImmediateTransitionReset.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-492 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-493 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Broadcast.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-493 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-494 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/SpontaneousFSM3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-494 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-495 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/GuardNotEvaluated.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-495 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-496 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/TerminationTransition5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-496 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-497 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/TimedFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-497 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-498 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ImmediateTransitions1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-498 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-499 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ErrorTransition5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-499 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-500 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/SDF-FSMComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-500 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-501 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/GuardExpression.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-501 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-502 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/HierarchicalFSMTypeInference.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-502 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-503 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ErrorTransition9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-503 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-504 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CycleOfImmediateTransitionsModal3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-504 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-505 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/TwoRefinements1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-505 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-506 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ABROFlat.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-506 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-507 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/AbsentToPresent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-507 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-508 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/SeeminglyNondeterminate2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-508 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-509 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CycleOfImmediateTransitionsModal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-509 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-510 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/SpontaneousFSM4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-510 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-511 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/TerminationTransition1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-511 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-512 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/FixedPointFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-512 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-513 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/CausalityInterface14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-513 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-514 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/Default2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-514 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-515 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ModalClocks.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-515 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-516 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/PreemptiveTransition.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-516 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-517 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ModalDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-517 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-518 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/TransientstateModelAdvanced.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-518 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-519 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/ResetTransitionWithStartTime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-519 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-520 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/BroadcastHierarchy4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-520 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-521 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/test/auto/DeepModal2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-521 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-522 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/test/auto/Homotopy2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-522 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-523 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/test/auto/SuccessiveSubstitution6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-523 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-524 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/test/auto/Singular.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-524 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-525 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/test/auto/SuccessiveSubstitution5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-525 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-526 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/test/auto/Multivariate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-526 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-527 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/test/auto/Homotopy1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-527 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-528 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/test/auto/SuccessiveSubstitution4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-528 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-529 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/test/auto/SuccessiveSubstitution1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-529 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-530 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/test/auto/SuccessiveSubstitution2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-530 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-531 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/test/auto/Multivariate2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-531 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-532 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/test/auto/Newton1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-532 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-533 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/test/auto/HomotopyAllgowerGeorg3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-533 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-534 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/test/auto/Newton2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-534 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-535 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/test/auto/SuccessiveSubstitution3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-535 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-536 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/kernel/test/auto/PulseOr.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-536 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-537 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/kernel/test/auto/PulseOrOptimized.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-537 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-538 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/kernel/test/auto/RampFiringLimitOptimized.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-538 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-539 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/kernel/test/auto/RampsDisconnectedGraph.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-539 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-540 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/kernel/test/auto/RampsDisconnectedGraphOptimized.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-540 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-541 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/kernel/test/auto/RampFiringLimit.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-541 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-542 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/QuantizedTime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-542 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-543 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/CyPhySimFinerSubclock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-543 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-544 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/CyPhySimFinerSubclock2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-544 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-545 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/SRmodalSuperdense.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-545 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-546 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/GuardedCount.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-546 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-547 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/FinalState.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-547 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-548 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/SRActorOrientedModalModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-548 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-549 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/TrafficLight.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-549 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-550 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/FeedbackLoop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-550 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-551 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/SRinDEsimpler3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-551 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-552 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/SRmodalSuperdense2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-552 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-553 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/SRinDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-553 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-554 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/SRsubclock2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-554 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-555 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/MultipleOutputs2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-555 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-556 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/SRinDEkickStart.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-556 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-557 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/GuardedCountTimed.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-557 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-558 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/CausalityLoopErrorCaught.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-558 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-559 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/WirelessDeployment.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-559 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-560 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/QuantizedTimeException.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-560 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-561 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/CausalityLoop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-561 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-562 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/SRinDEsimpler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-562 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-563 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/TokenRing.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-563 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-564 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/SRcombine.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-564 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-565 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/SRinDEsimpler2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-565 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-566 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/BinaryNonstrictLogicGate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-566 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-567 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/DEinSRinDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-567 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-568 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/MayAnalysisBreaksCausalityLoop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-568 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-569 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/SRsubclock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-569 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-570 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/MultipleOutputs3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-570 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-571 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/MultipleOutputs.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-571 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-572 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/dynamicCausalityInterface1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-572 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-573 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/test/auto/ABRO.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-573 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-574 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/RampSwitch.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-574 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-575 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/absent2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-575 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-576 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/PulseSum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-576 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-577 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/NonStrictDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-577 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-578 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/GuardedCount.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-578 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-579 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/NonStrictThreeBitAdder2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-579 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-580 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/PulseNonStrictAnd.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-580 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-581 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/EnabledCompositeWithHierarchy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-581 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-582 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/NonStrictDelay2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-582 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-583 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/EnabledCompositeWithMoreInputs2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-583 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-584 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/NonStrictThreeBitAdder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-584 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-585 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/SequenceDefaultPre2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-585 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-586 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/InstantaneousDialog.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-586 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-587 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/EnabledCompositeWithMoreInputs.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-587 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-588 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/NonStrictOrCyclic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-588 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-589 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/Absent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-589 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-590 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/SendClearTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-590 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-591 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/PulseNonStrictOr.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-591 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-592 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/EnabledComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-592 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-593 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/Current.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-593 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-594 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/TokenRingTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-594 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-595 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/lib/test/auto/SequenceDefaultPre.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-595 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-596 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/test/auto/range.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-596 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-597 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/test/auto/properties2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-597 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-598 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/test/auto/erasure.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-598 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-599 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/test/auto/performance.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-599 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-600 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/test/auto/simpleDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-600 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-601 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/test/auto/Zigbee.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-601 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-602 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/test/auto/delay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-602 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-603 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/test/auto/powerLoss2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-603 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-604 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/test/auto/powerLoss.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-604 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-605 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/test/auto/testTransmitAntennaPattern.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-605 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-606 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/test/auto/properties.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-606 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-607 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/test/auto/properties4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-607 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-608 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/test/auto/properties5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-608 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-609 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/test/auto/properties3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-609 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-610 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/test/auto/Collisions.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-610 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-611 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/lib/test/auto/Triangulator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-611 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-612 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/kernel/test/auto/block.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-612 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-613 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/kernel/test/auto/stopActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-613 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-614 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/BrockAckermanTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-614 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-615 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/QR.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-615 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-616 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/CounterMachineWithException.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-616 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-617 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/relationGroup4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-617 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-618 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/Stack.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-618 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-619 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/OrderedMerge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-619 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-620 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/feedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-620 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-621 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/FinalState.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-621 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-622 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/CounterMachine1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-622 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-623 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/WidthInferenceTest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-623 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-624 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/helloWorld2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-624 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-625 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/relationGroup8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-625 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-626 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/NondeterministicMergeTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-626 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-627 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/FourExpressions.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-627 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-628 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/IdentityWithFeedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-628 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-629 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/helloWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-629 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-630 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/relationGroup7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-630 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-631 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/WidthInferenceTest2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-631 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-632 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/noOutput.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-632 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-633 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/TrivialIdentity.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-633 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-634 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/TestRemoveNilTokens.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-634 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-635 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/relationGroup.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-635 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-636 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/WidthInferenceTest4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-636 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-637 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/relationGroup3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-637 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-638 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/RemoveNilTokens.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-638 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-639 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/PNAbstractReceiverTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-639 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-640 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/demandDriven.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-640 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-641 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/CounterMachine.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-641 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-642 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/Identity.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-642 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-643 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/WidthInferenceTest3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-643 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-644 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/Branching-switch-PN-ptolemy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-644 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-645 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/TestSeq2Array.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-645 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-646 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/Branching-switch-PN-ptolemy-2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-646 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-647 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/relationGroup6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-647 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-648 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/relationGroup2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-648 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-649 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/WidthInferenceTest5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-649 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-650 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/widthTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-650 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-651 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/controlled_kahnnet.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-651 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-652 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/test/auto/relationGroup5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-652 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-653 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/DepthTest2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-653 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-654 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ThreadedComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-654 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-655 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ResettableTimer6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-655 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-656 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/PortParameterUpdates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-656 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-657 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/DepthTest3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-657 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-658 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/PeriodicSampler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-658 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-659 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ModalModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-659 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-660 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/VariableDelayZeroDelay2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-660 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-661 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/triggerType.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-661 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-662 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/DepthTest7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-662 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-663 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/transferInputsandOutputs.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-663 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-664 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/Inspection.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-664 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-665 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/DateToEvent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-665 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-666 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/MergeModel3Add.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-666 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-667 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/MergeWithoutDiscard.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-667 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-668 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/TransferInputs.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-668 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-669 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/QueueAndServer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-669 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-670 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/Modal2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-670 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-671 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ServerZeroDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-671 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-672 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/CausalityAndComposabilityAnalysis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-672 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-673 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/multirate2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-673 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-674 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/CausalityInterface15.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-674 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-675 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/Modal7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-675 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-676 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/PersistentIO.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-676 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-677 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/CausalityInterface3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-677 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-678 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/Modal5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-678 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-679 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/TimerZeroDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-679 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-680 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/LineFault.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-680 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-681 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/OpenQueueingNetwork.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-681 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-682 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/SmartSender.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-682 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-683 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/DEScheduleTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-683 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-684 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/Iteration.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-684 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-685 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/DateDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-685 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-686 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/Modal3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-686 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-687 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/DepthTest5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-687 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-688 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/CQBug1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-688 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-689 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ResetTransitionWithStartTime4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-689 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-690 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/VariableDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-690 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-691 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ComposableCausalityAnalysis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-691 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-692 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ModalSource.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-692 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-693 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/DepthTest6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-693 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-694 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/Modal4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-694 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-695 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/Time.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-695 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-696 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ClockDriftAndValueChange.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-696 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-697 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ResetTransitionWithStartTime3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-697 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-698 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/VariableDelay2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-698 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-699 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ResettableTimer4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-699 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-700 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/PortParameterResetOnInitialize.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-700 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-701 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/DEinDEwithStartTimes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-701 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-702 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/Trilateration.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-702 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-703 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/relationGroup.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-703 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-704 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ClockDriftChange.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-704 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-705 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/sortWithOpaquePorts.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-705 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-706 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/TransferOutputs2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-706 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-707 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/FSM7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-707 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-708 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/DEFixedPointLimitation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-708 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-709 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/TimingParadox.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-709 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-710 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/deInCt2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-710 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-711 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/MergeModel2Add.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-711 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-712 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/multirate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-712 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-713 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/Modal6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-713 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-714 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/knownFailedTests/dependencyLoop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-714 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-715 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/knownFailedTests/DESDFClockTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-715 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-716 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/knownFailedTests/FSMSource.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-716 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-717 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/knownFailedTests/dependencyLoop2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-717 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-718 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/knownFailedTests/HierarchicalModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-718 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-719 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/knownFailedTests/DirectFeedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-719 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-720 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ResetTransitionWithStartTime1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-720 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-721 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ResetTransitionWithStartTime2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-721 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-722 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/DEinDEwithStartTimes2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-722 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-723 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ResettableTimer3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-723 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-724 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/CausalityInterface1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-724 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-725 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/CausalityInterface2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-725 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-726 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/functionDependencyReconstruction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-726 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-727 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/fsm_de_test.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-727 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-728 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/deInCt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-728 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-729 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/NonInterruptibleTimerZeroDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-729 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-730 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/TwoSigmaDelta.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-730 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-731 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ClockDrift.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-731 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-732 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/realtime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-732 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-733 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/DepthTest4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-733 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-734 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/Modal1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-734 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-735 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ResettableTimer5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-735 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-736 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/FSM1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-736 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-737 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/AssemblyLine.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-737 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-738 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/MergeModel1Add.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-738 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-739 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/Records.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-739 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-740 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/relationGroup2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-740 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-741 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/VariableDelayZeroDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-741 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-742 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/dynamicCausalityInterface1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-742 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-743 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/DepthTest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-743 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-744 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/TimeDelayZeroDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-744 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-745 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/CancelFireAt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-745 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-746 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/EventToDate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-746 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-747 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ResettableTimer1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-747 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-748 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/OpenQueuingNetwork.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-748 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-749 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ActorDepthCalculation_actorWithoutPorts.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-749 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-750 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/test/auto/ResettableTimer2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-750 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-751 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/ServerWithVariableDelay1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-751 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-752 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/QuantityManager1BusServiceTimeBiggerThanTokenSendPeriod.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-752 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-753 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/NonInterruptibleTimerTestAssemblyLine.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-753 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-754 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/SamplerUnit.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-754 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-755 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/QuantityManager1Bus.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-755 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-756 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/Iterations.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-756 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-757 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/SingleEvent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-757 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-758 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/Sampler3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-758 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-759 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/VariableDelay5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-759 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-760 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/ServerWithNonZeroDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-760 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-761 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/ServerWithVariableDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-761 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-762 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/ServerWithPreemption1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-762 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-763 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/AFDX.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-763 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-764 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/Queue2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-764 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-765 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/ServerWithZeroDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-765 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-766 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/BusContinuousZeroServiceTime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-766 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-767 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/ServerWithVariableDelay2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-767 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-768 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/VariableDelay1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-768 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-769 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/EventFilter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-769 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-770 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/VariableDelay4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-770 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-771 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/Previous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-771 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-772 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/VariableDelay2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-772 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-773 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/Clock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-773 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-774 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/QuantityManager3Busses.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-774 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-775 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/QuantityManager2Busses.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-775 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-776 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/ServerWithVariableDelay4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-776 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-777 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/Inhibit.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-777 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-778 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/VariableDelay7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-778 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-779 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/Wire.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-779 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-780 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/VariableDelay3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-780 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-781 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/BusError.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-781 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-782 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/Sampler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-782 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-783 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/QuantityManager2BussesOrderReversed.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-783 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-784 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/Sampler2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-784 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-785 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/TimerTestAssemblyLine.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-785 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-786 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/Queue.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-786 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-787 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/BusConfigureParamsDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-787 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-788 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/VariableDelay8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-788 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-789 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/BusDEDifferentValues.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-789 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-790 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/BusDEZeroServiceTime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-790 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-791 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/BusConfigureParamsContinuous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-791 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-792 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/QuantizedSampler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-792 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-793 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/BusContinuousDifferentValues.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-793 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-794 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/lib/test/auto/ServerWithVariableDelay3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-794 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-795 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/CarPedestrian.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-795 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-796 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/OutputsInInitialize.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-796 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-797 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/TimedSourceSink2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-797 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-798 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/CarPedestrianConcurrent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-798 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-799 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/FSMtoFSM_MultipleEventsConcurrent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-799 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-800 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/FSM_MultipleEvents2Concurrent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-800 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-801 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/InternalBlockDiagramSequential.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-801 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-802 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/FSM_MultipleEvents.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-802 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-803 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/FSMtoFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-803 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-804 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/FSMtoFSM_MultipleEvents.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-804 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-805 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/TimedSourceSinkConcurrent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-805 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-806 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/FSMtoFSMConcurrent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-806 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-807 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/FSM_MultipleEvents2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-807 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-808 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/FSMSourceSinkConcurrent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-808 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-809 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/TimedSourceSink2Concurrent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-809 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-810 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/FSM_MultipleEventsConcurrent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-810 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-811 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/TimedSourceSink.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-811 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-812 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/TwoClocks.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-812 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-813 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/InternalBlockDiagramSequentialWithStepCounter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-813 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-814 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/FSMSourceSink.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-814 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-815 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sysml/test/auto/TwoClocksConcurrent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-815 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-816 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/scr/test/auto/SafetyInjection.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-816 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-817 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/scr/test/auto/FuelSystemSCR.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-817 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-818 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/scr/test/auto/HelloWorldSCR.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-818 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-819 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/scr/test/auto/TrafficLight.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-819 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-820 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoC_ProcessTestIfElse.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-820 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-821 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoC_SeqTestNoOutputInitialValues.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-821 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-822 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoC_ProcessUpstreamTestInputOutputDataTypesPtolemyActors.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-822 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-823 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoC_ProcessUpstreamTestPtolemyActors.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-823 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-824 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoc_SeqTestIfElsewithBreak.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-824 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-825 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoC_SeqCompositeActorIncludingBreak.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-825 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-826 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoc_SeqTestIfElse.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-826 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-827 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoc_SeqTestPtolemyActors.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-827 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-828 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoc_SeqTestIfElseMultipleActorsPerBranchTrueFalse.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-828 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-829 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoc_SeqTestIfElseNested.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-829 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-830 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SequencedIntegratorMultipleInstances.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-830 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-831 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SequencedIntegrator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-831 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-832 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoC_SeqUpstreamTestPtolemyActors.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-832 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-833 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoC_SeqTestSingleMultiPort.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-833 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-834 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SequencedVariable.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-834 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-835 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoC_SeqTestControlPorts.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-835 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-836 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoC_ProcessTestNoOutputInitialValues.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-836 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-837 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoC_SeqUpstreamTestArrayToken.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-837 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-838 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/test/auto/SeqMoC_ProcessTestPtolemyActors.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-838 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-839 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/kernel/test/auto/test1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-839 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-840 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/kernel/test/auto/feedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-840 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-841 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/kernel/test/auto/test4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-841 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-842 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/kernel/test/auto/livelock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-842 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-843 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/kernel/test/auto/test2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-843 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-844 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/kernel/test/auto/test3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-844 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-845 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/test/auto/RijndaelEncryptionTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-845 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-846 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/test/auto/IfThenElse.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-846 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-847 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/test/auto/EratosthenesTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-847 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-848 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/test/auto/FactorialTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-848 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-849 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/test/auto/RandomWalkTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-849 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-850 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/test/auto/DDFInsideDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-850 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-851 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/test/auto/booleanSelect.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-851 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-852 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/test/auto/HanoiTowerTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-852 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-853 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/test/auto/DDFInsideDDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-853 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-854 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/test/auto/LoopTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-854 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-855 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/test/auto/hamming-pt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-855 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-856 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/test/auto/IfThenElseFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-856 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-857 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/test/auto/DDFinPN.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-857 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-858 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/test/auto/OrderedMergeTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-858 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-859 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/test/auto/controlled_kahnnet.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-859 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-860 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/lib/test/auto/OrderedMerge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-860 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-861 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/lib/test/auto/test4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-861 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-862 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/lib/test/auto/Eratosthenes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-862 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-863 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/TwoLevelHierarchy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-863 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-864 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/GuardWithResets.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-864 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-865 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/FibonacciWithoutHistoryInitial.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-865 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-866 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/FibonacciWithTransientStates2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-866 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-867 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/DifferentRefinedRates4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-867 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-868 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/TwoHammingCodec.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-868 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-869 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/DifferentRefinedRates5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-869 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-870 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/Hierarchy_2Level_Test2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-870 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-871 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/FibonacciWithNullInitial1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-871 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-872 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/DifferentRefinedRates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-872 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-873 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/WaterTank_HDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-873 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-874 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/TwoLevelHierarchyNullStates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-874 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-875 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/TwoLevelHierarchy2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-875 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-876 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/TwoLevelHierarchyWithResets.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-876 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-877 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/SameRefinedRates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-877 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-878 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/FibonacciWithTransientStates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-878 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-879 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/SameRates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-879 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-880 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/DifferentRefinedRates6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-880 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-881 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/Hierarchy_2Level_Test1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-881 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-882 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/TwoLevelHierarchy1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-882 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-883 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/knownFailedTests/badFSMRateChanges.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-883 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-884 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/ConstVariableRateTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-884 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-885 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/TransientStates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-885 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-886 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/DifferentRefinedRates2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-886 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-887 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/DownSample_PowerOfTwo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-887 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-888 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/badFSMRateChanges.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-888 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-889 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/TwoLevelHierarchyWithResetsNullStates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-889 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-890 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/Hysteresis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-890 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-891 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/Merge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-891 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-892 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/FibonacciWithNullInitial.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-892 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-893 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/TwoHammingCodec1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-893 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-894 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/WaterTank_HDF2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-894 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-895 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/DifferentRefinedRates3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-895 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-896 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/InitTransient.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-896 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-897 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/GuardUsingPastTokens.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-897 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-898 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/SameRefinedRates2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-898 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-899 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/kernel/test/auto/ModalModelBooleanSwitch.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-899 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-900 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/test/auto/AdaptiveCoding.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-900 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-901 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/test/auto/Hysteresis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-901 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-902 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/test/auto/Merge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-902 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-903 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/test/auto/Fibonacci.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-903 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-904 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ca/test/auto/ConwayRandom.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-904 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-905 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ca/test/auto/Conway.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-905 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-906 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/openmodelica/lib/test/auto/OpenModelicaXYPlotter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-906 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-907 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/openmodelica/lib/test/auto/knownFailedTests/OpenModelicaInteractive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-907 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-908 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/openmodelica/lib/test/auto/knownFailedTests/OpenModelicaInherit.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-908 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-909 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/openmodelica/lib/test/auto/OpenModelicaPltPlot.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-909 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-910 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/EventNameTest2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-910 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-911 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/PriorityTest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-911 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-912 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/PriorityTest4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-912 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-913 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/ParameterTest8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-913 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-914 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/ParameterTest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-914 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-915 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/PriorityTest3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-915 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-916 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/ParameterTest3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-916 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-917 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/ParameterTest5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-917 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-918 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/Hierarchy4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-918 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-919 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/ParameterTest9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-919 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-920 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/Hierarchy1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-920 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-921 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/Hierarchy2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-921 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-922 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/CarWashHierarchical.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-922 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-923 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/ParameterTest7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-923 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-924 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/EventNameTest4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-924 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-925 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/Hierarchy3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-925 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-926 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/EventNameTest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-926 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-927 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/RelationNameTest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-927 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-928 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/Hierarchy7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-928 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-929 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/Hierarchy5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-929 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-930 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/EventNameTest6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-930 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-931 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/ParameterTest10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-931 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-932 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/EventNameTest5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-932 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-933 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/CarWash.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-933 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-934 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/ParameterTest6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-934 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-935 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/EventNameTest3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-935 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-936 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/Hierarchy6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-936 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-937 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/ParameterTest4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-937 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-938 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/RelationNameTest2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-938 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-939 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/Composition1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-939 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-940 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/Hierarchy8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-940 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-941 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/ParameterTest2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-941 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-942 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/test/auto/PriorityTest2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-942 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-943 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/csp/test/auto/OrderedMerge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-943 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-944 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/csp/test/auto/Buffer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-944 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-945 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/csp/test/auto/MultiwayRendezvous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-945 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-946 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/csp/test/auto/Sequencing.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-946 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-947 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/csp/test/auto/ForkedSend.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-947 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-948 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/csp/test/auto/Barrier.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-948 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-949 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/csp/test/auto/ResourcePool2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-949 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-950 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/csp/test/auto/ResourcePool.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-950 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-951 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/csp/test/auto/ResourcePool3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-951 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-952 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/test/auto/SRSDFtest3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-952 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-953 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/test/auto/SDFSRtest3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-953 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-954 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/test/auto/CSPSRtest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-954 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-955 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/test/auto/nonTerminatingTests/PNSRTimedtest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-955 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-956 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/test/auto/CSPSRtest2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-956 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-957 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/test/auto/SDFSRtest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-957 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-958 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/test/auto/PNSRtest2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-958 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-959 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/test/auto/CSPSDFtest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-959 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-960 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/test/auto/PNSRtest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-960 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-961 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/test/auto/PNSRtest4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-961 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-962 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/test/auto/knownFailedTests/SDFSRtest2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-962 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-963 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/test/auto/knownFailedTests/SRSDFtest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-963 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-964 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/test/auto/knownFailedTests/PNSRtest3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-964 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-965 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/test/auto/knownFailedTests/PNSDFtest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-965 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-966 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/test/auto/knownFailedTests/SRSDFtest2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-966 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-967 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/psdf/kernel/test/auto/hierarchicalRates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-967 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-968 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/psdf/kernel/test/auto/singleActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-968 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-969 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/psdf/kernel/test/auto/vectorizationFactor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-969 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-970 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/psdf/kernel/test/auto/SDFDirector1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-970 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-971 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/psdf/kernel/test/auto/PSDFinsidePN.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-971 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-972 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/psdf/kernel/test/auto/knownFailedTests/SDFDirector2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-972 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-973 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/psdf/kernel/test/auto/knownFailedTests/goodRateChanges.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-973 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-974 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/psdf/kernel/test/auto/hierarchicalRates2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-974 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-975 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/psdf/kernel/test/auto/vectorizationFactor2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-975 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-976 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/LorenzDifferentialSystem.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-976 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-977 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/PeriodicSampler1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-977 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-978 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/FurutaPendulum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-978 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-979 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ParameterizedNewtonsCradleAnimatedNondeterministic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-979 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-980 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/LevelCrossingDetector.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-980 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-981 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Pendulum3D.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-981 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-982 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousWithinContinuous4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-982 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-983 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/hierarchicalModalModel2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-983 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-984 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousWithinContinuous7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-984 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-985 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ComparedClocks.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-985 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-986 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInDEInContinuous2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-986 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-987 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/LinearStateSpaceExample.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-987 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-988 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/LevelCrossingDetectorDetectingDirections.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-988 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-989 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/PeriodicSampler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-989 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-990 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/StaticUnits.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-990 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-991 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CausalityInterface7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-991 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-992 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/NewtonsCradleComplicated.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-992 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-993 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/IncreasingRatePoisson.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-993 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-994 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousMerge1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-994 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-995 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CausalityInterface12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-995 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-996 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ParameterizedNewtonsCradleAnimated.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-996 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-997 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/TimeDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-997 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-998 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CompareWithCurrentTime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-998 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-999 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Modal2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-999 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1000 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ResetTransitionWithStartTime5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1000 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1001 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Transmission.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1001 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1002 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/BouncingBallWithoutGR.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1002 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1003 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousMerge2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1003 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1004 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Integration2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1004 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1005 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CausalityInterface10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1005 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1006 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/LevelCrossingDetectorDetectsGlitches.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1006 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1007 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/EfficiencyCurve.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1007 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1008 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CausalityInterface9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1008 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1009 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousMerge3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1009 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1010 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/NewtonsCradleNondeterministic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1010 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1011 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ImpulseFeedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1011 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1012 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/DEinContinuous2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1012 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1013 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ModalTransitionGuardWithResetUsingPreemptiveTransition2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1013 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1014 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Integration.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1014 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1015 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/LevelCrossing3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1015 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1016 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInDESharingRefinement.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1016 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1017 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Friction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1017 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1018 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/junk.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1018 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1019 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Switch.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1019 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1020 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CausalityInterface8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1020 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1021 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/PoissonClock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1021 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1022 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/TwoMachineInfiniteBusControl.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1022 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1023 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/NoiseSpectrum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1023 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1024 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/DiscreteClock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1024 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1025 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ModalTransitionGuardWithReset.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1025 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1026 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/HysteresisWithRandomLosses.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1026 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1027 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ImmediateTransitions.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1027 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1028 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/hierarchicalModalModel3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1028 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1029 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/HybridPlant.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1029 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1030 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousWithinContinuous3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1030 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1031 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInDEDifferentRefinementsPreemptive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1031 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1032 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/NewtonsCradleAnimated.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1032 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1033 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/InitialStateFeedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1033 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1034 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/hierarchicalModalModel1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1034 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1035 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousWithinContinuous2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1035 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1036 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/NewtonsCradlePerfectlyInelastic1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1036 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1037 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/DEInContinuous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1037 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1038 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/LorenzDifferentialSystemWithInput.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1038 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1039 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/LevelCrossing4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1039 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1040 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CarTracking.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1040 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1041 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/SRinContinuous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1041 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1042 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/HysteresisWithRandomDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1042 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1043 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/SampledClocks.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1043 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1044 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ResetTransitionWithStartTime4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1044 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1045 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/LevelCrossing2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1045 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1046 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ImpulseFeedback2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1046 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1047 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/TimeDelay2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1047 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1048 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/StickyMasses.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1048 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1049 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ExponentialResponse.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1049 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1050 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/SinusoidRK45.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1050 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1051 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CausalityInterface6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1051 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1052 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/LevelCrossing1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1052 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1053 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ResetTransitionWithStartTime3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1053 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1054 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/RandomHybridPlant.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1054 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1055 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Starmac.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1055 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1056 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInDEDifferentRefinements.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1056 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1057 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Lorenz.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1057 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1058 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Satellite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1058 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1059 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Poisson.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1059 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1060 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Brownian.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1060 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1061 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/IntegratorImpulse.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1061 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1062 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInDEInput.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1062 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1063 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CausalityInterfaceFeedback1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1063 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1064 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/SigmaDelta.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1064 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1065 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/SinusoidWithMultipleImpulses.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1065 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1066 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Integration3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1066 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1067 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/StopTime2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1067 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1068 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Integration5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1068 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1069 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1069 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1070 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/LorenzDifferentialSystemWithTime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1070 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1071 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/TimeDelay3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1071 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1072 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/PoissonClock2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1072 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1073 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CausalityInterface11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1073 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1074 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/DCMotor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1074 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1075 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/TriggeredContinuousClock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1075 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1076 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/HierarchicalExecution.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1076 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1077 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ModalTransitionGuardWithResetUsingPreemptiveTransition3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1077 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1078 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ResetTransitionWithStartTime1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1078 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1079 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInDE4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1079 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1080 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CausalityInterfaceFeedback2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1080 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1081 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ResetTransitionWithStartTime2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1081 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1082 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInDE3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1082 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1083 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CausalityInterface4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1083 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1084 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousWithinContinuous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1084 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1085 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousAOCClone.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1085 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1086 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousWithinContinuous6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1086 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1087 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInDEInput2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1087 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1088 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/LevelCrossing5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1088 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1089 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/SquareWave.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1089 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1090 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousClock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1090 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1091 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CausalityInterface13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1091 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1092 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CausalityInterface5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1092 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1093 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Microsteps.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1093 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1094 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Derivative1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1094 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1095 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/LevelCrossing6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1095 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1096 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Noise.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1096 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1097 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/SinuBouncingBall.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1097 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1098 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInsideDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1098 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1099 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/LevelCrossingNoInitialOuput.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1099 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1100 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInDEwithNoPorts.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1100 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1101 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/PeriodicSampler2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1101 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1102 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/hierarchicalModalModel4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1102 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1103 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/NewtonsCradle.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1103 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1104 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Hysteresis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1104 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1105 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousWithinContinuous5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1105 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1106 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/SinusoidInNoise.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1106 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1107 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/PortParameterHierarchy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1107 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1108 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ResetTransitionWithStartTime6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1108 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1109 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Thermostat.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1109 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1110 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Modal1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1110 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1111 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ExponentialResponseRK45.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1111 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1112 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/TransferAbsentToInside.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1112 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1113 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/BouncingBall.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1113 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1114 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/StopTime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1114 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1115 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInDEInContinuous3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1115 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1116 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/IntegratorImpulse2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1116 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1117 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/hierarchicalModalModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1117 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1118 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Sinusoid.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1118 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1119 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInContinuous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1119 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1120 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInDE2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1120 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1121 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/Derivative.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1121 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1122 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInContinuousInContinuous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1122 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1123 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/V2V.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1123 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1124 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CartPendulum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1124 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1125 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/CausalityInterface14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1125 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1126 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ContinuousInDEInput3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1126 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1127 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/test/auto/ModalTransitionGuardWithResetUsingPreemptiveTransition.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1127 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1128 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/LevelCrossingDetector.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1128 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1129 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/LevelCrossingDetectorDetectingDirections.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1129 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1130 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/test1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1130 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1131 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/Waveform8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1131 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1132 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/PeriodicSamplerIntegrator2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1132 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1133 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/Waveform4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1133 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1134 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/Waveform3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1134 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1135 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/DifferentialSystem.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1135 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1136 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/Waveform1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1136 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1137 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/test5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1137 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1138 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/Waveform2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1138 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1139 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/Waveform6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1139 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1140 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/Waveform7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1140 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1141 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/Waveform9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1141 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1142 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/test4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1142 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1143 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/test6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1143 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1144 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/TransferFunction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1144 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1145 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/test7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1145 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1146 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/test8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1146 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1147 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/test2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1147 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1148 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/LevelCrossingDetector2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1148 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1149 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/ZeroOrderHold.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1149 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1150 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/Waveform5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1150 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1151 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/test3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1151 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1152 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/ZeroOrderHold2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1152 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1153 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/ZeroOrderHold3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1153 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1154 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/lib/test/auto/PeriodicSamplerIntegrator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1154 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1155 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/Chain1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1155 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1156 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/dt_dt_transparent3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1156 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1157 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/fir_downsample2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1157 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1158 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/inside_period1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1158 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1159 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/Dag1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1159 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1160 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/MultiPort1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1160 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1161 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/postfireFalse.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1161 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1162 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/CurrentTimeSource.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1162 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1163 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/dt_dt_opaque2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1163 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1164 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/dt_dt_transparent1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1164 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1165 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/dt_sdf_dt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1165 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1166 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/MultiPort2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1166 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1167 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/Chain3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1167 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1168 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/pam.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1168 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1169 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/Sink1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1169 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1170 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/Dag2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1170 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1171 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/dt_dt_opaque1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1171 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1172 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/dt_sdf_1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1172 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1173 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/SourceSink1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1173 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1174 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/inside_period2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1174 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1175 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/dt_dt_opaque4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1175 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1176 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/dt_dt_transparent2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1176 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1177 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/de_dt_2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1177 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1178 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/knownFailedTests/Dag3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1178 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1179 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/knownFailedTests/sdf_sdf_bug.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1179 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1180 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/knownFailedTests/DEInsideDT1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1180 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1181 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/knownFailedTests/DTinsideCT1_.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1181 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1182 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/dt_sdf_3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1182 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1183 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/sdf_dt_1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1183 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1184 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/sdf_dt_2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1184 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1185 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/Delay2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1185 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1186 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/Delay1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1186 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1187 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/de_dt_1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1187 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1188 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/DagSingles1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1188 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1189 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/dt_sdf_2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1189 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1190 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/InvDag1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1190 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1191 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/Round.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1191 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1192 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/dt_dt_opaque3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1192 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1193 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/Chain2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1193 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1194 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/kernel/test/auto/fir_downsample.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1194 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1195 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/OrderedMerge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1195 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1196 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/Buffer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1196 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1197 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/MultiwayRendezvous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1197 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1198 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/ResourcePool4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1198 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1199 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/Sequencing3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1199 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1200 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/Sequencing.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1200 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1201 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/MergeLoops.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1201 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1202 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/ForkedSend.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1202 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1203 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/Barrier.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1203 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1204 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/ResourcePool2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1204 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1205 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/Sequencing4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1205 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1206 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/MultipleMerges.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1206 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1207 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/Sequencing2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1207 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1208 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/ResourcePool.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1208 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1209 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/ResourcePool3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1209 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1210 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/test/auto/Merge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1210 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1211 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/metroII/kernel/test/auto/nonTerminatingTests/PNModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1211 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1212 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/metroII/kernel/test/auto/FSM2FSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1212 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1213 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/DCASwith2FCFSSchedulers.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1213 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1214 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/OneMerger.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1214 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1215 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/Sensor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1215 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1216 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/OnePlatformRealTime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1216 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1217 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/PreemptDeadline.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1217 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1218 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/TIIModalExample.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1218 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1219 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/LocalSource.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1219 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1220 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/Network2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1220 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1221 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/PowerPlant.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1221 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1222 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/PreemptOnePlatform.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1222 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1223 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/TIIMultiPlatformPowerSupply.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1223 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1224 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/PowerManagementUnitSamplingWithCurrentLocalTime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1224 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1225 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/EDFTwoAddSub.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1225 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1226 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/tmp/PrintingPress.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1226 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1227 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/OnePlatform5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1227 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1228 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/TwoTasksInSequence.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1228 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1229 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/EDFPreempt1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1229 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1230 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/FCFSScheduler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1230 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1231 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/CoSimulation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1231 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1232 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/Network.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1232 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1233 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/ModelDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1233 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1234 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/PtidesMulticoreDirector.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1234 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1235 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/PtidesSynchrophasor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1235 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1236 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/VariableDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1236 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1237 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/EDFPreempt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1237 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1238 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/Feedback2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1238 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1239 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/2FPSchedulers.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1239 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1240 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/OnePlatform4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1240 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1241 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/OnePlatform.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1241 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1242 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/Feedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1242 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1243 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/PreemptEDFOnePlatformTwoPaths.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1243 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1244 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/NetworkPorts.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1244 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1245 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/SafeToProcessTwoPaths.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1245 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1246 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/ClockDrift1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1246 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1247 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/Network3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1247 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1248 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/NetworkMicrostepTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1248 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1249 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/EDFScheduler1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1249 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1250 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/SensorActuatorNoDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1250 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1251 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/Continuous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1251 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1252 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/SensorActuatorModelDelayOnly.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1252 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1253 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/EDFScheduler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1253 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1254 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/TwoTasks.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1254 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1255 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/OnePlatform1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1255 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1256 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/LocalSource3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1256 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1257 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/PrintingPress.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1257 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1258 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/Network1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1258 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1259 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/OnePlatform3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1259 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1260 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/AutoThrottling.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1260 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1261 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/OnePlatformminDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1261 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1262 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/FPScheduler1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1262 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1263 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/TIIPowerPlantHeartbeat.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1263 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1264 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/Microstep.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1264 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1265 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/ClockDrift.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1265 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1266 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/LocalSourceActuator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1266 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1267 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/TwoMergers.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1267 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1268 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/MultiPlatformTDMA.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1268 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1269 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/SafeToProcessInsideTransparent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1269 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1270 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/AddEDFDelayOffset.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1270 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1271 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/DistributedPowerPlant.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1271 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1272 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/MultiPlatformTDMA2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1272 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1273 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/DCASwith1FCFSScheduler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1273 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1274 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/OnePlatform2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1274 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1275 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/OnePlatformThreePathsRealDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1275 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1276 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/MixedSimulator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1276 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1277 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/TIIPowerPlant.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1277 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1278 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/Network4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1278 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1279 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/OnePlatformCausalLoop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1279 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1280 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/test/auto/Controller.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1280 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1281 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/tm/test/auto/FFTTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1281 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1282 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/tm/test/auto/SimpleTasksTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1282 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1283 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/tm/test/auto/ControllersTestNonPreemptive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1283 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1284 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/tm/test/auto/MergedEvents.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1284 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1285 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/tm/test/auto/Controllers.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1285 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1286 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/tm/test/auto/AppBrokerNetServ7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1286 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1287 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/tm/test/auto/ControllersTestPreemptive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1287 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1288 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/kernel/test/auto/DifferentFrequency.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1288 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1289 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/kernel/test/auto/SimpleTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1289 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1290 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/kernel/test/auto/HierarchyTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1290 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1291 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/kernel/test/auto/DifferentFrequencyWithInitialTokens.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1291 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1292 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/kernel/test/auto/CascadeWithInitialTokens.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1292 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1293 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/kernel/test/auto/Cascade.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1293 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1294 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/kernel/test/auto/FireAtDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1294 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1295 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/kernel/test/auto/knownFailedTests/FireAtCT2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1295 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1296 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/kernel/test/auto/knownFailedTests/FireAtCT.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1296 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1297 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/kernel/test/auto/SampleDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1297 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1298 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/test/auto/Hierarchy2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1298 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1299 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/test/auto/MultimodeTest3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1299 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1300 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/test/auto/MultimodeTest2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1300 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1301 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/test/auto/Hierarchy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1301 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1302 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/test/auto/MultimodeTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1302 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1303 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/test/auto/Composite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1303 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1304 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/cgc/test/auto/MultimodeTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1304 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1305 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/Persistence.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1305 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1306 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/SmoothZeroCrossingDetector3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1306 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1307 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/HelloWorld2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1307 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1308 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/SmoothSignal1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1308 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1309 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/SmoothSignal5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1309 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1310 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/Align1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1310 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1311 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/SmoothSignal3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1311 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1312 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/HelloWorld7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1312 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1313 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/SecondOrder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1313 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1314 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/SmoothSignal2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1314 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1315 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/HelloWorldPropagate2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1315 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1316 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/SmoothZeroCrossingDetector7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1316 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1317 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/SmoothToken.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1317 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1318 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/SmoothZeroCrossingDetector6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1318 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1319 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/FirstOrder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1319 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1320 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/IntegratorImpulse3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1320 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1321 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/SmoothZeroCrossingDetector2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1321 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1322 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/HelloWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1322 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1323 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/IntegratorImpulse1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1323 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1324 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/HelloWorld5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1324 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1325 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/SmoothZeroCrossingDetector4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1325 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1326 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/ThermalMassWithHeatLoss.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1326 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1327 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/SmoothZeroCrossingDetector5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1327 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1328 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/SmoothZeroCrossingDetector.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1328 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1329 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/FirstOrderOscillating.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1329 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1330 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/TokenAddition.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1330 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1331 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/IntegratorImpulse2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1331 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1332 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/IntegratorImpulse4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1332 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1333 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/HelloWorldPropagate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1333 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1334 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/CascadedIntegrators.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1334 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1335 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/QSS2_1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1335 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1336 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/HelloWorld4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1336 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1337 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/SmoothZeroCrossingDetector8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1337 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1338 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/HelloWorld6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1338 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1339 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/HelloWorld3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1339 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1340 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/test/auto/SmoothSignal4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1340 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1341 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/verification/test/auto/SimpleTrafficLightRTMaudeCG.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1341 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1342 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/ReadPMultiport.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1342 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1343 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/Multirate1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1343 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1344 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/PortParameterActorTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1344 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1345 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/Multirate2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1345 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1346 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/PortWithDollarSignInName.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1346 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1347 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/ObjectToken1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1347 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1348 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/PortWithStarsInName2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1348 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1349 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/PortParameterCompositeExpression.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1349 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1350 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/ReadPsIC.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1350 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1351 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/ObjectTokenTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1351 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1352 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/PortWithStarsInNameAutoCustom.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1352 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1353 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/PortParameterOpaque.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1353 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1354 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/Multirate3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1354 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1355 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/ReadPMultiportD2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1355 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1356 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/ObjectTokenTestSampleDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1356 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1357 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/ActorWithPortNameProblemAOC.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1357 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1358 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/ReadPMultiport2AutoD.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1358 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1359 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/AutoAdapterTwoActors.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1359 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1360 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/Display.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1360 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1361 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/AutoAdapterStringParameter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1361 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1362 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/ReadParamIC2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1362 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1363 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/ActorWithPortNameProblemTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1363 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1364 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/ReadPMultiport7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1364 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1365 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/ActorWithDollarSignInName.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1365 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1366 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/test/auto/Repeat.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1366 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1367 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/modular/test/auto/OpaqueTypedComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1367 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1368 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/java/modular/test/auto/ModularCodeGenerationOpaqueTypedComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1368 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1369 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/fmimahybrid/test/auto/TestZeroDelayFeedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1369 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1370 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/c/test/auto/ConstDiscard.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1370 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1371 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/fmima/test/auto/FMUIncScale20pt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1371 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1372 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/program/procedural/fmima/test/auto/emsoft2013.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1372 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1373 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/accessor/test/auto/RampJSTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1373 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1374 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/accessor/test/auto/TestComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1374 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1375 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/accessor/test/auto/RampJSDisplay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1375 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1376 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/accessor/test/auto/knownFailedTests/AccessorStatusTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1376 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1377 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/accessor/test/auto/RampJSTextDisplay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1377 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1378 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/accessor/test/auto/RampJSInspect.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1378 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1379 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/SampleDelay1_1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1379 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1380 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/UpSample1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1380 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1381 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/DownSample1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1381 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1382 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/SampleDelay5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1382 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1383 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/SampleDelay1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1383 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1384 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/UpDownSample1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1384 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1385 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/Repeat6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1385 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1386 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/Repeat2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1386 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1387 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/FFT1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1387 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1388 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/SampleDelayObjectNull.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1388 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1389 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/Repeat4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1389 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1390 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/Repeat5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1390 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1391 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/BootstrapSampleDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1391 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1392 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/SampleDelay4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1392 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1393 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/SampleDelay2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1393 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1394 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/SampleDelay3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1394 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1395 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/SampleDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1395 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1396 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/Repeat3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1396 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1397 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/sdf/lib/test/auto/Repeat.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1397 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1398 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/modal/test/auto/Simple01.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1398 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1399 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/domains/modal/test/auto/FSMActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1399 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1400 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/string/test/auto/StringFunctionTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1400 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1401 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/string/test/auto/StringCompare.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1401 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1402 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/string/test/auto/StringCompare3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1402 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1403 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/string/test/auto/StringLength.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1403 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1404 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/string/test/auto/StringCompare2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1404 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1405 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/colt/test/auto/ColtPoissonBinomial.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1405 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1406 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/colt/test/auto/ColtPoissonInfinite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1406 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1407 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/colt/test/auto/ColtBinomialSelectorUnusedOutput.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1407 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1408 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/colt/test/auto/ColtBinomialSelector3Pop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1408 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1409 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/colt/test/auto/ColtPoisson.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1409 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1410 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/colt/test/auto/ColtBinomialSelector.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1410 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1411 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/colt/test/auto/ColtBinomial.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1411 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1412 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/colt/test/auto/ColtPoissonPortParameter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1412 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1413 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/colt/test/auto/ColtBinomialSelectorTwoOutputs.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1413 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1414 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherSubscriber.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1414 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1415 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Ramp1000.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1415 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1416 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1416 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1417 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherSubscriber6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1417 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1418 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1418 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1419 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/AbsoluteValue.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1419 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1420 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/AddSubtract5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1420 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1421 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/RampString.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1421 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1422 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1422 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1423 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType23.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1423 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1424 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1424 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1425 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherSubscriber3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1425 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1426 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/StringConstVariable.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1426 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1427 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/hierarchicalModel_1_1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1427 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1428 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1428 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1429 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1429 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1430 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Accumulator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1430 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1431 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Sequence2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1431 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1432 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1432 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1433 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType15.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1433 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1434 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/AddSubtract3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1434 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1435 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1435 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1436 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherSubscriber4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1436 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1437 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType18.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1437 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1438 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Test.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1438 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1439 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Const.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1439 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1440 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/MinimumInt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1440 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1441 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1441 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1442 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/StringConstComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1442 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1443 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherSubscriber7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1443 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1444 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/TestString.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1444 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1445 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType16.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1445 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1446 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/DistributorMultipleTypes2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1446 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1447 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/DB.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1447 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1448 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Bernoulli.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1448 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1449 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1449 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1450 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1450 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1451 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/ExpressionIntegerDoubleDivision.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1451 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1452 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/RampComplex.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1452 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1453 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/SubscriptionAggregator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1453 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1454 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/DistributorMultipleTypes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1454 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1455 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriberClass.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1455 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1456 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Sequence.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1456 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1457 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/CurrentTimeSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1457 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1458 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/AddSubtract2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1458 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1459 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType19.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1459 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1460 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/TestMultiPortDouble.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1460 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1461 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/MovingAverageParameter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1461 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1462 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/AccumulatorWithReset.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1462 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1463 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Recorder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1463 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1464 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/LimitedFiringSourcePulse.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1464 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1465 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType21.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1465 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1466 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/SubscriptionAggregator2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1466 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1467 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/SubscriptionAggregator3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1467 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1468 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherSubscriber5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1468 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1469 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/BooleanMultiplexor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1469 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1470 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/SubscriptionAggregatorMultiply.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1470 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1471 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/ExpressionMinMax.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1471 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1472 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1472 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1473 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Uniform.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1473 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1474 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType24.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1474 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1475 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/ActorOrientedClass.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1475 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1476 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1476 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1477 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1477 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1478 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherSubscriber2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1478 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1479 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1479 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1480 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1480 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1481 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/MultiplyDivideDivideOnly.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1481 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1482 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Commutator2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1482 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1483 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/TrigFunction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1483 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1484 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1484 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1485 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/AddSubtract4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1485 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1486 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Commutator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1486 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1487 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/LimitedFiringSourceRamp.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1487 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1488 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/knownFailedTests/ExpressionMultiplyPower2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1488 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1489 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/MultiplyDivideMatrix.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1489 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1490 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/VectorAssemblerMatrix.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1490 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1491 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Limiter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1491 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1492 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/MatrixToArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1492 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1493 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1493 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1494 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1494 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1495 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType22.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1495 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1496 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/hierarchicalModel_2_2e.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1496 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1497 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1497 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1498 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Guassian3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1498 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1499 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1499 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1500 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/AddSubtract.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1500 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1501 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/OpaqueConst.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1501 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1502 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Ramp.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1502 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1503 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/TwoRampsTypes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1503 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1504 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/VectorAssemblerDisassemblerSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1504 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1505 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Minimum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1505 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1506 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType17.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1506 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1507 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/TestNaN.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1507 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1508 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/MultiplyDivideComplex.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1508 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1509 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1509 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1510 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1510 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1511 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/AddSubtract_Array.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1511 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1512 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/TestMultiPortString.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1512 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1513 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/AddSubtract_String.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1513 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1514 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/arrayType20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1514 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1515 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/Uniform2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1515 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1516 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/UniformSeed0.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1516 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1517 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1517 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1518 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/MovingAverage.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1518 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1519 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/test/auto/ExpressionPow.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1519 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1520 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/logic/test/auto/LogicFunctionand.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1520 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1521 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/logic/test/auto/LogicFunctionnor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1521 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1522 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/logic/test/auto/Comparator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1522 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1523 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/logic/test/auto/LogicFunctionxor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1523 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1524 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/logic/test/auto/LogicFunctionxnor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1524 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1525 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/logic/test/auto/LogicFunctionnand.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1525 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1526 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/logic/test/auto/LogicFunctionor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1526 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1527 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/gui/test/auto/SequencePlotter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1527 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1528 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/gui/test/auto/Display.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1528 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1529 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/conversions/test/auto/TokenToExpression.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1529 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1530 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/conversions/test/auto/BooleanToAnything.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1530 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1531 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/conversions/test/auto/Round.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1531 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1532 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/hoc/test/auto/Case3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1532 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1533 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/hoc/test/auto/Case1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1533 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1534 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/hoc/test/auto/CaseOpaque.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1534 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1535 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/java/adapters/ptolemy/actor/lib/hoc/test/auto/Case4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1535 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1536 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/mbed/adapters/ptolemy/actor/lib/gui/test/auto/Display.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1536 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1537 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/arduino/adapters/ptolemy/actor/lib/gui/test/auto/Display.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1537 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1538 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/duktape/adapters/ptolemy/actor/lib/gui/test/auto/TestComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1538 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1539 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/sdf/lib/test/auto/SampleDelay1_1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1539 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1540 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/sdf/lib/test/auto/SampleDelay5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1540 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1541 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/sdf/lib/test/auto/SampleDelay1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1541 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1542 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/sdf/lib/test/auto/SampleDelay3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1542 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1543 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/sdf/lib/test/auto/SampleDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1543 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1544 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/FinalStates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1544 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1545 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/changingParams.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1545 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1546 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/ExtendedFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1546 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1547 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/DeepModal1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1547 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1548 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/AMICoderExample.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1548 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1549 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/knownFailedTests/FSMReceiver.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1549 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1550 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/Thermostat_NoHysteresis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1550 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1551 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/CommitActionsAttribute.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1551 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1552 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/verySimple2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1552 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1553 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/FinalStatesBook.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1553 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1554 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/Hysteresis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1554 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1555 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/Simple01.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1555 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1556 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/CapriciousThermostat.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1556 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1557 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/FSMActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1557 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1558 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/Simple02NoInputsGuard.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1558 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1559 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/ExtendedFSMBook.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1559 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1560 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/Simple02NoInputsGuardRefined.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1560 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1561 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/BareModal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1561 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1562 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/verySimple.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1562 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1563 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/modal/test/auto/DeepModal2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1563 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1564 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/DECGHeterogeneous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1564 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1565 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/DECGPi.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1565 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1566 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/MostRecent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1566 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1567 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/DECGHeterogeneousMk2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1567 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1568 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/Previous2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1568 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1569 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/DECGDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1569 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1570 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/DECGPiSquare.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1570 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1571 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/Previous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1571 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1572 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/DECGClockRamp.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1572 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1573 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/DECGHelloWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1573 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1574 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/PID.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1574 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1575 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/DECGPoisson.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1575 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1576 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/TimeCompare.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1576 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1577 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/Register.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1577 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1578 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/DECGMath.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1578 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1579 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/Merge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1579 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1580 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/de/lib/test/auto/TimeGap.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1580 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1581 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/ptides/lib/test/auto/Sensor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1581 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1582 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/ptides/lib/test/auto/Network.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1582 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1583 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/ptides/lib/test/auto/ModelDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1583 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1584 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/ptides/lib/test/auto/Feedback2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1584 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1585 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/ptides/lib/test/auto/Feedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1585 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1586 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/ptides/lib/test/auto/NetworkPorts.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1586 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1587 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/ptides/lib/test/auto/SafeToProcessTwoPaths.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1587 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1588 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/ptides/lib/test/auto/Network3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1588 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1589 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/ptides/lib/test/auto/SensorActuatorNoDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1589 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1590 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/ptides/lib/test/auto/knownFailedTests/TIIModalExample.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1590 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1591 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/ptides/lib/test/auto/knownFailedTests/Network2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1591 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1592 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/ptides/lib/test/auto/knownFailedTests/Network1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1592 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1593 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/ptides/lib/test/auto/SensorActuatorModelDelayOnly.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1593 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1594 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/ptides/lib/test/auto/Microstep.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1594 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1595 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/domains/ptides/lib/test/auto/SafeToProcessInsideTransparent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1595 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1596 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/string/test/auto/StringCompare.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1596 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1597 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/string/test/auto/StringCompare3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1597 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1598 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/string/test/auto/StringLength.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1598 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1599 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/string/test/auto/StringCompare2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1599 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1600 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherSubscriber.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1600 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1601 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/Ramp1000.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1601 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1602 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1602 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1603 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherSubscriber6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1603 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1604 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1604 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1605 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1605 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1606 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1606 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1607 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType23.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1607 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1608 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1608 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1609 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherSubscriber3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1609 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1610 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/hierarchicalModel_1_1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1610 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1611 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1611 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1612 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1612 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1613 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/Sequence2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1613 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1614 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1614 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1615 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType15.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1615 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1616 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/AddSubtract3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1616 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1617 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1617 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1618 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherSubscriber4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1618 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1619 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType18.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1619 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1620 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/Test.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1620 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1621 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1621 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1622 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PoissonClock3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1622 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1623 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1623 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1624 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1624 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1625 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PoissonClock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1625 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1626 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/StringConstComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1626 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1627 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherSubscriber7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1627 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1628 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType16.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1628 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1629 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1629 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1630 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriberClassr.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1630 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1631 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DB.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1631 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1632 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/Bernoulli.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1632 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1633 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1633 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1634 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1634 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1635 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1635 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1636 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/ExpressionIntegerDoubleDivision.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1636 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1637 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DistributorMultipleTypes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1637 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1638 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock23.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1638 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1639 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/Sequence.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1639 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1640 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock22.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1640 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1641 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType19.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1641 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1642 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/TestMultiPortDouble.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1642 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1643 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1643 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1644 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/AccumulatorWithReset.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1644 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1645 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/Recorder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1645 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1646 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1646 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1647 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1647 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1648 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType21.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1648 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1649 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherSubscriber5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1649 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1650 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1650 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1651 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock24.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1651 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1652 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1652 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1653 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType24.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1653 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1654 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1654 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1655 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/ActorOrientedClass.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1655 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1656 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/Gaussian.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1656 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1657 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1657 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1658 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1658 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1659 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1659 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1660 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherSubscriber2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1660 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1661 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1661 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1662 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1662 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1663 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PoissonClock2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1663 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1664 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/MultiplyDivideDivideOnly.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1664 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1665 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1665 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1666 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/knownFailedTests/ExpressionMultiplyPower2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1666 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1667 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/MatrixToArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1667 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1668 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1668 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1669 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1669 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1670 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType22.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1670 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1671 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/hierarchicalModel_2_2e.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1671 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1672 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1672 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1673 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1673 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1674 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/AddSubtract.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1674 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1675 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1675 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1676 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/OpaqueConst.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1676 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1677 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/Ramp.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1677 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1678 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType17.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1678 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1679 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/TestNaN.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1679 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1680 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1680 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1681 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1681 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1682 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/DiscreteClock15.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1682 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1683 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/arrayType20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1683 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1684 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/test/auto/PublisherTestSubscriber12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1684 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1685 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/logic/test/auto/LogicFunctionand.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1685 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1686 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/logic/test/auto/LogicFunctionnor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1686 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1687 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/logic/test/auto/Comparator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1687 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1688 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/logic/test/auto/LogicFunctionxor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1688 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1689 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/logic/test/auto/LogicFunctionxnor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1689 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1690 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/logic/test/auto/LogicFunctionnand.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1690 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1691 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/logic/test/auto/LogicFunctionor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1691 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1692 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/gui/test/auto/Display.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1692 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1693 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/conversions/test/auto/BooleanToAnything.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1693 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1694 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/adapters/ptolemy/actor/lib/conversions/test/auto/Round.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1694 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1695 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ModularCodeGenPubSub3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1695 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1696 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ModularCGPubSub.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1696 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1697 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/JavaCompiledCompositeTest2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1697 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1698 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/DECGHeterogeneous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1698 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1699 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ModularCodeGenPubSub2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1699 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1700 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/DECGPi.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1700 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1701 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/PubSubAggTypedCompositeWidth2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1701 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1702 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ModularCodeGenLazyPubSub.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1702 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1703 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ModularCG.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1703 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1704 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ModularCodeGen3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1704 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1705 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ModularCodeGen5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1705 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1706 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/DECGHeterogeneousMk2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1706 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1707 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/JavaCompiledCompositeActor5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1707 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1708 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/DECGDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1708 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1709 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/DECGPiSquare.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1709 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1710 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/PubSubAggLazy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1710 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1711 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ModularCodeGen.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1711 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1712 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/PubSubAggModularCodeGen.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1712 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1713 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ScaleC.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1713 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1714 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/DECGClockRamp.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1714 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1715 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/JavaCompiledCompositeTest4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1715 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1716 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/CompiledCompositeActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1716 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1717 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/JavaCompiledCompositeTest3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1717 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1718 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/DECGHelloWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1718 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1719 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ModularCodeGenLazyPubSubGlobal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1719 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1720 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ModularCodeGen2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1720 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1721 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ModularCodeGen4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1721 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1722 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/DECGPoisson.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1722 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1723 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ModularCodeGenPubSub4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1723 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1724 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ScaleJava.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1724 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1725 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ModularCodeGenPubSub1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1725 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1726 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/JavaCompiledCompositeTest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1726 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1727 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/PubSubAggTypedComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1727 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1728 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/DECGMath.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1728 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1729 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/test/auto/ModularCodeGen6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1729 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1730 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/test/auto/unicycle.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1730 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1731 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/test/auto/SmallWorldMultiInstanceComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1731 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1732 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/test/auto/EightChannelFFT.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1732 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1733 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/test/auto/cruisecontrol.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1733 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1734 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/test/auto/mapreduce.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1734 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1735 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/test/auto/SmallWorldPtalonActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1735 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1736 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/test/auto/gameOfLife.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1736 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1737 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/test/auto/MapReduceLinkGraph.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1737 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1738 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/test/auto/ParameterSweepSmallWorldSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1738 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1739 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/test/auto/Priority4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1739 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1740 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/test/auto/ParameterSetTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1740 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1741 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/test/auto/TwoRampsCompositeDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1741 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1742 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/test/auto/TwoRampsComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1742 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1743 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/test/auto/Priority2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1743 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1744 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/test/auto/Priority3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1744 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1745 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/test/auto/ScopeExtendingAttributeExpression.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1745 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1746 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/test/auto/CompositeSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1746 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1747 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/test/auto/ParameterSetExpression.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1747 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1748 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/test/auto/TwoRampsNonOpaque.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1748 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1749 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/test/auto/ParameterSetOverride.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1749 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1750 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/test/auto/ScopeExtendingAttributeTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1750 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1751 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/test/auto/TwoRamps.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1751 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1752 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/test/auto/TwoRampsTypes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1752 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1753 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/test/auto/Priority1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1753 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1754 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/test/auto/InitializationBug.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1754 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1755 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/test/auto/GTThreadedComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1755 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1756 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/test/auto/DiningPhilosophers.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1756 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1757 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/vhdl/test/auto/Counter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1757 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1758 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/vhdl/test/auto/Concat_Simple.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1758 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1759 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/vhdl/test/auto/AddSubtract_Accumulator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1759 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1760 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/vhdl/test/auto/Memory.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1760 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1761 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/vhdl/test/auto/GameOfLifeComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1761 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1762 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/vhdl/test/auto/FixConst.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1762 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1763 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/vhdl/test/auto/AddSubtract.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1763 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1764 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/vhdl/test/auto/UnsignedFixConst.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1764 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1765 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/vhdl/test/auto/AddSubtract_Loop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1765 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1766 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/vhdl/test/auto/DeleteThisModelAfterAddingAVHDTestModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1766 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1767 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/vhdl/test/auto/Multiplexor_Loop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1767 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1768 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/vhdl/test/auto/FixComparator_Loop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1768 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1769 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/vhdl/test/auto/IntegerCounter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1769 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1770 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jmf/test/auto/knownFailedTests/MovieReader.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1770 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1771 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jmf/test/auto/knownFailedTests/StreamLoader.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1771 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1772 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jmf/test/auto/gui/MovieWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1772 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1773 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jmf/test/auto/gui/SDFVQMovieWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1773 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1774 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jmf/test/auto/gui/MrPtolemyMovieWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1774 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1775 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/DirectoryListingURLPattern.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1775 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1776 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/CSVWriterOrdered.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1776 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1777 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/FileReader.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1777 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1778 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/DirectoryListingRecursive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1778 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1779 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/CSVWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1779 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1780 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/DirectoryListing.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1780 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1781 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/DirectoryListingURL.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1781 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1782 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/WriteIPAddressToStdout.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1782 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1783 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadCSV2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1783 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1784 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/CSVWriterOrderedTestReader.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1784 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1785 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadCSV6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1785 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1786 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadLineInSameDirectory.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1786 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1787 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadCSV4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1787 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1788 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadCSV5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1788 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1789 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadLineInSubDirectory.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1789 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1790 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/DirectoryListingEmptyPattern.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1790 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1791 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadLineInDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1791 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1792 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadLineInSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1792 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1793 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadCSV3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1793 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1794 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadFileOver.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1794 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1795 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadCSVInSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1795 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1796 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadCSV7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1796 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1797 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadLineInPTII.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1797 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1798 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/DirectoryListingJar.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1798 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1799 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadCSVInSDFinSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1799 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1800 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadCSV8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1800 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1801 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadLineInClasspath.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1801 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1802 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/ReadCSV1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1802 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1803 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/test/auto/DirectoryListingRelative.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1803 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1804 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/string/test/auto/StringFunction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1804 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1805 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/string/test/auto/StringSubstring3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1805 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1806 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/string/test/auto/StringSimpleReplace.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1806 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1807 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/string/test/auto/StringSubstring2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1807 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1808 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/string/test/auto/StringSubstring.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1808 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1809 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/string/test/auto/StringReplace.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1809 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1810 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/string/test/auto/StringCompare.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1810 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1811 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/string/test/auto/StringParameter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1811 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1812 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/string/test/auto/StringLength.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1812 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1813 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/string/test/auto/StringMatches.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1813 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1814 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/string/test/auto/StringIndexOf.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1814 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1815 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/string/test/auto/StringCompare2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1815 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1816 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/string/test/auto/StringMatches2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1816 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1817 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/string/test/auto/StringReplace2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1817 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1818 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/fmus/jmodelica/test/auto/knownFailedTests/AMS_AMSSim.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1818 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1819 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/fmus/jmodelica/test/auto/CoupledClutches.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1819 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1820 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/fmus/omc/test/auto/VanDerPol.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1820 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1821 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/fmus/omc/test/auto/HeatConductor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1821 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1822 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/fmus/omc/test/auto/knownFailedTests/LorenzAttractor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1822 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1823 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUSDFBouncingBall20RC1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1823 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1824 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/helloWorldME2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1824 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1825 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUQSSTankOpen.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1825 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1826 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUBouncingBallME20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1826 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1827 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUvalues20RC1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1827 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1828 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUStepCounterPeriodInNameContinuous2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1828 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1829 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUHelloWorldUnBuilt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1829 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1830 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUSDFBouncingBall.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1830 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1831 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUDQ.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1831 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1832 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUDq20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1832 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1833 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUStairs.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1833 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1834 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUStepCounterContinuous2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1834 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1835 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUInc2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1835 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1836 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUStepCounterContinuousTwoFMUs2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1836 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1837 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUvanDerPol20RC1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1837 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1838 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUVanDerPol.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1838 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1839 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUVanDerPol20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1839 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1840 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMU30Inc.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1840 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1841 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUIncME1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1841 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1842 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUBouncingBall.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1842 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1843 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUStepCounter2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1843 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1844 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUdq20RC1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1844 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1845 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUHeaterFlowResistance.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1845 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1846 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUStepCounterExtendedFMI.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1846 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1847 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUDqME20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1847 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1848 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUValues.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1848 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1849 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUInc.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1849 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1850 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUValuesME20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1850 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1851 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/knownFailedTests/FMUContinuousInc20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1851 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1852 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUIncScale20RC1pt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1852 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1853 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUValues20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1853 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1854 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUTankOpen.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1854 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1855 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUTwoBallCollision.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1855 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1856 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSStateEvent5_QSS3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1856 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1857 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSStateEvent1_QSS1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1857 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1858 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSStateEvent1_QSS3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1858 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1859 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSStateEvent6_QSS1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1859 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1860 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSAirToOulet1_QSS1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1860 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1861 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSAirOulet1_QSS1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1861 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1862 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSStateEvent6_QSS2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1862 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1863 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSStateEvent5_QSS2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1863 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1864 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSStateEvent2_QSS2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1864 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1865 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSStateEvent4_QSS3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1865 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1866 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSStateEvent4_QSS2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1866 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1867 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSStateEvent1_QSS2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1867 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1868 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSStateEvent4_QSS1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1868 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1869 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSStateEvent5_QSS1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1869 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1870 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSAirToOulet2_QSS1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1870 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1871 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/linux-amd64/FMUQSSStateEvent2_QSS1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1871 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1872 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUHelloWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1872 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1873 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUVanDerPolME20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1873 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1874 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/TestZeroDelayFeedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1874 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1875 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUIncME20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1875 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1876 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUStepCounter1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1876 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1877 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUPumpConstantSpeed.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1877 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1878 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUSDFInc20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1878 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1879 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUSDFBouncingBall20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1879 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1880 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUFourInputsFourOutputsME20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1880 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1881 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMULevelStairs.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1881 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1882 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUStepCounterContinuousTwoFMUs1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1882 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1883 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/test/auto/FMUStepCounterContinuous1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1883 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1884 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/jni/test/auto/FMUJNIVanDerPolME20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1884 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1885 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/jni/test/auto/FMUJNIDqME20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1885 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1886 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/jni/test/auto/EightFourInFourOuts.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1886 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1887 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/jni/test/auto/EightFourInFourOutsJNI.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1887 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1888 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/fmipp/test/auto/FMIPPDqME1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1888 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1889 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/fmipp/test/auto/knownFailedTests/FMIPPIncME1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1889 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1890 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/fmipp/test/auto/FMIPPBouncingBallME1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1890 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1891 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/python/test/auto/methodCall.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1891 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1892 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/python/test/auto/PythonContainerName.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1892 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1893 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/python/test/auto/PythonScalePN.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1893 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1894 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/python/test/auto/PythonStop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1894 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1895 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/python/test/auto/PythonReadFile.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1895 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1896 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/python/test/auto/testPythonClass.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1896 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1897 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/python/test/auto/PythonSysPath.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1897 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1898 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/python/test/auto/PythonTerminate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1898 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1899 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/python/test/auto/PythonClone.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1899 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1900 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/python/test/auto/PythonScale.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1900 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1901 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/python/test/auto/Records2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1901 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1902 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/colt/test/auto/ColtBinomialSelectorManyTrials.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1902 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1903 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/colt/test/auto/QueueAndServer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1903 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1904 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/colt/test/auto/AllColt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1904 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1905 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/colt/test/auto/ColtRandom.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1905 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1906 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/colt/test/auto/BinomialSelector_tests.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1906 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1907 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/colt/test/auto/LazyVariableBug.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1907 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1908 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/test/auto/CompositeQMjustMonitor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1908 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1909 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/test/auto/ScheduleEmbeddedActors.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1909 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1910 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/test/auto/DE2Test.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1910 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1911 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/test/auto/MonitorStateEntiryInFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1911 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1912 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/test/auto/CarTrackingAttackModeling.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1912 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1913 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/test/auto/CheckExecutionTimeConstraints.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1913 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1914 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/test/auto/TestMultipleCommunicationAspectSends.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1914 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1915 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/test/auto/CarTrackingAttackModelingAllAttacksInOneModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1915 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1916 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/test/auto/RefiringActorInDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1916 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1917 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/test/auto/CQMDifferentDatatypes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1917 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1918 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/test/auto/CompositeQM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1918 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1919 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Select2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1919 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1920 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Accumulator2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1920 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1921 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriber.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1921 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1922 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SwitchDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1922 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1923 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConfigurationSwitch.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1923 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1924 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/RampFiringLimitDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1924 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1925 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1925 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1926 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConstantPublisherPort2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1926 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1927 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriber6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1927 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1928 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MatrixCropFix.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1928 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1929 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SubscriberPortInitialValues2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1929 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1930 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/RecursiveLattice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1930 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1931 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/NilTokenRecord.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1931 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1932 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConfigurationSelect.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1932 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1933 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock23.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1933 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1934 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ModifyDate2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1934 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1935 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1935 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1936 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/AbsoluteValue.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1936 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1937 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConstraintMonitor3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1937 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1938 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ElectronicUnitBase1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1938 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1939 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1939 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1940 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MovingMaximum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1940 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1941 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Assert2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1941 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1942 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Reader.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1942 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1943 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression15.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1943 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1944 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/twoPublishers.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1944 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1945 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/matrixType14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1945 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1946 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/BooleanSwitchCloningBugWithClassRelationGroup.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1946 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1947 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ExecStop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1947 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1948 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1948 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1949 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ClassWrapper.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1949 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1950 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Multiplexor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1950 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1951 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TimeDelayMicrosteps.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1951 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1952 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MaxIndex.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1952 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1953 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1953 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1954 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1954 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1955 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/BooleanSwitch2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1955 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1956 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/FileWriter3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1956 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1957 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1957 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1958 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MultiplexorDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1958 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1959 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/paraFunctest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1959 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1960 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType23.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1960 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1961 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1961 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1962 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayRemoveElement.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1962 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1963 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock15.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1963 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1964 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/paraFunctest2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1964 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1965 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1965 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1966 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayAppendWithEmptyInput.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1966 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1967 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayElement.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1967 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1968 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherClassNoParameter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1968 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1969 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConstraintMonitor1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1969 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1970 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevelCrossTest3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1970 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1971 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/OrderedMerge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1971 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1972 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriber3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1972 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1973 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/StringConstant.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1973 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1974 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType25.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1974 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1975 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Switch2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1975 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1976 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Sinewave2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1976 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1977 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/RunningMaximum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1977 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1978 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/RecordUpdater.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1978 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1979 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayAppend.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1979 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1980 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1980 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1981 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1981 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1982 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1982 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1983 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DownSample.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1983 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1984 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConstraintMonitor6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1984 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1985 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/WidthTestWithSubscriberPublisher.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1985 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1986 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LazyPubSub2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1986 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1987 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayToElements.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1987 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1988 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Accumulator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1988 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1989 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DateConstructor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1989 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1990 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SetVariable2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1990 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1991 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/funcApplyInConst.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1991 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1992 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayAppend5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1992 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1993 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/compositeMultiPort.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1993 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1994 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LazyAOCTestLazy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1994 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1995 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConstantPublisherPort3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1995 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1996 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayAppend3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1996 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1997 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Dictionary1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1997 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1998 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType15.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1998 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1999 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1999 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2000 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriber4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2000 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2001 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/BooleanSelect2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2001 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2002 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SingleEvent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2002 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2003 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayExtract2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2003 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2004 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriberOpaqueD3Reverse.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2004 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2005 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/CommDistDiscard.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2005 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2006 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevinsonDurbin3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2006 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2007 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType18.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2007 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2008 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Sinewave.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2008 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2009 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ExecutionTimeSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2009 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2010 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock16.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2010 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2011 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/functionClosureTest4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2011 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2012 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SequenceToArray2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2012 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2013 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/GradientAdaptiveLattice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2013 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2014 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayAppend4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2014 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2015 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/array2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2015 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2016 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConfigurationSwitch2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2016 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2017 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ObjectToken1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2017 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2018 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Test.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2018 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2019 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/InterpolatorFiringLimitDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2019 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2020 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriberChannelVariablesAOC2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2020 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2021 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DelayTime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2021 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2022 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Const.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2022 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2023 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConstraintMonitor8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2023 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2024 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/OrderedRecordDisassembler2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2024 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2025 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2025 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2026 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriber8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2026 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2027 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PoissonClock3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2027 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2028 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LazyAOCTestNonLazy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2028 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2029 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MatrixCropLong.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2029 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2030 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPort7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2030 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2031 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2031 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2032 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2032 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2033 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Switch.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2033 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2034 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Multiplexor1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2034 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2035 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Scale3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2035 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2036 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PoissonClock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2036 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2037 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevelCrossTest7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2037 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2038 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/matrixType11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2038 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2039 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/functionsOnArcsHOF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2039 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2040 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriber7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2040 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2041 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArraySort.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2041 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2042 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ModifyDate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2042 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2043 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ScaleMatrix.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2043 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2044 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2044 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2045 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType16.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2045 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2046 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SubscriptionAggregatorPortMultiply1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2046 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2047 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2047 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2048 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevinsonDurbin.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2048 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2049 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayAppend2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2049 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2050 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/StopSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2050 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2051 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayToMatrix.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2051 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2052 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType27.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2052 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2053 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DB.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2053 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2054 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/OrderedRecordDisassembler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2054 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2055 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2055 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2056 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2056 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2057 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock19.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2057 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2058 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2058 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2059 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2059 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2060 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/matrixType.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2060 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2061 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MultipleLinksToSameRelationDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2061 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2062 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Counter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2062 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2063 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConstraintMonitor5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2063 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2064 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PubSubWithInitialTokens.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2064 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2065 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TestExceptionHandler3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2065 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2066 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Writer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2066 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2067 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/matrixType12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2067 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2068 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevelCrossTest9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2068 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2069 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/NilTokenNonStrictTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2069 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2070 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SubscriptionAggregator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2070 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2071 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevelCrossTest11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2071 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2072 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayUpdate2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2072 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2073 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriberOpaqueD3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2073 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2074 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPortSubscriberPortOpaqueWidthInference.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2074 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2075 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ExpressionFix3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2075 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2076 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression18.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2076 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2077 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock23.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2077 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2078 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPortSubscriberPortOpaqueD3Reverse.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2078 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2079 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/AbsoluteValue2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2079 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2080 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/matrixType4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2080 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2081 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/BooleanMultiplexor3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2081 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2082 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherToplevelSubscriberPortAOC.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2082 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2083 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Maximum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2083 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2084 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/function3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2084 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2085 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ThrowModelError.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2085 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2086 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2086 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2087 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Exec.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2087 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2088 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ReadFile1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2088 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2089 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MatrixCropDouble.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2089 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2090 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MinimumMultiports.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2090 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2091 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Dictionary3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2091 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2092 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ExecNonZeroReturnOutput.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2092 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2093 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/WallClockTime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2093 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2094 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/RecordAssemblerTypeError.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2094 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2095 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevelCrossTest5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2095 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2096 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/function.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2096 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2097 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConstantPublisherPort7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2097 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2098 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Scale2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2098 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2099 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/CurrentTimeSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2099 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2100 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConfigurationSwitchSelectSDF2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2100 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2101 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MathFunction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2101 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2102 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock22.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2102 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2103 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MatrixCropBoolean.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2103 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2104 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/OrderedRecordUpdater2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2104 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2105 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherNonStrictTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2105 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2106 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType19.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2106 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2107 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MatrixCropComplex.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2107 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2108 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/funcApplyInExpr.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2108 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2109 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/matrixType5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2109 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2110 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ExpressionFix2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2110 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2111 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/VectorAssemblerDisassemblerCT.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2111 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2112 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2112 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2113 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevelCrossTest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2113 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2114 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/OrderedRecordUpdater.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2114 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2115 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/BooleanMultiplexor2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2115 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2116 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2116 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2117 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MathFunction3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2117 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2118 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2118 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2119 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/VectorAssemblerDisassemblerDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2119 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2120 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SetVariable3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2120 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2121 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Select.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2121 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2122 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/URLDirectoryReader3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2122 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2123 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/RandomInteger.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2123 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2124 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriberD3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2124 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2125 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/matrixType8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2125 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2126 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/CompareDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2126 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2127 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/functionClosureTest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2127 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2128 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPortSubscriberOpaqueWidthInference.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2128 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2129 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevelCrossTest6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2129 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2130 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TriggeredClock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2130 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2131 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PulseFiringLimitDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2131 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2132 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Scale.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2132 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2133 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPort5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2133 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2134 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock16.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2134 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2135 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2135 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2136 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2136 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2137 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TestExceptionAttribute2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2137 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2138 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2138 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2139 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType21.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2139 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2140 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SubscriptionAggregator2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2140 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2141 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MultiportOutHangDuringGetWidth.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2141 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2142 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TrigFunctionDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2142 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2143 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SubscriptionAggregator3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2143 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2144 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/expressionCastInference2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2144 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2145 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Equals.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2145 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2146 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/WidthTestWithSubscriberPublisher3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2146 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2147 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriber5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2147 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2148 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/matrixType3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2148 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2149 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ComputeHistogram.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2149 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2150 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2150 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2151 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TrigFunctionInverse.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2151 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2152 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/BooleanMultiplexor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2152 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2153 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Commutator3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2153 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2154 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression16.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2154 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2155 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPort2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2155 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2156 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2156 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2157 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SubscriberPortInitialValues3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2157 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2158 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SubscriptionAggregatorMultiply.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2158 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2159 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DBDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2159 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2160 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TimeDelayMicrosteps2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2160 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2161 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock24.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2161 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2162 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PhaseUnwrap.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2162 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2163 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/FileWriter1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2163 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2164 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2164 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2165 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/UtilityFunctions.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2165 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2166 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/classes/publisherTestClass.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2166 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2167 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/classes/publisherClass.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2167 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2168 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/classes/subscriberClass.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2168 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2169 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/UnaryMathFunction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2169 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2170 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConstraintMonitor4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2170 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2171 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/functionClosureTest3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2171 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2172 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Const2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2172 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2173 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Router2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2173 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2174 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Uniform.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2174 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2175 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2175 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2176 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/StopDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2176 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2177 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SubscriberPortInitialValues1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2177 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2178 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Sleep.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2178 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2179 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType24.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2179 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2180 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2180 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2181 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TimedSinewavePhase.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2181 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2182 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2182 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2183 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriber11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2183 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2184 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/FileWriter2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2184 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2185 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2185 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2186 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayLength.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2186 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2187 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/expressionInference.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2187 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2188 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2188 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2189 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Gaussian.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2189 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2190 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/RecordDisassembler2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2190 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2191 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPort3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2191 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2192 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TestRequireCorrectOrder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2192 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2193 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayExtract.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2193 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2194 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConfigurationSelect2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2194 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2195 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2195 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2196 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Dictionary4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2196 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2197 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Gaussian2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2197 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2198 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/sizedarray2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2198 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2199 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/matrixType6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2199 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2200 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TestExceptionHandler2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2200 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2201 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TimeDelayMicrosteps3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2201 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2202 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Dictionary2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2202 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2203 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/UnionDisassemblerTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2203 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2204 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/BooleanSelect.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2204 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2205 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/NilToken.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2205 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2206 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConstantPublisherPort5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2206 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2207 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/matrixType9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2207 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2208 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriber10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2208 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2209 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TimeDelayVariableMicrosteps.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2209 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2210 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TrigFunctionTan.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2210 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2211 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/RecordDisassember.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2211 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2212 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConstantPublisherPort1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2212 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2213 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/factorial.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2213 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2214 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Distributor2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2214 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2215 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriber12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2215 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2216 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/URLDirectoryReader.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2216 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2217 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MaximumComplex.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2217 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2218 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/RunningMinimum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2218 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2219 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2219 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2220 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayLevelCrossing.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2220 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2221 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/RampFiringLimitSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2221 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2222 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2222 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2223 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/sizedarray1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2223 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2224 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TestExceptionHandler1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2224 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2225 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DisplayArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2225 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2226 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriber2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2226 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2227 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPort1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2227 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2228 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/functionsOnArcs.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2228 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2229 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPort4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2229 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2230 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/VariableSleep.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2230 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2231 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Interpolator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2231 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2232 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ExpressionConcatenateArrayType2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2232 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2233 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LazyPubSub3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2233 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2234 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ExpressionFix.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2234 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2235 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2235 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2236 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Gaussian1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2236 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2237 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression17.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2237 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2238 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock24.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2238 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2239 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevelCrossTest13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2239 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2240 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/InputOutputTransparentPorts.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2240 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2241 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/BooleanSwitch.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2241 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2242 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock19.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2242 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2243 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PoissonClock2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2243 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2244 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ComplexDivide.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2244 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2245 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TestExceptionHandler4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2245 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2246 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock18.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2246 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2247 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/functionClosureTest6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2247 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2248 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SetVariable5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2248 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2249 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Commutator2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2249 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2250 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPortSubscriberPortExpression.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2250 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2251 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TrigFunction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2251 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2252 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/RecordUpdater2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2252 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2253 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Commutator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2253 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2254 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock18.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2254 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2255 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/knownFailedTests/sizedarray3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2255 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2256 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/knownFailedTests/PublisherSubscriptionAggregatorPort.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2256 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2257 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/knownFailedTests/PublisherSubscriberPortToplevel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2257 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2258 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/knownFailedTests/PublisherPortToplevelSubscriber.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2258 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2259 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LookupTable.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2259 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2260 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriber10InitialOutputs.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2260 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2261 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPort8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2261 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2262 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ExpressionConcatenateArrayType.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2262 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2263 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MethodCallTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2263 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2264 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TimedSinewave.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2264 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2265 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/function2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2265 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2266 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConstantPublisherPort4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2266 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2267 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/record.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2267 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2268 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LazyInnerClass.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2268 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2269 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ExecEnvironment.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2269 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2270 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Limiter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2270 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2271 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SubscriberPortInitialValues13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2271 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2272 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MultiportBroadcastTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2272 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2273 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ReadFile2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2273 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2274 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Timer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2274 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2275 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2275 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2276 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MatrixToArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2276 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2277 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TimeGap2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2277 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2278 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Const3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2278 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2279 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/parameterPassing.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2279 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2280 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherTestSubscriber.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2280 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2281 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/matrixType10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2281 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2282 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType22.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2282 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2283 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Accumulator3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2283 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2284 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2284 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2285 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPort6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2285 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2286 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2286 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2287 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Director.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2287 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2288 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayPeakSearch.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2288 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2289 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2289 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2290 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MinimumComplex.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2290 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2291 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/RecordAssemblerDisplayNameTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2291 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2292 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ExecRunDemos.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2292 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2293 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriber13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2293 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2294 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayLevelCrossing2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2294 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2295 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayUpdate1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2295 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2296 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevelCrossTest2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2296 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2297 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPortToplevelSubscriberPortAOC.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2297 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2298 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2298 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2299 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PubSubWithInitialTokens2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2299 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2300 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ScaleArray2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2300 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2301 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/RecordDisassemberDisplayNameTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2301 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2302 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/matrixType7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2302 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2303 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayAppendPerformanceTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2303 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2304 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriberOpaque.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2304 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2305 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/filterTest1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2305 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2306 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherClassParameter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2306 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2307 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/IIR.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2307 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2308 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType28.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2308 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2309 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevelCrossTest8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2309 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2310 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Sinewave3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2310 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2311 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/BusActors.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2311 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2312 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConfigurationSwitchCloningBugWithClassRelationGroup.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2312 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2313 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Compare.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2313 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2314 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/cast.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2314 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2315 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayAppend6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2315 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2316 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayPeakSearch3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2316 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2317 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SleepMultipleFire.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2317 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2318 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2318 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2319 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevelCrossTest4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2319 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2320 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MathFunction2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2320 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2321 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ElementsToArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2321 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2322 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayElementAsMatrix.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2322 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2323 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConstraintMonitor7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2323 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2324 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriber9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2324 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2325 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Router.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2325 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2326 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/logic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2326 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2327 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType26.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2327 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2328 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Differential.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2328 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2329 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/VectorAssemblerDisassemblerSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2329 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2330 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock22.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2330 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2331 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Minimum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2331 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2332 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType17.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2332 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2333 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TestExceptionAttribute1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2333 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2334 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2334 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2335 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ScaleArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2335 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2336 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPort5LookAlike.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2336 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2337 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TestExceptionAttribute3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2337 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2338 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2338 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2339 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2339 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2340 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriberD3Reverse.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2340 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2341 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/functionClosureTest5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2341 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2342 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevelCrossTest12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2342 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2343 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevinsonDurbin2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2343 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2344 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SubscriberPortInitialValues14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2344 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2345 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriberAdjacent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2345 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2346 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/matrixType2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2346 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2347 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SynchronizerDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2347 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2348 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConstraintMonitor2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2348 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2349 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/expressionCastInference.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2349 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2350 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/WidthTestWithSubscriberPublisher2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2350 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2351 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock17.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2351 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2352 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Multiplexor2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2352 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2353 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MatrixCropInt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2353 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2354 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPortSubscriberChannelVariablesAOC2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2354 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2355 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/RecordDisassembler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2355 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2356 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2356 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2357 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriber14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2357 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2358 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Multiplexor3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2358 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2359 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock21.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2359 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2360 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArraySum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2360 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2361 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConfigurationSwitchSelectSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2361 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2362 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LazyPubSub.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2362 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2363 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TriangularDistTestModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2363 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2364 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/array.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2364 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2365 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriberOpaqueWidthInference.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2365 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2366 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/matrixType13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2366 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2367 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/expression_bug.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2367 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2368 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2368 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2369 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/functionClosureTest2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2369 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2370 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock15.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2370 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2371 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Assert1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2371 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2372 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayPeakSearch2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2372 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2373 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherPortSubscriberPortAdjacent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2373 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2374 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayContains.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2374 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2375 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SequentialClock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2375 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2376 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayUpdate3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2376 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2377 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock17.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2377 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2378 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ConstantPublisherPort6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2378 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2379 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Ramp1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2379 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2380 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Lattice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2380 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2381 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TimeGap.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2381 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2382 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/PublisherSubscriberExpression.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2382 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2383 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/arrayType20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2383 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2384 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Distributor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2384 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2385 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock21.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2385 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2386 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/DiscreteClock5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2386 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2387 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayElementI.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2387 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2388 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TestSimple.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2388 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2389 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2389 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2390 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Clock13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2390 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2391 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MovingAverage.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2391 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2392 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LazySubClassModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2392 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2393 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LevelCrossTest10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2393 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2394 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/TestExceptionAttribute4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2394 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2395 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/NilTokenTypeTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2395 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2396 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/MultipleLinksToSameRelation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2396 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2397 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ArrayAverage.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2397 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2398 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SetVariable.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2398 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2399 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/ExecutionTimePN.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2399 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2400 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/Expression3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2400 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2401 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/SetVariable4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2401 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2402 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/test/auto/LinearDifferenceEquationSystem.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2402 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2403 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/image/test/auto/ImageReaderImageToString.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2403 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2404 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/image/test/auto/ImageReaderImageRotateImageToString.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2404 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2405 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/image/test/auto/ImageReaderImageDisplay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2405 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2406 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/image/test/auto/ImageReaderURLImageToString.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2406 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2407 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/InputHandlers1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2407 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2408 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript16.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2408 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2409 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptBuildPtolemyModelAndSendAndReceive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2409 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2410 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript15.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2410 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2411 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptInputHandler2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2411 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2412 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptAbsentInputs.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2412 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2413 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptArray2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2413 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2414 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendNullToInput.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2414 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2415 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/RampDisplay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2415 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2416 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript23.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2416 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2417 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript18.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2417 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2418 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptBuildPtolemyModelAndSend.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2418 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2419 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendDouble.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2419 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2420 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptLongToken2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2420 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2421 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptDoubleToken.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2421 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2422 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptWriteParameter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2422 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2423 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2423 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2424 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSetTimeout.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2424 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2425 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2425 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2426 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/InputHandlers2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2426 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2427 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptTimeout.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2427 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2428 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptReceiveDate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2428 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2429 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptLongToken.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2429 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2430 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptRecord.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2430 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2431 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2431 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2432 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2432 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2433 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2433 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2434 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/SelfBuilder10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2434 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2435 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript21.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2435 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2436 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript19.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2436 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2437 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptStringToken.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2437 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2438 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/SelfBuilder4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2438 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2439 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendRecord.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2439 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2440 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/SelfBuilder8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2440 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2441 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript20.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2441 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2442 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendBoolean.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2442 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2443 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript25.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2443 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2444 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JSParameter2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2444 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2445 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendRecord2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2445 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2446 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/SelfBuilder9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2446 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2447 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendRecord3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2447 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2448 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendInt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2448 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2449 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptInputHandler1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2449 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2450 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptInputHandler3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2450 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2451 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptBuildPtolemyModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2451 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2452 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JSParameter5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2452 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2453 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2453 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2454 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptBooleanToken.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2454 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2455 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptThisActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2455 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2456 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/SelfBuilder3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2456 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2457 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendDate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2457 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2458 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JSParameter3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2458 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2459 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript22.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2459 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2460 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2460 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2461 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript27.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2461 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2462 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript26.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2462 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2463 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptErrorOutput.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2463 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2464 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptIntToken.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2464 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2465 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JSParameter1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2465 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2466 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2466 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2467 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptTestAutoInputEtc.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2467 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2468 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptAbsentInputsPersistent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2468 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2469 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSetInterval2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2469 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2470 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptReadParameter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2470 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2471 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendNativeObject.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2471 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2472 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2472 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2473 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptRecordToken.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2473 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2474 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendString.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2474 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2475 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSetInterval.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2475 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2476 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2476 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2477 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JSParameter4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2477 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2478 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/SelfBuilder5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2478 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2479 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/SelfBuilder2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2479 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2480 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/SelfBuilder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2480 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2481 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2481 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2482 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptFactorial.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2482 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2483 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2483 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2484 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2484 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2485 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2485 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2486 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript24.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2486 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2487 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptCount.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2487 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2488 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendNull.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2488 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2489 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendArray2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2489 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2490 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2490 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2491 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript17.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2491 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2492 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendMatrix.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2492 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2493 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/SelfBuilder7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2493 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2494 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScript14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2494 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2495 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendNativeArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2495 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2496 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/SelfBuilder6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2496 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2497 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/test/auto/JavaScriptSendToInput.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2497 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2498 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/mqtt/test/auto/MQTTPubSub.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2498 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2499 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/mapManager/test/auto/entityPlacement.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2499 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2500 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/mapManager/test/auto/createMap.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2500 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2501 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/mapManager/test/auto/entityOccupancy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2501 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2502 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/mapManager/test/auto/createEntityAliases.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2502 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2503 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/mapManager/test/auto/createEntity.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2503 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2504 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpClient/test/auto/RESTTimeout.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2504 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2505 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpClient/test/auto/RESTGet.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2505 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2506 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpClient/test/auto/GeoCoderWeather.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2506 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2507 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpClient/test/auto/RESTPut.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2507 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2508 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpClient/test/auto/RESTSendImage.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2508 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2509 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpClient/test/auto/RESTGetCompleteResponseOnly.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2509 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2510 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpClient/test/auto/RESTWithTimeout.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2510 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2511 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpClient/test/auto/RESTComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2511 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2512 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpClient/test/auto/RESTReceiveImage.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2512 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2513 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpClient/test/auto/RESTPostDataTypes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2513 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2514 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpClient/test/auto/RESTPost.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2514 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2515 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpClient/test/auto/RESTStringURL.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2515 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2516 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/SocketStringArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2516 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2517 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/Message4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2517 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2518 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/SocketImage.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2518 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2519 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/Socket2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2519 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2520 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/Socket3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2520 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2521 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/SocketDoubleArrayBatched.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2521 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2522 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/SocketDoubleArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2522 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2523 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/TCPSocketUnsignedShortSimple.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2523 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2524 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/Message3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2524 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2525 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/SocketDouble.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2525 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2526 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/Message1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2526 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2527 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/SocketFloat.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2527 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2528 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/Socket1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2528 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2529 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/TCPSocketUnsignedShort.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2529 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2530 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/TCPSocketDoubleArrayBatched.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2530 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2531 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/SocketByte.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2531 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2532 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/SocketTypicalUsage.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2532 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2533 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/SocketUnsignedByte.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2533 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2534 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/knownFailedTests/SocketLong.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2534 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2535 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/knownFailedTests/SocketUnsignedInt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2535 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2536 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/SocketShort.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2536 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2537 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/TCPSocketSecureServerClient.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2537 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2538 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/SocketInt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2538 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2539 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/TCPSocketTwoClients.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2539 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2540 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/SocketImageRaw.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2540 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2541 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/SocketImagePNG.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2541 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2542 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/SocketUnsignedShort.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2542 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2543 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/test/auto/Message2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2543 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2544 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/contextAware/test/auto/knownFailedTests/ContextAware.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2544 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2545 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/test/auto/FullDuplex.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2545 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2546 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/test/auto/WebSocketClientJS.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2546 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2547 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/test/auto/WebSocketClient2JS.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2547 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2548 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/test/auto/WebSocketSendReceive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2548 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2549 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/test/auto/WebSocketsServerClient.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2549 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2550 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/test/auto/FullDuplex2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2550 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2551 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/test/auto/WebSocketClient3JS.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2551 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2552 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/audio/test/auto/SpeechSynthesisTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2552 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2553 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/audio/test/auto/knownFailedTests/AudioError.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2553 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2554 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/shell/test/auto/PassthroughTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2554 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2555 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/eventbus/test/auto/VertxEventBus1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2555 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2556 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/eventbus/test/auto/VertxEventBus2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2556 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2557 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/eventbus/test/auto/SmokeTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2557 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2558 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/eventbus/test/auto/VertxEventBus3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2558 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2559 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/eventbus/test/auto/VertxEventBus4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2559 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2560 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpServer/test/auto/WebServerTimeout.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2560 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2561 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpServer/test/auto/WebServer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2561 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2562 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpServer/test/auto/WebServerBasic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2562 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2563 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpServer/test/auto/KeyValueStoreClient.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2563 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2564 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/udpSocket/test/auto/UDPSocketSelf.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2564 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2565 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/udpSocket/test/auto/UDPSocketInt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2565 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2566 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/udpSocket/test/auto/UDPSocketString.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2566 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2567 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/discovery/test/auto/DiscoveryJSStdout.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2567 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2568 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/serial/test/auto/SerialLoopbackString.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2568 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2569 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/serial/test/auto/SerialLoopbackUnsignedByte.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2569 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2570 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/serial/test/auto/SerialLoopbackIntToString.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2570 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2571 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/serial/test/auto/SerialLoopbackInvalid.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2571 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2572 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/serial/test/auto/SerialLoopbackShort.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2572 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2573 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/serial/test/auto/knownFailedTests/SerialHelloWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2573 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2574 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/serial/test/auto/SerialLoopbackNumber.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2574 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2575 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/serial/test/auto/SerialLoopbackJSON.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2575 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2576 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/testing/test/auto/TestNestedSuites.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2576 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2577 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/testing/test/auto/Testing.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2577 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2578 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/localStorage/test/auto/LocalStorageTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2578 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2579 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/localStorage/test/auto/LocalStorageTestJS.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2579 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2580 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/faceDetector/test/auto/TestFaceDetector.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2580 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2581 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIMedianFilter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2581 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2582 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAITiffWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2582 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2583 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIConstantJAIPNGWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2583 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2584 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIAffineTransform.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2584 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2585 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIBorder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2585 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2586 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIPNMWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2586 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2587 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIJPEGWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2587 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2588 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIRotate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2588 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2589 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIConvolve.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2589 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2590 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIImageReader.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2590 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2591 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIInvert.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2591 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2592 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIBandSelect.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2592 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2593 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIBoxFilter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2593 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2594 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAITranslate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2594 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2595 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAILog.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2595 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2596 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIBMPWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2596 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2597 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIDoubleMatrix.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2597 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2598 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAITranspose.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2598 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2599 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIDCTJAIIDCTJAIDataConvert.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2599 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2600 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIScale.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2600 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2601 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIBandCombine.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2601 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2602 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAICrop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2602 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2603 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIDFTJAIIDFTJAIDataConvert.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2603 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2604 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIPeriodicShift.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2604 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2605 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIEdgeDetection.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2605 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2606 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/SDFVQSequenceDisplay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2606 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2607 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/test/auto/JAIMagnitudeJAIPhase.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2607 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2608 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/security/test/auto/KeyWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2608 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2609 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/security/test/auto/Symmetric.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2609 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2610 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/security/test/auto/Signature.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2610 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2611 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/security/test/auto/KeyReader.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2611 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2612 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/xslt/test/auto/XSLTransformerTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2612 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2613 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/r/test/auto/RExpression_Matrix_IO_Test.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2613 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2614 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/r/test/auto/RExpression_Dataframe_Test.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2614 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2615 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/mail/test/auto/SendMail.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2615 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2616 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/javasound/test/auto/testAudioReader.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2616 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2617 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/javasound/test/auto/testAudioCapture.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2617 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2618 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/javasound/test/auto/testAudioWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2618 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2619 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/javasound/test/auto/testAudioCapture_AudioPlayer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2619 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2620 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/javasound/test/auto/testAudioReaderAudioPlayer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2620 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2621 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/javasound/test/auto/testAudioPlayer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2621 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2622 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/RoundFire.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2622 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2623 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/StringToDouble.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2623 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2624 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/StringToBoolean.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2624 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2625 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/StringToIntArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2625 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2626 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/ArrayOfStringsToArrayOfDoubles.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2626 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2627 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/PolarToCartesianAndBack.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2627 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2628 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/ComplexToCartesianAndBack.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2628 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2629 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/StringToUnsignedByteArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2629 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2630 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/StringToInt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2630 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2631 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/ExpressionToToken2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2631 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2632 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/FixToDoubleAndBack.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2632 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2633 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/TokenToExpression.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2633 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2634 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/IntArrayToString.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2634 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2635 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/ExpressionToToken.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2635 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2636 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/InUnitsOf.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2636 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2637 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/PolarToComplexAndBack.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2637 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2638 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/Round.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2638 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2639 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/test/auto/AnythingToDouble.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2639 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2640 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/json/test/auto/JSONToToken.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2640 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2641 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/json/test/auto/JSONToToken2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2641 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2642 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/json/test/auto/TokenToJSON.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2642 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2643 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/json/test/auto/DateTokenJSON.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2643 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2644 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/conversions/json/test/auto/JSONEnergyExample.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2644 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2645 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/net/test/auto/IPAddress.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2645 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2646 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/net/test/auto/Dummy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2646 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2647 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/net/test/auto/knownFailedTests/DatagramReaders.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2647 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2648 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/net/test/auto/knownFailedTests/DatagramReadersSynced.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2648 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2649 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/test/auto/ViterbiDecoderHard.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2649 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2650 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/test/auto/HadamardCode1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2650 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2651 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/test/auto/HammingCodec.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2651 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2652 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/test/auto/HuffmanCoder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2652 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2653 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/test/auto/ViterbiDecoder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2653 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2654 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/test/auto/TrellisDecoder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2654 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2655 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/test/auto/HuffmanDecoder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2655 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2656 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/test/auto/DeScrambler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2656 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2657 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/test/auto/Scrambler1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2657 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2658 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/test/auto/ConvolutionalCoder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2658 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2659 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/test/auto/ViterbiDecoderSoft.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2659 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2660 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/test/auto/Slicer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2660 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2661 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/test/auto/Scrambler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2661 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2662 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/test/auto/LempelZivCoder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2662 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2663 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/test/auto/HadamardCode.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2663 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2664 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/Case.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2664 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2665 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/RunCompositeActor4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2665 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2666 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/CatchUpComposite6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2666 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2667 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArray12.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2667 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2668 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2668 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2669 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/ModelReference3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2669 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2670 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArray5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2670 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2671 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/ThreadedJS.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2671 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2672 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/ParallelExecution.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2672 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2673 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArray10.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2673 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2674 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArray14.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2674 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2675 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/ApplyFFTTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2675 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2676 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/RunCompositeActor2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2676 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2677 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/Case3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2677 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2678 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArray4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2678 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2679 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/ConcurrentExecutionTimeSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2679 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2680 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/DEInPNInRunCompositeActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2680 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2681 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/HocDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2681 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2682 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/ApplyFunction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2682 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2683 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/modelsForModelReference/simpleRamp.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2683 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2684 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/ModelReference.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2684 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2685 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/RunCompositeActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2685 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2686 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/Case2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2686 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2687 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/RunCompositeIterateOverArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2687 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2688 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/modelsForMobileModel/half.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2688 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2689 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/modelsForMobileModel/triple.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2689 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2690 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/modelsForMobileModel/scaletoHalf.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2690 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2691 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/modelsForMobileModel/scaler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2691 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2692 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/Case5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2692 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2693 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/CatchUpComposite7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2693 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2694 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/CatchUpComposite3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2694 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2695 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/MobileFunctionTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2695 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2696 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/CaseString2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2696 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2697 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/Case1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2697 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2698 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArray13.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2698 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2699 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArray3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2699 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2700 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/CatchUpComposite4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2700 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2701 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/MultiInstanceComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2701 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2702 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/Case6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2702 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2703 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/MobileModelTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2703 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2704 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArray7.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2704 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2705 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArray6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2705 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2706 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/knownFailedTests/PreinitializeMustBeInvokedRunComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2706 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2707 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/CatchUpComposite2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2707 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2708 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArray9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2708 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2709 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/MultiInstanceComposite2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2709 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2710 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArray11.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2710 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2711 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/DFTSubSetTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2711 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2712 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/CatchUpComposite5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2712 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2713 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/BackgroundExecution.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2713 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2714 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/RunCompositeActor3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2714 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2715 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/MulticoreExecution.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2715 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2716 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArrayCoercedOutputType.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2716 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2717 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArrayInferredOutputType.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2717 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2718 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArray2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2718 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2719 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/IterateOverArray8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2719 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2720 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/ConcurrentSleep.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2720 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2721 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/ModelReference4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2721 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2722 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/AllToAllMultiInstanceComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2722 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2723 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/Case4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2723 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2724 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/test/auto/CatchUpComposite1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2724 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2725 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/GeneratorRegulator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2725 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2726 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/ChannelFaultModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2726 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2727 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/GeneratorRegulatorProtectorTuLiP.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2727 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2728 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/nonTerminatingTests/FuelSystem.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2728 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2729 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/FuelSystem.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2729 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2730 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/HiddenMarkovModelAnalysis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2730 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2731 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/FuelSystemQuantityManager.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2731 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2732 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/FuelSystemOntology.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2732 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2733 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/GeneratorRegulatorProtectorWithProcessor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2733 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2734 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/GaussianMixtureModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2734 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2735 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/ContactorTester.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2735 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2736 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/GeneratorRegulatorFMUProtector.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2736 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2737 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/GeneratorRegulatorProtectorWithSpecification.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2737 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2738 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/GeneratorRegulatorProtectorWithConstraintMonitor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2738 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2739 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/FuelSystemSingleTankImproved.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2739 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2740 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/GeneratorRegulatorProtector.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2740 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2741 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/FuelSystem2Tanks.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2741 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2742 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/GeneratorTester.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2742 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2743 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/GMMConvergenceAnalysis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2743 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2744 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/FuelSystemErrorHandling.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2744 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2745 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/test/auto/GeneratorRegulatorProtectorWithBus.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2745 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2746 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/lattice/adapters/abstractInterpretation/test/auto/ConstScale.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2746 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2747 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/BackwardResolutionShouldInferBackwards.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2747 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2748 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/UnitSystemExample.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2748 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2749 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/IntegratorInferBackwardForward.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2749 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2750 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/IntegratorBackwardInference.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2750 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2751 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/ConstNonconst.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2751 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2752 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/ProductLatticeWithConstantPropagation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2752 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2753 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/ConstScaleDemoProductLattice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2753 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2754 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/MonotonicityAnalysis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2754 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2755 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/SimpleConstPropagation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2755 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2756 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/Const.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2756 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2757 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/BackwardResolutionShouldInferBackwards2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2757 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2758 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/RecordForwardInference.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2758 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2759 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/TemperatureUnits.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2759 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2760 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/ConstMultiplyDivideDemoProductLattice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2760 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2761 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/CarTracking.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2761 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2762 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/RecordBidirectionalMissingFieldOnOneSideTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2762 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2763 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/IntegratorBidirectionalInference.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2763 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2764 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/Observable.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2764 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2765 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/RecordBidirectionalNoCommonFields.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2765 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2766 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/ProductLatticeRecordConceptTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2766 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2767 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/SIUnitExampleMultiport.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2767 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2768 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/GreatestFixedPoint.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2768 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2769 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/LeastUpperBoundConstraint.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2769 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2770 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/BooleanSwitchDemoProductLattice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2770 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2771 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/InequalityExpression.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2771 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2772 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/DeltaConstraintTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2772 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2773 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/NestedRecordTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2773 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2774 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/TimeUnitIntegration.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2774 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2775 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/SIUnitExample.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2775 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2776 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/RecordBidirectionalUnmatched.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2776 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2777 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/BackwardResolutionShouldntInferForwards.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2777 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2778 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/SimpleNonconstDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2778 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2779 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/ConstAbstractInterpretation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2779 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2780 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/DerivedUnitConceptTestCase.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2780 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2781 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/ExceptionAnalysisUsingManager.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2781 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2782 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/solvers/ConstPropagationAbsIntObservableReachableProductSolverModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2782 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2783 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/solvers/TestUnitsSolver.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2783 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2784 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/solvers/SIUnitSolverModelMultiport.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2784 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2785 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/solvers/SIUnitSolverModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2785 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2786 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/solvers/ConstAbsIntObservableReachableProductSolverModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2786 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2787 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/solvers/TestUnitsOntology.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2787 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2788 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/solvers/DimensionSystemMonotonicitySolverModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2788 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2789 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/IntegratorForwardInference.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2789 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2790 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/test/auto/MultiplyDivideUnits.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2790 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2791 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/CarTracking/test/auto/CarTrackingSimple.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2791 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2792 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstNonconst/test/auto/ConstNonconstSimpleCarTracking.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2792 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2793 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretation/test/auto/ConstComparatorGreaterThanDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2793 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2794 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretation/test/auto/ConstScaleDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2794 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2795 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretation/test/auto/ConstComparatorLTEDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2795 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2796 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretation/test/auto/ConstMultiplyDivideDemoProductLattice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2796 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2797 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretation/test/auto/ConstMultiplyDivideDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2797 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2798 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretation/test/auto/ConstComparatorGTEDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2798 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2799 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretation/test/auto/ConstComparatorEqualToDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2799 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2800 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretation/test/auto/ConstComparatorLessThanDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2800 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2801 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicitySingleVariable.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2801 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2802 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicityIfcProblemCase.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2802 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2803 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicityRelationalNodeM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2803 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2804 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicitySimpleIfRow5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2804 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2805 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicityIfcBaseCase.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2805 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2806 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicityDimensionLattice3WayIfNonmonotonic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2806 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2807 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicityDimensionLatticeIntegratorMonotonic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2807 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2808 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicityConditionalAntimonotonic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2808 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2809 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicityDimensionLattice4WayIfMonotonic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2809 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2810 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/Monotonicity2WayIfNonmonotonic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2810 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2811 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/ProductLatticeMultiplyDivide.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2811 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2812 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicitySingleConstant.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2812 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2813 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicityTwoVariable.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2813 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2814 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicitySimpleIfRow1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2814 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2815 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicityConstantConcept.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2815 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2816 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/ProductLatticeMultiplyDivideMODELS.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2816 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2817 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicityConditionalMonotonic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2817 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2818 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicitySimpleIfRow3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2818 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2819 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicityDimensionLattice3WayIfMonotonic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2819 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2820 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicityDimensionLatticeAntimonotonic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2820 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2821 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicityIfcHarderCase.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2821 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2822 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/ProductLatticeMultiplyDivideMODELSwProjections.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2822 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2823 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/test/auto/MonotonicityArgumentYMonotonic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2823 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2824 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/type/test/auto/DeleteMeAfterRealTestsAreAdded.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2824 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2825 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/unit/test/auto/Units.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2825 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2826 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/unit/test/auto/CGSUnitBase0.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2826 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2827 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/unit/test/auto/ElectronicUnitBase0.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2827 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2828 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/1Value2Instances.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2828 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2829 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/testWithException/1SubscriberBadClassName.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2829 PASSED
.Could not parse /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/testWithException/DuplicateClassInstanceName.xml, file /tmp/validDemos6579773705851372516.xml was
<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="DuplicateClassInstanceName" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={65, 343, 867, 655}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[633, 545]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0802282793116365">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{352.3649742983029, 606.6328430972587}">
    </property>
    <property name="Annotation999" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="14">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.003921569,0.003921569,0.003921569,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: CIELE Ing�nierie - http://www.ciele.fr">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[170.0, 1035.0]">
        </property>
    </property>
    <property name="Annotation4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.2,0.2,0.2,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Description:&#10;&#10;Simple test of the HLA static multi instance. &#10;&#10;The two tests below show the illegal usage of duplicated class instance name.&#10;&#10;- Sender1 tests duplicate class instance name detection with HlaPublisher.&#10;&#10;- Receiver1 tests duplicate class intance name detection with HlaSubscriber. ">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{60.0, 605.0}">
        </property>
    </property>
    <property name="Annotation5" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="- DistributedReceiver1 model: first federate to be launched.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[65.0, 805.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="$CLASSPATH/org/hlacerti/test/auto/StaticMultiInstance/DuplicateClassInstanceName/DistributedReceiver1.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
        <property name="IconLink" class="ptolemy.vergil.basic.export.web.IconLink" value="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII11.0/ptII/org/hlacerti/test/auto/StaticMultiInstance/DuplicateClassInstanceName/DistributedReceiver1/index.html">
            <property name="linkTarget" class="ptolemy.vergil.basic.export.web.LinkTarget" value="_self">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{450, 180}">
            </property>
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="- DistributedSender1 model: last federate to be launched.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{65.0, 825.0}">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="$CLASSPATH/org/hlacerti/test/auto/StaticMultiInstance/DuplicateClassInstanceName/DistributedSender1.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
        <property name="IconLink" class="ptolemy.vergil.basic.export.web.IconLink" value="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII11.0/ptII/org/hlacerti/test/auto/StaticMultiInstance/DuplicateClassInstanceName/DistributedSender1/index.html">
            <property name="linkTarget" class="ptolemy.vergil.basic.export.web.LinkTarget" value="_self">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{450, 180}">
            </property>
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Models:&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, 780.0]">
        </property>
    </property>
    <property name="Annotation6" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="18">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.0,0.0,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="PtolemyII - HLA/CERTI framework&#10;&#10;--------------------------------------------------------------&#10;Model type: &#10;             Test&#10;&#10;Feature:&#10;             Static HLA multi instance&#10;&#10;Expected result:&#10;             The 2 tests must succeed&#10;----------------------------------------------------------------&#10;&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, 355.0]">
        </property>
    </property>
    <property name="Director" class="ptolemy.actor.Director">
        <doc>Simple director that executes actors in the order in which they were created.</doc>
        <property name="iterations" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[130.0, 920.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Automated execution:&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, 870.0]">
        </property>
    </property>
    <entity name="DistributedReceiver1" class="ptolemy.vergil.actor.lib.VisualModelReference">
        <property name="modelFileOrURL" class="ptolemy.actor.parameters.FilePortParameter" value="StaticMultiInstance/DuplicateClassInstanceName/DistributedReceiver1.xml">
        </property>
        <property name="executionOnFiring" class="ptolemy.data.expr.StringParameter" value="run in a new thread">
        </property>
        <property name="lingerTime" class="ptolemy.data.expr.Parameter" value="100L">
        </property>
        <property name="spawnSeparateModels" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="openOnFiring" class="ptolemy.data.expr.StringParameter" value="open in Vergil">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[270.0, 980.0]">
        </property>
    </entity>
    <entity name="DistributedSender1" class="ptolemy.vergil.actor.lib.VisualModelReference">
        <property name="modelFileOrURL" class="ptolemy.actor.parameters.FilePortParameter" value="StaticMultiInstance/DuplicateClassInstanceName/DistributedSender1.xml">
        </property>
        <property name="executionOnFiring" class="ptolemy.data.expr.StringParameter" value="run in a new thread">
        </property>
        <property name="lingerTime" class="ptolemy.data.expr.Parameter" value="0L">
        </property>
        <property name="spawnSeparateModels" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="openOnFiring" class="ptolemy.data.expr.StringParameter" value="open in Vergil">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[270.0, 925.0]">
        </property>
    </entity>
    <entity name="Stop" class="ptolemy.actor.lib.Stop">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[135.0, 970.0]">
        </property>
    </entity>
</entity>




==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2830 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/testWithException/DuplicateClassInstanceName.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: Invalid byte 2 of 3-byte UTF-8 sequence.}
---- Result should have been:
{}
---- validDemos-2830 FAILED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2831 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/testWithException/1PublisherBadClassName.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2831 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2832 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/testWithException/1PublisherBadAttributeName.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2832 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2833 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/testWithException/1SubscriberBadAttributeName.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2833 PASSED
.Could not parse /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/testWithException/2Classes2Values2Instances.xml, file /tmp/validDemos6579773705851372516.xml was
<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="2Classes2Values2Instances" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={906, 63, 955, 886}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[721, 776]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0802282793116365">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{393.09710549934726, 713.5546875000002}">
    </property>
    <property name="Annotation999" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="14">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.003921569,0.003921569,0.003921569,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: CIELE Ing�nierie - http://www.ciele.fr">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[170.0, 1045.0]">
        </property>
    </property>
    <property name="Annotation4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.2,0.2,0.2,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Description:&#10;&#10;Simple test of the HLA static multi instance. &#10;&#10;The test shows:&#10;&#10;- a sender which publishes updates of the attribute values (val1, ValueTransfer,&#10;instance1) and (val2, AnotherValueTransfer, instance2).&#10;&#10;- a receiver which deploys two HLA subscribers to receive updates&#10;of attribute values 'val1' and 'val2 ' with the corresponding object class names and&#10;class instance names.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, 605.0]">
        </property>
    </property>
    <property name="Annotation5" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="- DistributedReceiver1 model: first federate to be launched.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{65.0, 835.0}">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="StaticMultiInstance/2Classes2Values2Instances/DistributedReceiver1.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
        <property name="IconLink" class="ptolemy.vergil.basic.export.web.IconLink" value="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII11.0/ptII/org/hlacerti/test/auto/StaticMultiInstance/2Classes2Values2Instances/DistributedReceiver1/index.html">
            <property name="linkTarget" class="ptolemy.vergil.basic.export.web.LinkTarget" value="_self">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{450, 180}">
            </property>
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="- DistributedSender1 model: last federate to be launched.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[65.0, 855.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="StaticMultiInstance/2Classes2Values2Instances/DistributedSender1.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
        <property name="IconLink" class="ptolemy.vergil.basic.export.web.IconLink" value="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII11.0/ptII/org/hlacerti/test/auto/StaticMultiInstance/2classes1Instance/DistributedSender1/index.html">
            <property name="linkTarget" class="ptolemy.vergil.basic.export.web.LinkTarget" value="_self">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{450, 180}">
            </property>
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Models:&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, 810.0]">
        </property>
    </property>
    <property name="Annotation6" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="18">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{1.0,0.0,0.0,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="PtolemyII - HLA/CERTI framework&#10;&#10;--------------------------------------------------------------&#10;Model type: &#10;             Test&#10;&#10;Feature:&#10;             Static HLA multi instance&#10;&#10;Expected result:&#10;             This test must succeed&#10;----------------------------------------------------------------&#10;&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, 355.0]">
        </property>
    </property>
    <property name="Director" class="ptolemy.actor.Director">
        <doc>Simple director that executes actors in the order in which they were created.</doc>
        <property name="iterations" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[130.0, 950.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Automated execution:&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, 900.0]">
        </property>
    </property>
    <entity name="DistributedReceiver1" class="ptolemy.vergil.actor.lib.VisualModelReference">
        <property name="modelFileOrURL" class="ptolemy.actor.parameters.FilePortParameter" value="StaticMultiInstance/2Classes2Values2Instances/DistributedReceiver1.xml">
        </property>
        <property name="executionOnFiring" class="ptolemy.data.expr.StringParameter" value="run in a new thread">
        </property>
        <property name="lingerTime" class="ptolemy.data.expr.Parameter" value="100L">
        </property>
        <property name="spawnSeparateModels" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="openOnFiring" class="ptolemy.data.expr.StringParameter" value="open in Vergil">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[270.0, 1010.0]">
        </property>
    </entity>
    <entity name="DistributedSender1" class="ptolemy.vergil.actor.lib.VisualModelReference">
        <property name="modelFileOrURL" class="ptolemy.actor.parameters.FilePortParameter" value="StaticMultiInstance/2Classes2Values2Instances/DistributedSender1.xml">
        </property>
        <property name="executionOnFiring" class="ptolemy.data.expr.StringParameter" value="run in a new thread">
        </property>
        <property name="lingerTime" class="ptolemy.data.expr.Parameter" value="0L">
        </property>
        <property name="spawnSeparateModels" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="openOnFiring" class="ptolemy.data.expr.StringParameter" value="open in Vergil">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[270.0, 955.0]">
        </property>
    </entity>
    <entity name="Stop" class="ptolemy.actor.lib.Stop">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[135.0, 1000.0]">
        </property>
    </entity>
</entity>




==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2834 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/testWithException/2Classes2Values2Instances.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: Invalid byte 2 of 3-byte UTF-8 sequence.}
---- Result should have been:
{}
---- validDemos-2834 FAILED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2835 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/MultiDataTypes/MultiDataTypesProducer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2835 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2836 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/MultiDataTypes/MultiDataTypesConsumer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2836 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2837 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/SimplePublisherSubscriber/1SubscriberBadAttributeName/1SubscriberBadAttributeName.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2837 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2838 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/SimplePublisherSubscriber/1SubscriberBadAttributeName/Receiver1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2838 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2839 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/SimplePublisherSubscriber/1PublisherBadAttributeName/Sender1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2839 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2840 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/SimplePublisherSubscriber/1PublisherBadAttributeName/1PublisherBadAttributeName.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2840 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2841 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/SimplePublisherSubscriber/1PublisherBadClassName/1PublisherBadClassName.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2841 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2842 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/SimplePublisherSubscriber/1PublisherBadClassName/Sender1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2842 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2843 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/SimplePublisherSubscriber/SimplePublisherSubscriber.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2843 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2844 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/SimplePublisherSubscriber/1SubscriberBadClassName/1SubscriberBadClassName.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2844 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2845 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/SimplePublisherSubscriber/1SubscriberBadClassName/Receiver1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2845 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2846 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/2Values2Instances.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2846 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2847 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstanceJoker/1Value2Instances2Jokers/DistributedReceiver1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2847 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2848 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstanceJoker/1Value2Instances2Jokers/StaticMultiInstanceJoker.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2848 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2849 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstanceJoker/1Value2Instances2Jokers/DistributedSender1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2849 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2850 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstanceJoker/StaticMultiInstanceJoker.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2850 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2851 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstanceJoker/2Values2Instances2Jokers/DistributedReceiver1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2851 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2852 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstanceJoker/2Values2Instances2Jokers/StaticMultiInstanceJoker.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2852 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2853 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstanceJoker/2Values2Instances2Jokers/DistributedSender1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2853 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2854 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstanceJoker/2Values2Instances1Joker/DistributedReceiver1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2854 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2855 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstanceJoker/2Values2Instances1Joker/StaticMultiInstanceJoker.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2855 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2856 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstanceJoker/2Values2Instances1Joker/DistributedSender1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2856 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2857 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/2Classes2Values2Instances/DistributedReceiver1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2857 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2858 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/2Classes2Values2Instances/StaticMultiInstance.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2858 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2859 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/2Classes2Values2Instances/DistributedSender1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2859 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2860 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/2Values1Instance/DistributedReceiver1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2860 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2861 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/2Values1Instance/StaticMultiInstance.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2861 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2862 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/2Values1Instance/DistributedSender1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2862 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2863 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/StaticMultiInstance.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2863 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2864 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/1Value2Instances/DistributedReceiver1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2864 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2865 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/1Value2Instances/StaticMultiInstance.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2865 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2866 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/1Value2Instances/DistributedSender1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2866 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2867 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/DuplicateClassInstanceName/DistributedReceiver1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2867 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2868 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/DuplicateClassInstanceName/StaticMultiInstance.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2868 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2869 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/DuplicateClassInstanceName/DistributedSender1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2869 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2870 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/2Values2Instances/DistributedReceiver1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2870 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2871 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/2Values2Instances/StaticMultiInstance.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2871 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2872 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/StaticMultiInstance/2Values2Instances/DistributedSender1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2872 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2873 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/2Values1Instance.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2873 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2874 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/MultiDataTypes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2874 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2875 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/FederatesDifferentTimeManagement/1ProdNER1ConsTAR/cons1Signal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2875 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2876 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/FederatesDifferentTimeManagement/1ProdNER1ConsTAR/prod1Signal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2876 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2877 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/FederatesDifferentTimeManagement/1ProdTAR1ConsTAR/cons1Signal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2877 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2878 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/FederatesDifferentTimeManagement/1ProdTAR1ConsTAR/prod1Signal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2878 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2879 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/FederatesDifferentTimeManagement/1ProdNER1ConsNER/cons1Signal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2879 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2880 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/FederatesDifferentTimeManagement/1ProdNER1ConsNER/prod1Signal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2880 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2881 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/FederatesDifferentTimeManagement/1ProdTAR1ConsNER/cons1Signal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2881 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2882 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/FederatesDifferentTimeManagement/1ProdTAR1ConsNER/prod1Signal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2882 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2883 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/test/auto/2Classes2Values2Instances.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2883 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2884 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/test/auto/AFTETest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2884 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2885 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/clustering/test/auto/KMeansTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2885 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2886 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/particleFilter/test/auto/OpenLoopSingleRobotTargetLocalization.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2886 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2887 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/particleFilter/test/auto/OpenLoopTwoRobotTargetLocalization.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2887 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2888 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/particleFilter/test/auto/OnlineTrajectoryOptimization.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2888 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2889 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/particleFilter/test/auto/JointParticleFilter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2889 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2890 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/hmm/test/auto/CommunicationAnomalyDetectionAOMTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2890 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2891 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/hmm/test/auto/HMMTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2891 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2892 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/optimization/test/auto/LinearRegression.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2892 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2893 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/optimization/test/auto/LeastSquaresNodeLocalization.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2893 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2894 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/optimization/test/auto/SimpleOptimization.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2894 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2895 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ssm/test/auto/SingleRobotTargetLocalization.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2895 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2896 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/ApplicationPathTester2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2896 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2897 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/SmartRoom.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2897 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2898 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/ErrorHandler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2898 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2899 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/Cookies.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2899 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2900 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/HttpPut.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2900 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2901 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/HttpPost.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2901 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2902 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/ApplicationPathTester1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2902 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2903 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/HttpGetTimeout.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2903 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2904 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/HttpPostTimeout.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2904 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2905 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/HttpPutTimeout.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2905 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2906 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/knownFailedTests/WebServerDEInterleaved.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2906 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2907 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/knownFailedTests/ExceptionRestartGet.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2907 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2908 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/knownFailedTests/ExceptionRestartPost.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2908 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2909 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/knownFailedTests/ExceptionRestartGetUsingManager.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2909 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2910 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/WebServerDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2910 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2911 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/RestartInitialize.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2911 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2912 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/OptimizationAdvisor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2912 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2913 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/DynamicPortSelection.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2913 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2914 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/test/auto/HttpGet.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2914 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2915 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/lib/webSocket/test/auto/MultiReaderSingleWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2915 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2916 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/lib/webSocket/test/auto/SingleReaderMultiWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2916 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2917 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/lib/webSocket/test/auto/RemoteSocketSingleReaderWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2917 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2918 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/lib/webSocket/test/auto/RoundtripReaderWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2918 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2919 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/lib/webSocket/test/auto/SingleReaderWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2919 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2920 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/lib/webSocket/test/auto/MultiReaderWriter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2920 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2921 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/osc/test/auto/OscTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2921 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2922 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/qss/test/auto/QSSIntegrator3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2922 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2923 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/qss/test/auto/QSSIntegrator4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2923 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2924 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/qss/test/auto/RLC.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2924 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2925 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/qss/test/auto/QSSIntegrator2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2925 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2926 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/qss/test/auto/QSSIntegrator1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2926 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2927 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/accessors/web/services/test/auto/ReverseGeoCoderTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2927 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2928 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/Derived5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2928 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2929 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/Derived9.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2929 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2930 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/DerivedAgain4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2930 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2931 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/Derived6.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2931 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2932 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/ReadURL.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2932 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2933 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/DerivedAgain5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2933 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2934 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/HttpRequest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2934 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2935 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/HandlerWithSuppress.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2935 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2936 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/DerivedAgain.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2936 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2937 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/Stop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2937 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2938 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/accessors/ReadURL.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2938 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2939 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/accessors/HttpRequest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2939 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2940 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/accessors/AccessViolation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2940 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2941 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/accessors/SendNullToOwnInput.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2941 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2942 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/accessors/Accessor1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2942 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2943 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/accessors/Accessor2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2943 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2944 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/Derived.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2944 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2945 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/AccessViolation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2945 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2946 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/CallbackWithSuppress.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2946 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2947 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/Derived8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2947 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2948 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/SendNullToOwnInput.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2948 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2949 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/Accessor1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2949 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2950 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/Derived4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2950 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2951 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/Accessor2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2951 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2952 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/AccessViolation2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2952 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2953 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/Derived3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2953 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2954 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/Stop2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2954 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2955 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/GetDate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2955 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2956 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/DerivedAgain2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2956 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2957 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/Derived2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2957 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2958 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/test/auto/JSON.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2958 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2959 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptserver/actor/lib/io/test/auto/RESTGetHandlerTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2959 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2960 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../lbnl/test/auto/CRoom.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2960 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2961 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../lbnl/actor/lib/test/auto/SystemCommandModalModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2961 PASSED
Checked 2961 demos from configs/doc/models.txt
Validating the xml in demo xml files after removing the configure blocks
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-1 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../lbnl/demo/CRoom/CRoom.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-1 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-2 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../lbnl/demo/MatlabRoom/MatlabRoom.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-2 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-3 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../lbnl/demo/SystemCommand/SystemCommand.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-3 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-4 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/Billard/2Billes1Fed/2Billes1Fed.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-4 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-5 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/Billard/2Billes1Fed/PoolTable2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-5 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-6 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/Billard/2Billes1Fed/TwoBilliardBalls.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-6 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-7 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/Billard/2Billes2Fed/2Billes2Fed.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-7 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-8 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/Billard/2Billes2Fed/BillardBall1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-8 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-9 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/Billard/2Billes2Fed/BillardBall2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-9 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-10 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/Billard/2Billes2Fed/BillardTable.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-10 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-11 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/Billard/Billard.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-11 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-12 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/f14HLA/f14HLA.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-12 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-13 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/IntegrationTests/IntegrationTests.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-13 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-14 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/IntegrationTests/TimeAdvancing1Federate/TimeAdvancing1Federate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-14 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-15 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/IntegrationTests/TimeAdvancing2Federates/testTimeAdvancingF1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-15 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-16 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/IntegrationTests/TimeAdvancing2Federates/testTimeAdvancingF2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-16 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-17 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/IntegrationTests/TimeAdvancing2Federates/TimeAdvancing2Federates.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-17 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-18 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/IntegrationTests/TimeAdvancing2FederatesIntervalEvents/testTimeAdvancingF1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-18 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-19 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/IntegrationTests/TimeAdvancing2FederatesIntervalEvents/testTimeAdvancingF2InternalEvent.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-19 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-20 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/IntegrationTests/TimeAdvancing2FederatesIntervalEvents/TimeAdvancing2FederatesIntervalEvents.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-20 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-21 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/hlacerti/demo/SynchronizeToRealTime/SynchronizeToRealTime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-21 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-22 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineImprovisation/demo/JazzImprovisation/JazzImprovisation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-22 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-23 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/clustering/demo/KMeans/KMeans.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-23 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-24 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/hmm/demo/CommunicationAnomalyDetectionAOM/CommunicationAnomalyDetectionAOM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-24 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-25 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/hmm/demo/CommunicationAnomalyDetectionCQM/CommunicationAnomalyDetectionCQM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-25 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-26 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/particleFilter/demo/MultiRobotIntruderTracking/MultiRobotIntruderTracking.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-26 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-27 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/particleFilter/demo/OnlineTrajectoryOptimization/DistributedOnlineTrajectoryOptimization.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-27 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-28 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/particleFilter/demo/OnlineTrajectoryOptimization/OnlineTrajectoryOptimization.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-28 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-29 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/particleFilter/demo/OpenLoopSingleRobotTargetLocalization/OpenLoopSingleRobotTargetLocalization.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-29 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-30 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/particleFilter/demo/OpenLoopTwoRobotTargetLocalization/JointParticleFilter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-30 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-31 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/particleFilter/demo/OpenLoopTwoRobotTargetLocalization/OpenLoopTwoRobotTargetLocalization.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-31 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-32 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/machineLearning/particleFilter/demo/ParticleFilterRange/ParticleFilterRange.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-32 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-33 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/optimization/demo/LeastSquaresNodeLocalization/LeastSquaresNodeLocalization.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-33 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-34 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/optimization/demo/LinearRegression/LinearRegression.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-34 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-35 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/optimization/demo/SimpleOptimization/SimpleOptimization.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-35 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-36 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/osc/demo/OscSendReceive/OscSendReceive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-36 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-37 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/BlinkyLight/BlinkyLight.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-37 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-38 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/Chat/Chat.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-38 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-39 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/Chat/ChatClient.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-39 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-40 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/Chat/ChatClient2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-40 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-41 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/Chat/ChatServer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-41 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-42 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/Cookies/Cookies.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-42 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-43 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/DOPpresence/DOPpresence.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-43 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-44 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/EPlus70Actuator/EPlus70Actuator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-44 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-45 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/ErrorHandler/ErrorHandler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-45 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-46 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/Exception/Exception.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-46 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-47 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/Guidance/Guidance.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-47 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-48 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/Guidance/GuidanceSingleUserWithName.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-48 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-49 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/OccupancyAlert/OccupancyAlert.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-49 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-50 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/OptimizationAdvisor/OptimizationAdvisor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-50 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-51 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/SensorAndrew/SensorAndrew.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-51 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-52 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/SmartRoom/SmartRoom.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-52 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-53 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/TemperatureSimulation/TemperatureSimulation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-53 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-54 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/UCBPower/UCBPower.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-54 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-55 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/UCBPower/UCBPowerAnalyzerServer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-55 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-56 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/UCBPowerPtera/UCBPowerPtera.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-56 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-57 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ptango/demo/WebServerDE/WebServerDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-57 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-58 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/qss/demo/RLC/RLC.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-58 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-59 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ssm/demo/RangeLocalizationOnMap/RangeLocalizationOnMap.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-59 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-60 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ssm/demo/SingleRobotTargetLocalization/SingleRobotTargetLocalization.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-60 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-61 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/ptolemy/ssm/demo/StatePrediction/StatePrediction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-61 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-62 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/AugmentedReality/AugmentedReality.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-62 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-63 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/AugmentedReality/AugmentedRealityFeedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-63 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-64 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/AugmentedReality/AugmentedRealityFeedbackBlee.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-64 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-65 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/AugmentedReality/AugmentedRealityKeyValueStore.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-65 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-66 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/AugmentedReality/AugmentedRealityVideo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-66 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-67 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/AugmentedRealityVideoSOHO/AugmentedRealityVideoSOHO.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-67 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-68 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/AugmentedRealityVideoSOHO/GenerateHueAccessors.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-68 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-69 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/AugmentedRealityVideoSOHO/GenerateLifxAccessors.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-69 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-70 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/AugmentedRealityVideoSOHO/GenerateMQTTAccessors.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-70 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-71 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/AugmentedRealityVideoSOHO/KeyValueStoreServerSOHO.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-71 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-72 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/AugmentedRealityVideoSOHO/SoundServerSOHO.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-72 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-73 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/AugmentedRealityVideoTerra/AugmentedRealityVideoTerra.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-73 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-74 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/AugmentedRealityVideoTerra/SoundServerTerra.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-74 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-75 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/Hue/Hue.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-75 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-76 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/Hue/HueToggle.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-76 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-77 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/Hue/MotionLights.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-77 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-78 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/Hue/OccupancyLights.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-78 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-79 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/Lifx/Lifx.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-79 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-80 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/NaturalLanguage/NaturalLanguage.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-80 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-81 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/Scarab/Scarab.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-81 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-82 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/accessor/demo/WatchHandRaisingLight/WatchHandRaisingLight.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-82 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-83 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/ros/demo/Ros/Ros.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-83 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-84 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/ros/demo/Ros/RosPublisher.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-84 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-85 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/ros/demo/Ros/RosSubscriber.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-85 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-86 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/ros/demo/Ros/ScarabArrowKeyController.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-86 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-87 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/ros/demo/Ros/ScarabGoalPublisher.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-87 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-88 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../org/terraswarm/ros/demo/Ros/ScarabHueController.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-88 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-89 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/BouncingBallX2/BouncingBallX2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-89 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-90 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/ConstOptimization/ConstOptimization.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-90 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-91 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/ConstOptimization/ConstOptimizationDDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-91 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-92 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/ConstOptimization/ConstOptimizationDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-92 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-93 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/DiningPhilosophers/DiningPhilosophers.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-93 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-94 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/GameOfLife/GameOfLife.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-94 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-95 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/HierarchyFlattening/HierarchyFlattening.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-95 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-96 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/MapReduce/MapReduce.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-96 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-97 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/MapReduce/MapReduceDDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-97 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-98 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/ModelExecution/ModelExecution.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-98 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-99 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/ModelGeneration/ModelGeneration.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-99 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-100 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/ModelGeneration/ModelGenerationDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-100 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-101 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/PublisherTest/PublisherTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-101 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-102 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/RegressionTest/RegressionTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-102 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-103 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/SinewaveOptimization/Sinewave.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-103 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-104 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/gt/demo/SinewaveOptimization/SinewaveOptimization.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-104 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-105 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/demo/CanBus/CanBus.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-105 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-106 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/demo/CarTrackingAttackModeling/CarTrackingAttackModeling.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-106 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-107 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/demo/CompositeQM/CompositeQM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-107 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-108 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/demo/DE/DE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-108 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-109 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/demo/DE/DE2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-109 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-110 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/aspect/demo/MonitorExecutionTimes/MonitorExecutionTimes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-110 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-111 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/colt/demo/ColtRandom/ColtRandom.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-111 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-112 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/demo/ConvolutionalCoder/ConvolutionalCoder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-112 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-113 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/demo/HuffmanDecoder/HuffmanDecoder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-113 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-114 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/demo/Scrambler/Scrambler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-114 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-115 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/demo/TrellisDecoder/TrellisDecoder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-115 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-116 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/comm/demo/ViterbiDecoder/ViterbiDecoder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-116 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-117 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/database/demo/InteractiveQuery/InteractiveQuery.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-117 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-118 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/demo/FMUBouncingBall/FMUBouncingBall.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-118 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-119 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/demo/FMULevelStairs/FMULevelStairs.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-119 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-120 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/demo/FMUSimulationX/FMUSimulationX.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-120 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-121 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/demo/FMUSimulationX/FMUSimulationXPIController.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-121 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-122 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/demo/FMUStairs/FMUStairs.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-122 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-123 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/demo/FMUTwoBallCollision/FMUTwoBallCollision.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-123 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-124 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/jni/demo/FourInFourOutsDymola/FourInFourOutsDymola.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-124 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-125 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/jni/demo/FourInFourOutsDymola/FourInFourOutsDymolaJNI.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-125 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-126 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/fmi/jni/demo/FourInFourOutsDymola/FourInFourOutsDymolaWindows.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-126 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-127 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/gem5/demo/DramThermalModel/DramThermalModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-127 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-128 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/demo/ApplyFFT/ApplyFFT.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-128 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-129 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/demo/Case/Case.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-129 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-130 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/demo/DFTSubSet/DFTSubSet.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-130 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-131 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/demo/HocDE/HocDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-131 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-132 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/demo/IterateOverArray/IterateOverArray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-132 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-133 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/demo/MobileFunction/MobileFunction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-133 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-134 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/demo/ModelReference/ModelReference.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-134 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-135 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/demo/ThreadedComposite/BackgroundExecution.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-135 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-136 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/demo/ThreadedComposite/ConcurrentChat.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-136 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-137 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/demo/ThreadedComposite/MulticoreExecution.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-137 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-138 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/demo/ThreadedComposite/ParallelExecution.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-138 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-139 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/demo/ThreadedComposite/SpontaneousSources.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-139 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-140 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/hoc/demo/ThreadedComposite/ThreadedComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-140 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-141 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/comm/demo/SerialConsole/SerialConsole.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-141 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-142 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/comm/demo/SerialPort/SerialPort.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-142 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-143 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/comm/demo/XBee/XBee.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-143 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-144 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/demo/AppendToFile/AppendToFile.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-144 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-145 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/demo/CopyFile/CopyFile.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-145 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-146 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/demo/FilePortParameter/FilePortParameter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-146 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-147 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/demo/ReadExpressionsCommandLine/ReadExpressionsCommandLine.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-147 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-148 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/io/demo/ReadStdIn/ReadStdIn.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-148 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-149 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/demo/AdaptiveMedian/AdaptiveMedian.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-149 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-150 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/demo/ImageReconstruction/ImageReconstruction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-150 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-151 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jai/demo/VQSequenceDisplay/VQSequenceDisplay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-151 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-152 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/javasound/demo/KarplusStrong/KarplusStrong.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-152 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-153 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/demo/Factorial/Factorial.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-153 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-154 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/demo/JavaScriptShell/JavaScriptShell.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-154 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-155 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/demo/ModelBuilder/ModelBuilder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-155 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-156 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/aprilTags/demo/AprilTags/AprilTags.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-156 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-157 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/aprilTags/demo/Kubi/Kubi.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-157 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-158 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/audio/demo/Audio/Audio.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-158 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-159 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/audio/demo/Audio/AudioCapture.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-159 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-160 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/audio/demo/Audio/AudioClipPlayer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-160 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-161 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/audio/demo/Audio/AudioRecorder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-161 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-162 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/audio/demo/Audio/AudioSynthesis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-162 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-163 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/audio/demo/Audio/SpeechSynthesis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-163 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-164 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/cameras/demo/Camera/Camera.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-164 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-165 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/cameras/demo/Camera/CaptureOpenLoop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-165 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-166 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/cameras/demo/CameraWebSocket/CameraWebSocket.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-166 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-167 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/cameras/demo/Foscam/Foscam.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-167 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-168 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/computerVision/demo/ComputerVision/ComputerVision.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-168 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-169 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/contextAware/demo/ContextAware/ContextAware.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-169 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-170 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/crypto/demo/AsymmetricEncrypt/AsymmetricEncrypt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-170 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-171 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/crypto/demo/MessageDigest/MessageDigest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-171 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-172 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/crypto/demo/RandomBytes/RandomBytes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-172 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-173 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/crypto/demo/SymmetricEncrypt/SymmetricEncrypt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-173 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-174 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/discovery/demo/Discovery/Discovery.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-174 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-175 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/discovery/demo/Discovery/DiscoveryJS.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-175 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-176 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/discovery/demo/Discovery/PopulateSwarmboxMap.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-176 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-177 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/discovery/demo/Discovery/PostSwarmboxDevices.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-177 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-178 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/discovery/demo/Heartbeat/Heartbeat.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-178 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-179 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/dsp/demo/AudioFFT/AudioFFT.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-179 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-180 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/dsp/demo/AudioFFT/SinusoidFFT.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-180 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-181 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/eventbus/demo/VertxBus/VertxBus.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-181 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-182 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/eventbus/demo/VertxChat/VertxChat.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-182 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-183 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/faceDetector/demo/FaceDetector/FaceDetector.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-183 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-184 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/faceDetector/demo/FaceDetectorCamera/FaceDetectorCamera.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-184 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-185 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/faceDetector/demo/OccupancyCount/OccupancyCount.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-185 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-186 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpClient/demo/REST/REST.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-186 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-187 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpClient/demo/REST/RESTSimple.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-187 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-188 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpClient/demo/REST/Weather.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-188 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-189 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpServer/demo/HttpServer/HttpServer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-189 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-190 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpServer/demo/KeyValueStoreClient/KeyValueStoreClient.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-190 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-191 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpServer/demo/KeyValueStoreClient/KeyValueStoreServer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-191 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-192 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpServer/demo/KeyValueStoreClient/KeyValueStoreServerTerra.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-192 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-193 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/httpServer/demo/WebServer/WebServer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-193 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-194 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageAnnotate/ImageAnnotate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-194 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-195 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Annotate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-195 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-196 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Average.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-196 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-197 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/BicubicScale.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-197 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-198 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Block.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-198 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-199 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Border.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-199 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-200 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/BoxBlur.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-200 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-201 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Bump.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-201 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-202 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/ChannelMix.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-202 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-203 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Chrome.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-203 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-204 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Circle.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-204 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-205 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/ColorHalftone.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-205 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-206 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Contour.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-206 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-207 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Contrast.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-207 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-208 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Crop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-208 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-209 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Crystallize.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-209 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-210 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Gray.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-210 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-211 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/ImageFilters.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-211 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-212 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Invert.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-212 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-213 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/LensBlur.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-213 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-214 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Random.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-214 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-215 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Solarize.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-215 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-216 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/imageFilters/demo/ImageFilters/Threshold.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-216 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-217 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/iotAuth/demo/SecureCommClient/SecureCommClient.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-217 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-218 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/iotAuth/demo/SecureCommServer/SecureCommServer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-218 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-219 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/iotAuth/demo/SecureCommServerClient/SecureCommServerClient.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-219 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-220 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/iotAuth/demo/SecureCommServerClient/SecureCommServerClientJS.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-220 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-221 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/iotAuth/demo/SecureCommServerClientWithAuthManager/SecureCommServerClientWithAuthManager.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-221 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-222 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/iotAuth/demo/SecurePubSub/SecurePubSub.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-222 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-223 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/localStorage/demo/LocalStorage/LocalStorage.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-223 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-224 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/mqtt/demo/MQTTPubSub/MQTTPubSub.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-224 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-225 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/demo/SecureSocket/SecureSocket.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-225 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-226 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/demo/SocketDoubleArrayBatched/SocketDoubleArrayBatched.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-226 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-227 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/demo/SocketImage/SocketImage.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-227 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-228 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/demo/SocketString/SocketString.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-228 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-229 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/demo/SocketUnsignedShort/SocketUnsignedShort.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-229 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-230 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/demo/TCPSocket/TCPSocket.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-230 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-231 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/demo/TCPSocket/TCPSocketDoubleArrayBatched.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-231 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-232 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/demo/TCPSocket/TCPSocketImage.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-232 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-233 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/demo/TCPSocket/TCPSocketSecureServerClient.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-233 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-234 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/demo/TCPSocket/TCPSocketTwoClients.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-234 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-235 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/socket/demo/TCPSocket/TCPSocketUnsignedShort.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-235 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-236 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/speechRecognition/demo/SpeechRecognition/SpeechRecognition.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-236 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-237 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/speechRecognition/demo/WatchCommandUpdater/WatchCommandUpdater.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-237 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-238 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/testing/demo/Testing/Testing.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-238 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-239 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/udpSocket/demo/UDPSocket/UDPSocket.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-239 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-240 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/udpSocket/demo/WatchEmulator/WatchEmulator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-240 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-241 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/userInterface/demo/Dots/Dots.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-241 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-242 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/userInterface/demo/HelloUserInterface/HelloUserInterface.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-242 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-243 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/userInterface/demo/UserInterface/UserInterface.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-243 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-244 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/userInterface/demo/UserInterface/UserInterfaceBrowser.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-244 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-245 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/userInterface/demo/UserInterface/UserInterfaceFixedPage.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-245 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-246 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/userInterface/demo/UserInterface/UserInterfaceInteractive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-246 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-247 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/userInterface/demo/UserInterface/UserInterfaceRamp.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-247 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-248 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/userInterface/demo/UserInterface/UserInterfaceUpdate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-248 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-249 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/userInterface/demo/UserInterface/UserInterfaceVideo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-249 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-250 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/demo/SpeakingServerListeningClient/SpeakingServerListeningClient.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-250 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-251 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/demo/TwoWebSockets/TwoWebSockets.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-251 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-252 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/demo/WebSocketChat/Client.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-252 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-253 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/demo/WebSocketChat/SecureClient.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-253 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-254 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/demo/WebSocketChat/SecureServer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-254 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-255 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/demo/WebSocketChat/Server.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-255 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-256 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/demo/WebSocketChat/WebSocketChat.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-256 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-257 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/demo/WebSocketClient/WebSocketClient.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-257 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-258 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/demo/WebSocketClient/WebSocketServer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-258 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-259 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/demo/WebSocketFullDuplex/WebSocketFullDuplex.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-259 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-260 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/demo/WebSocketGraph/WebSocketGraph.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-260 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-261 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/demo/WebSocketImage/WebSocketImage.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-261 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-262 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/demo/WebSocketLog/WebSocketLog.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-262 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-263 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/webSocket/demo/WebSocketsServerClient/WebSocketsServerClient.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-263 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-264 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/xbee/demo/XBeeHelloWorld/XBeeDataTypes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-264 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-265 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jjs/modules/xbee/demo/XBeeHelloWorld/XBeeHelloWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-265 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-266 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jmf/demo/JMFJAI/JMFJAI.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-266 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-267 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/jmf/demo/VideoCapture/VideoCapture.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-267 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-268 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/mail/demo/ExceptionEmailer/ExceptionEmailer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-268 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-269 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/mail/demo/SendMail/SendMail.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-269 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-270 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/python/demo/Ptolemnizer/Ptolemnizer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-270 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-271 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/python/demo/PythonScale/PythonScale.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-271 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-272 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/python/demo/RecordManipulation/RecordManipulation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-272 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-273 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/r/demo/R3DPlot/R3DPlot.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-273 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-274 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/r/demo/RRecordToDataframe/RRecordToDataframe.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-274 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-275 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/security/demo/Signature/Signature.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-275 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-276 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/video/demo/DCT2x2dc/DCT2x2dc.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-276 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-277 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/video/demo/DCT4x4dc/DCT4x4dc.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-277 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-278 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/video/demo/DCT8x8/DCT8x8.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-278 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-279 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/xslt/demo/MoMLFileTransformation/MoMLFileTransformation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-279 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-280 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/lib/xslt/demo/XMLInclusion/XMLInclusion.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-280 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-281 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/demo/Bouncer/Bouncer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-281 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-282 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/parameters/demo/SliderParameter/SliderParameter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-282 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-283 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/demo/CruiseControl/CruiseControl.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-283 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-284 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/demo/EightChannelFFT/EightChannelFFT.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-284 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-285 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/demo/GameOfLife/GameOfLife.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-285 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-286 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/demo/MapReduce/MapReduce.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-286 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-287 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/demo/ModelChange/ModelChange.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-287 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-288 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/demo/ptinyos/SendAndReceiveCnt/SendAndReceiveCnt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-288 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-289 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/demo/ptinyos/SenseToLeds/SenseToLeds.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-289 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-290 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/demo/SmallWorld/ParameterSweepSmallWorldFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-290 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-291 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/demo/SmallWorld/ParameterSweepSmallWorldSDF.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-291 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-292 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/demo/SmallWorld/SmallWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-292 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-293 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/demo/SmallWorld/SmallWorldMultiInstanceComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-293 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-294 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/demo/SmallWorld/SmallWorldPtalonActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-294 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-295 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/demo/Unicycle/Unicycle.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-295 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-296 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/actor/ptalon/gt/demo/Adder/Adder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-296 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-297 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/backtrack/demo/PrimeTest/PrimeTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-297 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-298 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/backtrack/demo/RampRollback/RampRollback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-298 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-299 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/backtrack/demo/TrialModule/TrialModule.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-299 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-300 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/caltrop/demo/FunctionClosures/FunctionClosures.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-300 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-301 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/caltrop/demo/FunctionDefinition/FunctionDefinition.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-301 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-302 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/caltrop/demo/Primes/Primes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-302 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-303 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/caltrop/demo/SDFDDI/SDFDDI.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-303 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-304 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/html/demo/HierarchicalModel/HierarchicalModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-304 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-305 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/arduino/adapters/ptolemy/vergil/actor/lib/demo/Blink/Blink.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-305 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-306 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/arduino/adapters/ptolemy/vergil/actor/lib/demo/Life/Life.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-306 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-307 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/adapter/generic/program/procedural/c/arduino/adapters/ptolemy/vergil/actor/lib/demo/Ultrasonic/Ultrasonic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-307 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-308 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/kernel/generic/accessor/demo/TestComposite/TestComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-308 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-309 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/CompiledCompositeActor/CompiledCompositeActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-309 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-310 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/DECG/DECG.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-310 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-311 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/DECG/DECGClockRamp.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-311 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-312 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/DECG/DECGDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-312 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-313 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/DECG/DECGHelloWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-313 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-314 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/DECG/DECGHeterogeneous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-314 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-315 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/DECG/DECGHeterogeneousMk2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-315 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-316 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/DECG/DECGMath.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-316 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-317 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/DECG/DECGPi.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-317 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-318 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/DECG/DECGPiSquare.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-318 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-319 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/DECG/DECGPoisson.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-319 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-320 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/ModularCG/ModularCG.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-320 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-321 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/ModularCGPubSub/ModularCGPubSub.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-321 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-322 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/Scale/Scale.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-322 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-323 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/Scale/ScaleC.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-323 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-324 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/Scale/ScaleCFlat.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-324 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-325 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/cg/lib/demo/Scale/ScaleJava.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-325 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-326 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/configs/doc/ClassesIllustrated.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-326 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-327 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/CarTracking/CarTracking.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-327 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-328 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretation/ConstAbstractInterpretation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-328 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-329 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretationObservable/ConstAbstractInterpretationObservable.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-329 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-330 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretationObservable/ConstComparatorEqualToDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-330 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-331 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretationObservable/ConstComparatorGreaterThanDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-331 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-332 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretationObservable/ConstComparatorGTEDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-332 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-333 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretationObservable/ConstComparatorLessThanDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-333 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-334 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretationObservable/ConstComparatorLTEDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-334 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-335 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretationObservable/ConstMultiplyDivideDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-335 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-336 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstAbstractInterpretationObservable/ConstScaleDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-336 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-337 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstNonconst/Const.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-337 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-338 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstNonconst/ConstNonconst.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-338 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-339 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstPropagation/BooleanSwitchDemoProductLattice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-339 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-340 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstPropagation/ConstComparatorEqualToDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-340 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-341 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstPropagation/ConstComparatorGreaterThanDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-341 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-342 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstPropagation/ConstMultiplyDivideDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-342 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-343 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstPropagation/ConstPropagation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-343 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-344 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstPropagation/ConstPropagationAbsIntObservableReachableProductSolverModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-344 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-345 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstPropagation/ConstPropagationAbsIntScale.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-345 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-346 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstPropagation/SimpleConstPropagationDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-346 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-347 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ConstPropagation/SimpleNonconstPropagationDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-347 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-348 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/DimensionSystemExample/DimensionSystemExample.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-348 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-349 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ExceptionAnalysis/ExceptionAnalysis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-349 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-350 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/MonotonicityAnalysis/MonotonicityAnalysis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-350 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-351 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/Observable/Observable.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-351 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-352 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ProductLattices/BooleanSwitchDemoProductLattice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-352 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-353 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ProductLattices/ConstAbsIntObservableReachableProductSolverModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-353 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-354 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ProductLattices/ConstMultiplyDivideDemoProductLattice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-354 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-355 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ProductLattices/ConstScaleDemoProductLattice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-355 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-356 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ProductLattices/ConstScaleZeroDemoProductLattice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-356 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-357 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ProductLattices/LatticeComposition.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-357 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-358 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ProductLattices/LatticeCompositionSolverModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-358 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-359 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ProductLattices/ProductLattices.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-359 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-360 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ProductLattices/SimpleConstDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-360 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-361 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/ProductLattices/SimpleNonconstDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-361 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-362 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/ontologies/demo/UnitSystemExample/UnitSystemExample.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-362 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-363 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/type/demo/Objects/Objects.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-363 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-364 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/type/demo/Router/Router.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-364 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-365 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/unit/demo/StaticUnits/StaticUnits.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-365 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-366 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/data/unit/demo/Units/Units.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-366 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-367 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/AirManagementSystem/AirManagementSystem.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-367 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-368 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/AirManagementSystem/AirManagementSystemCausalityLoop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-368 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-369 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/AirManagementSystem/AMS_AMSSim.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-369 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-370 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/AirManagementSystem/HeatExchangerTester.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-370 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-371 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/AirManagementSystem/PhysicalPlantCausalityLoop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-371 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-372 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/CapeCode/CapeCode.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-372 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-373 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/CapeCode/CapeCode1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-373 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-374 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/CapeCode/CapeCode2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-374 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-375 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/CapeCode/CapeCode3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-375 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-376 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/CapeCode/CapeCode4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-376 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-377 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/Contactor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-377 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-378 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/ContactorTester.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-378 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-379 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/Controller.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-379 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-380 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/ElectricPowerSystem.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-380 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-381 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/Generator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-381 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-382 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorContactorLoad.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-382 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-383 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorContactorLoadSimXFMU.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-383 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-384 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorRegulator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-384 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-385 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorRegulatorFMUProtector.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-385 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-386 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorRegulatorProtector.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-386 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-387 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorRegulatorProtectorPtides.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-387 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-388 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorRegulatorProtectorSimXRhapsodyFMU.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-388 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-389 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorRegulatorProtectorTuLiP.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-389 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-390 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorRegulatorProtectorWithBus.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-390 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-391 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorRegulatorProtectorWithBusNotAsAspect.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-391 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-392 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorRegulatorProtectorWithConstraintMonitor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-392 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-393 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorRegulatorProtectorWithDecorator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-393 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-394 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorRegulatorProtectorWithProcessor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-394 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-395 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorRegulatorProtectorWithSpecification.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-395 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-396 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorRegulatorProtectorWithSpecificationAsAspect.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-396 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-397 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/GeneratorTester.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-397 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-398 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ElectricPowerSystem/Overview.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-398 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-399 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/EnterpriseOntology/EnterpriseOntology.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-399 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-400 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/BouncingBall.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-400 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-401 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/Collisions.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-401 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-402 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/Controllers.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-402 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-403 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/EvaderAndPursuer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-403 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-404 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/Eye.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-404 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-405 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/GuardedCount.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-405 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-406 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/HanoiTower.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-406 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-407 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/IncreasingRatePoisson.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-407 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-408 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/Inspection.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-408 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-409 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/Lorenz.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-409 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-410 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/MaximumEntropySpectrum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-410 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-411 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/MobileFunction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-411 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-412 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/MultipleRuns.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-412 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-413 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/NewtonsCradleAnimated.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-413 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-414 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/NondeterministicMerge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-414 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-415 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/OrderedMerge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-415 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-416 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/PythonScale.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-416 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-417 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/Router.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-417 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-418 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/SigmaDelta.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-418 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-419 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/SolarSystem.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-419 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-420 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/SoundSpectrum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-420 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-421 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/TerrainModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-421 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-422 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/TimingParadox.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-422 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-423 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/TransmitAntennaPattern.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-423 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-424 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/ViterbiDecoder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-424 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-425 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/Demos/WirelessSoundDetection.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-425 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-426 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/ExecDemos.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-426 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-427 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ExecDemos/RunDemos.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-427 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-428 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/FuelSystem/FuelSystem.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-428 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-429 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/FuelSystem/FuelSystem2Tanks.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-429 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-430 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/FuelSystem/FuelSystemErrorHandling.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-430 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-431 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/FuelSystem/FuelSystemOntology.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-431 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-432 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/FuelSystem/FuelSystemQuantityManager.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-432 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-433 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/FuelSystem/FuelSystemSingleTankImproved.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-433 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-434 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/Office/AugmentedRealityOffice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-434 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-435 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/Office/Office.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-435 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-436 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/PLC/PLC.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-436 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-437 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ProbabilisticModels/ChannelFaultModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-437 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-438 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ProbabilisticModels/GaussianMixtureModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-438 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-439 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ProbabilisticModels/GMMConvergenceAnalysis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-439 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-440 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ProbabilisticModels/HiddenMarkovModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-440 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-441 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ProbabilisticModels/HiddenMarkovModelAnalysis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-441 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-442 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ProbabilisticModels/ProbabilisticModels.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-442 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-443 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/ProbabilisticModels/TwoStateMarkovChain.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-443 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-444 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/RobotMPC/CollisionAvoidance.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-444 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-445 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/RobotMPC/CollisionAvoidanceWithAccModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-445 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-446 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/RobotMPC/CollisionAvoidanceWithObservationRobots.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-446 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-447 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/RobotMPC/CollisionAvoidanceWithUncertainMeasurement.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-447 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-448 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/RobotMPC/RobotMPC.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-448 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-449 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/demo/RobotMPC/SimpleChase.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-449 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-450 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/distributed/demo/Sleep/Sleep.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-450 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-451 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/demo/HeaterOpenTank/HeaterOpenTank.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-451 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-452 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/demo/HeaterOpenTank/HeaterOpenTankRefactored.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-452 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-453 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/algebraic/demo/RLC/RLC.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-453 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-454 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/atc/demo/FirstPolicy/FirstPolicy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-454 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-455 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/atc/demo/SecondPolicy/SecondPolicy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-455 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-456 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ca/demo/Conway/Conway.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-456 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-457 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ca/demo/ConwayRandom/ConwayRandom.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-457 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-458 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ci/demo/Router/Router.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-458 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-459 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/BouncingBall/BouncingBall.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-459 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-460 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/BouncingBall/BouncingBallWithoutGR.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-460 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-461 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Brownian/Brownian.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-461 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-462 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/CartPendulum/CartPendulum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-462 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-463 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/CarTracking/CarTracking.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-463 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-464 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/ComparedClocks/ComparedClocks.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-464 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-465 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/ContinuousInsideDE/ContinuousInsideDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-465 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-466 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/DCMotor/DCMotor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-466 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-467 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Derivative/Derivative.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-467 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-468 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Friction/Friction.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-468 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-469 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/FurutaPendulum/FurutaPendulum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-469 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-470 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/HierarchicalExecution/HierarchicalExecution.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-470 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-471 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/HybridPlant/HybridPlant.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-471 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-472 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/HybridPlant/RandomHybridPlant.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-472 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-473 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Hysteresis/Hysteresis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-473 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-474 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Hysteresis/HysteresisWithRandomDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-474 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-475 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Hysteresis/HysteresisWithRandomLosses.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-475 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-476 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/LevelCrossingDetector/LevelCrossingDetector.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-476 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-477 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/LevelCrossingDetector/LevelCrossingDetectorDetectingDirections.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-477 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-478 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/LevelCrossingDetectorDetectsGlitches/LevelCrossingDetectorDetectsGlitches.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-478 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-479 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Lorenz/Lorenz.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-479 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-480 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Lorenz/LorenzDifferentialSystem.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-480 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-481 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/NewtonsCradle/NewtonsCradle.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-481 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-482 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/NewtonsCradle/NewtonsCradleAnimated.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-482 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-483 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/NewtonsCradle/NewtonsCradleComplicated.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-483 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-484 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/NewtonsCradle/NewtonsCradleNondeterministic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-484 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-485 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/NewtonsCradle/NewtonsCradlePerfectlyInelastic1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-485 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-486 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/NewtonsCradle/ParameterizedNewtonsCradleAnimated.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-486 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-487 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/NewtonsCradle/ParameterizedNewtonsCradleAnimatedNondeterministic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-487 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-488 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Noise/Noise.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-488 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-489 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Noise/NoiseSpectrum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-489 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-490 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Noise/SinusoidInNoise.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-490 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-491 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Pendulum3D/Pendulum3D.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-491 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-492 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Poisson/IncreasingRatePoisson.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-492 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-493 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Poisson/Poisson.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-493 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-494 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/SampledClocks/SampledClocks.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-494 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-495 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Satellite/Satellite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-495 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-496 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/SigmaDelta/SigmaDelta.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-496 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-497 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/SinuBouncingBall/SinuBouncingBall.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-497 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-498 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Sinusoid/Sinusoid.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-498 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-499 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/SquareWave/SquareWave.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-499 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-500 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Starmac/Starmac.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-500 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-501 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/StickyMasses/StickyMasses.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-501 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-502 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Switch/Switch.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-502 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-503 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Thermostat/Thermostat.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-503 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-504 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Transmission/EfficiencyCurve.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-504 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-505 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/Transmission/Transmission.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-505 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-506 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/TwoMachineInfiniteBusControl/TwoMachineInfiniteBusControl.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-506 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-507 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/continuous/demo/V2V/V2V.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-507 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-508 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/csp/demo/Barrier/Barrier.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-508 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-509 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/csp/demo/ResourcePool/ResourcePool.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-509 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-510 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/csp/demo/WriteRegulator/WriteRegulator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-510 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-511 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/curriculum/demo/Curriculum/Curriculum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-511 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-512 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dde/demo/LocalZeno/LocalZeno.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-512 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-513 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/demo/Eratosthenes/Eratosthenes.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-513 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-514 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/demo/Factorial/Factorial.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-514 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-515 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/demo/HanoiTower/HanoiTower.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-515 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-516 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/demo/IfThenElse/IfThenElse.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-516 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-517 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/demo/IfThenElse/IfThenElseFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-517 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-518 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/demo/Loop/Loop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-518 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-519 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/demo/OrderedMerge/OrderedMerge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-519 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-520 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/demo/RandomWalk/RandomWalk.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-520 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-521 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ddf/demo/RijndaelEncryption/RijndaelEncryption.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-521 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-522 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/AFDX/AFDX.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-522 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-523 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/AssemblyLine/AssemblyLine.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-523 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-524 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/Bus/Bus.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-524 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-525 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/Clock/Clock.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-525 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-526 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/ClockDrift/ClockDrift.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-526 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-527 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/DateDemo/DateDemo.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-527 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-528 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/EventButton/EventButton.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-528 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-529 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/Inspection/Inspection.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-529 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-530 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/LineFault/LineFault.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-530 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-531 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/LongRuns/LongRuns.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-531 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-532 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/ModalModel/ModalModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-532 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-533 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/OpenQueueingNetwork/OpenQueueingNetwork.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-533 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-534 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/PersistentIO/PersistentIO.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-534 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-535 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/QueueAndServer/QueueAndServer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-535 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-536 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/RealTimeComposite/RealTimeComposite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-536 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-537 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/SmartSender/SmartSender.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-537 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-538 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/Switch/Switch.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-538 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-539 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/TimingParadox/TimingParadox.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-539 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-540 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/Trilateration/Trilateration.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-540 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-541 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/TTE/TTE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-541 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-542 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/de/demo/VariableDelay/VariableDelay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-542 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-543 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/dt/demo/Eye/Eye.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-543 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-544 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/cgc/demo/SoundGenerator/SoundGenerator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-544 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-545 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/demo/Composite/Composite.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-545 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-546 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/demo/Hierarchy/Hierarchy.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-546 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-547 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/demo/Multimode/Multimode.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-547 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-548 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/giotto/demo/Simple/Simple.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-548 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-549 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/gr/demo/FurutaPendulum/FurutaPendulum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-549 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-550 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/gr/demo/Helen/Helen.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-550 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-551 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/gr/demo/Pendulum/Pendulum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-551 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-552 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/gr/demo/Pong/Pong.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-552 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-553 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/gr/demo/SolarSystem/SolarSystem.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-553 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-554 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/gr/demo/StickyMasses/StickyMasses.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-554 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-555 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/gr/demo/Universe/Universe.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-555 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-556 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/demo/AdaptiveCoding/AdaptiveCoding.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-556 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-557 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/demo/Fibonacci/Fibonacci.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-557 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-558 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/demo/Hysteresis/Hysteresis.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-558 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-559 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/hdf/demo/Merge/Merge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-559 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-560 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/ABP/ABP.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-560 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-561 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/Blending/Blending.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-561 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-562 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/Case/Case.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-562 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-563 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/ChainedTransitions/ChainedTransitions.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-563 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-564 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/ModalBSC/ModalBSC.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-564 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-565 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/MultipleRuns/MultipleRuns.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-565 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-566 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/PersistentIO/PersistentIO.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-566 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-567 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/StateTracker/StateTracker.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-567 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-568 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/CSPDomain.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-568 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-569 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/CSPDomain_PolyActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-569 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-570 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/CSPDomain_SDFActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-570 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-571 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/DEDomain.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-571 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-572 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/DEDomain_PolyActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-572 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-573 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/DEDomain_SDFActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-573 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-574 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/DP.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-574 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-575 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/DummyDirector1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-575 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-576 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/DummyDirector1_SDFActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-576 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-577 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/DummyDirector2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-577 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-578 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/DummyDirector2_SDFActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-578 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-579 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/InterruptableWaitingThreadA.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-579 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-580 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/Interrupter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-580 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-581 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/Monitor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-581 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-582 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/PNDomain.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-582 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-583 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/PNDomain_PolyActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-583 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-584 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/PNDomain_SDFActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-584 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-585 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/PolyActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-585 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-586 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/SDFActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-586 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-587 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/SDFDomain.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-587 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-588 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/SDFDomain_PolyActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-588 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-589 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/SDFDomain_SDFActor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-589 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-590 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/ThreadA.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-590 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-591 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/ThreadA_Monitor_ThreadB.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-591 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-592 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/ThreadB.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-592 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-593 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/ThreadBNotifies.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-593 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-594 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/Trigger.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-594 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-595 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/modal/demo/SystemLevelType/UNKNOWN.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-595 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-596 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/openmodelica/demo/OpenModelica/OpenModelicaInteractive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-596 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-597 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/demo/PetriNetDiningPhilosophers/PetriNetDiningPhilosophers.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-597 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-598 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/petrinet/demo/PetriNetSimple/PetriNetSimple.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-598 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-599 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/demo/BrockAckerman/BrockAckerman.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-599 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-600 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/demo/CounterMachine/CounterMachine.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-600 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-601 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/demo/CounterMachine/CounterMachinePrelim.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-601 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-602 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/demo/CounterMachine/CounterMachineWithException.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-602 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-603 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/demo/NondeterministicMerge/NondeterministicMerge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-603 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-604 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/demo/NondeterministicMergeWithFeedback/NondeterministicMergeWithFeedback.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-604 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-605 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/demo/OrderedMerge/OrderedMerge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-605 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-606 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/demo/QR/QR.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-606 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-607 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/demo/RemoveNilTokens/RemoveNilTokens.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-607 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-608 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pn/demo/Stack/Stack.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-608 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-609 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/psdf/demo/BlindCommunication/BlindCommunication.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-609 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-610 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/psdf/demo/Speech/Speech.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-610 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-611 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/demo/AdaptiveCarWash/AdaptiveCarWash.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-611 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-612 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/demo/AdaptiveCarWash/AdaptiveCarWashFSM.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-612 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-613 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/demo/CarWash/CarWash.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-613 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-614 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/demo/CarWash/CarWashDE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-614 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-615 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/demo/SimultaneousCarWash/SimultaneousCarWash.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-615 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-616 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptera/demo/TrafficLight/TrafficLight.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-616 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-617 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pthales/demo/AdaptiveBeamForming/AdaptiveBeamForming.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-617 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-618 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pthales/demo/FFT/FFT.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-618 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-619 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pthales/demo/HelloWorld/HelloWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-619 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-620 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/pthales/demo/Illustrative/Illustrative.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-620 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-621 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/ActuatorPattern/ActuatorPattern.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-621 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-622 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/Controller/Controller.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-622 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-623 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/CoSimulation/CoSimulation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-623 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-624 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/DistributedPowerPlant/DistributedPowerPlant.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-624 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-625 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/LocalSource/LocalSource.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-625 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-626 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/MixedSimulator/MixedSimulator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-626 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-627 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/MultiPlatformTDMA/MultiPlatformTDMA.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-627 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-628 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/MultipleCores/MultipleCores.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-628 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-629 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/PowerManagementUnitSamplingWithoutCurrentLocalTime/PowerManagementUnitSamplingWithoutCurrentLocalTime.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-629 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-630 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/PowerPlant/PowerPlant.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-630 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-631 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/PrintingPress/PrintingPress.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-631 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-632 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/PrintingPress/PrintingPress_AnimationsOnly.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-632 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-633 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/PtidesSynchrophasor/PtidesSynchrophasor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-633 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-634 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/SRinPtides/SRinPtides.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-634 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-635 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/TREX/TREX.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-635 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-636 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptides/demo/TTE/TTE.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-636 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-637 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptinyos/demo/CntToLeds/CntToLeds.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-637 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-638 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptinyos/demo/CntToLedsAndRfm/CntToLedsAndRfm.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-638 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-639 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptinyos/demo/HelloWorld/HelloWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-639 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-640 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptinyos/demo/RfmToLeds/RfmToLeds.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-640 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-641 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptinyos/demo/SendAndReceiveCnt/SendAndReceiveCnt.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-641 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-642 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptinyos/demo/SenseToLeds/SenseToLeds.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-642 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-643 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/ptinyos/demo/Surge/Surge.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-643 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-644 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/demo/BouncingBall/BouncingBall.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-644 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-645 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/demo/FirstOrder/FirstOrder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-645 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-646 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/demo/FirstOrder/FirstOrderOscillating.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-646 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-647 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/demo/HelloWorld/HelloWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-647 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-648 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/demo/HelloWorld/HelloWorldComputationallyExact.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-648 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-649 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/demo/HelloWorld/HelloWorldContinuous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-649 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-650 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/demo/HelloWorld/HelloWorldPropagate.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-650 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-651 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/demo/HelloWorld/HelloWorldQSS1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-651 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-652 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/demo/HelloWorld/HelloWorldQSS2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-652 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-653 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/demo/Lorenz/Lorenz.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-653 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-654 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/demo/RLC/RLC.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-654 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-655 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/demo/SecondOrder/SecondOrder.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-655 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-656 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/demo/SecondOrder/SecondOrderContinuous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-656 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-657 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/demo/SmoothToken/SmoothToken.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-657 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-658 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/qss/demo/Thermal/Thermal.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-658 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-659 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/demo/Barrier/Barrier.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-659 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-660 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/demo/ResourcePool/ResourcePool.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-660 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-661 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/demo/Sequencing/Sequencing.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-661 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-662 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/rendezvous/demo/WriteRegulator/WriteRegulator.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-662 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-663 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/scr/demo/FuelSystemSCR/FuelSystemSCR.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-663 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-664 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/scr/demo/HelloWorldSCR/HelloWorldSCR.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-664 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-665 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/scr/demo/SafetyInjection/SafetyInjection.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-665 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-666 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/scr/demo/TrafficLight/TrafficLight.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-666 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-667 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/Array/Array.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-667 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-668 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/Butterfly/Butterfly.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-668 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-669 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/Expression/Expression.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-669 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-670 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/Eye/Eye.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-670 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-671 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/FixFIR/FixFIR.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-671 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-672 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/FixPoint/FixPoint.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-672 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-673 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/FourierSeries/FourierSeries.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-673 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-674 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/Gravitation/Gravitation.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-674 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-675 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/Gravitation/GravitationWithCollisionDetection.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-675 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-676 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/HTVQ/HTVQ.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-676 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-677 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/LMSAdaptive/LMSAdaptive.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-677 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-678 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/LogisticMap/LogisticMap.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-678 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-679 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/MaximumEntropySpectrum/MaximumEntropySpectrum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-679 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-680 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/ModelDisplay/ModelDisplay.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-680 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-681 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/MultipleRuns/MultipleRuns.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-681 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-682 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/NoisySinewave/NoisySinewave.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-682 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-683 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/OrthogonalCom/OrthogonalCom.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-683 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-684 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/RijndaelEncryption/RijndaelEncryption.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-684 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-685 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/Sketch/Sketch.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-685 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-686 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/SoundSpectrum/SoundSpectrum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-686 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-687 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/Spectrum/Spectrum.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-687 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-688 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/SynthesizedVoice/SynthesizedVoice.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-688 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-689 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/demo/Type/Type.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-689 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-690 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sdf/optimize/demo/SDFOptimize/SDFOptimize.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-690 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-691 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/demo/HelloWorld/HelloWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-691 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-692 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/demo/SequencedActors/SequencedActors.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-692 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-693 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/demo/SequencedActors/SequencedIntegratorMultipleInstances.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-693 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-694 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/demo/SequencedActors/SequencedVariableMultipleInstances.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-694 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-695 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sequence/demo/Visual/Visual.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-695 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-696 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/space/demo/DOPCenter/DOPCenter.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-696 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-697 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/space/demo/DOPCenter/Placard.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-697 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-698 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/demo/FeedbackLoop/FeedbackLoop.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-698 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-699 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/demo/GuardedCount/GuardedCount.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-699 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-700 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/demo/GuardedCount/GuardedCountTimed.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-700 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-701 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/demo/TokenRing/TokenRing.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-701 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-702 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/demo/TrafficLight/TrafficLight.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-702 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-703 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/sr/demo/TrafficLight/WirelessDeployment.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-703 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-704 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/taskpt/demo/SharedMemory/SharedMemory.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-704 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-705 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/taskpt/demo/Task/Task.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-705 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-706 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/tcs/demo/TCS/TCS.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-706 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-707 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/tm/demo/Controllers/Controllers.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-707 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-708 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/tm/demo/FFT/FFT.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-708 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-709 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/tm/demo/MergedEvents/MergedEvents.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-709 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-710 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/tm/demo/SimpleTasks/SimpleTasks.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-710 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-711 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/AntennaPattern/AntennaGainTest.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-711 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-712 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/AntennaPattern/AntennaModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-712 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-713 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/AntennaPattern/AntennaPattern.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-713 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-714 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/AntennaPattern/ReceiveAntennaPattern.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-714 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-715 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/AntennaPattern/TransmitAntennaPattern.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-715 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-716 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/CircularRange/CircularRange.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-716 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-717 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/Collisions/Collisions.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-717 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-718 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/Collisions/CollisionsDeterministic.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-718 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-719 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/EvaderAndPursuer/EvaderAndPursuer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-719 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-720 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/Intersections/Intersections.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-720 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-721 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/LinkVisualizer/LinkVisualizer.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-721 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-722 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/MatlabWirelessSoundDetection/MatlabWirelessSoundDetection.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-722 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-723 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/PowerVariability/PowerVariability.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-723 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-724 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/SmallWorld/SmallWorld.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-724 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-725 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/SmartParking/SmartParking.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-725 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-726 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/TerrainModel/TerrainModel.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-726 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-727 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/WirelessSoundDetection/WirelessSoundDetection.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-727 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-728 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/domains/wireless/demo/Zigbee/Zigbee.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-728 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-729 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/matlab/demo/MatlabContinuous/MatlabContinuous.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-729 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-730 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/matlab/demo/MatlabExpression/MatlabExpression.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-730 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-731 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/moml/demo/Networked/Networked.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-731 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-732 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/export/html/demo/ExportExamples/ExportExample1.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-732 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-733 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/export/html/demo/ExportExamples/ExportExample2.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-733 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-734 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/export/html/demo/ExportExamples/ExportExample3.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-734 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-735 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/export/html/demo/ExportExamples/ExportExample4.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-735 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-736 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/export/html/demo/ExportExamples/ExportExample5.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-736 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-737 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/export/html/demo/ExportExamples/ExportExamples.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-737 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-738 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/export/html/demo/PageAssembler/PageAssembler.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-738 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-739 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/imprt/g4ltl/demo/Arbitor/Arbitor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-739 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-740 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/imprt/g4ltl/demo/AutomaticDoor/AutomaticDoor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-740 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-741 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/imprt/g4ltl/demo/ErrorHandling/ErrorHandling.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-741 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-742 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/imprt/g4ltl/demo/ErrorHandling/ErrorHandlingSynthesized.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-742 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-743 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/imprt/g4ltl/demo/HydraulicRamp/HydraulicRamp.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-743 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-744 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/imprt/g4ltl/demo/Numerical/Numerical.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-744 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-745 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/basic/imprt/g4ltl/demo/PriorityArbitor/PriorityArbitor.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-745 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-746 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/vergil/kernel/attributes/demo/AnimateVergil/AnimateVergil.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-746 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-747 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/verification/demo/iRobotHillClimbing/iRobotCreateVerification.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-747 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-748 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/verification/demo/RailroadControl/RailroadControl.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-748 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-749 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/verification/demo/SimpleTrafficLight/SimpleTrafficLight.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-749 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-750 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/verification/demo/SimpleTrafficLight/SimpleTrafficLightDECTA.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-750 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-751 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/verification/demo/SimpleTrafficLight/SimpleTrafficLightGraphicalSpec.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-751 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-752 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/verification/demo/SimpleTrafficLight/SimpleTrafficLightRTMaudeCG.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-752 PASSED
.

==== $PTII/ptolemy/configs/test/validDemos.tcl: validDemos-753 Validating parse of /home/travis/build/icyphy/ptII/ptolemy/configs/test/../../../ptolemy/verification/demo/SimpleTrafficLight/SimpleTrafficLightSMVModule.xml after removing configure
==== Contents of test case:

	    set errMsg {}
	    if [catch {java::call ptolemy.configs.test.ValidatingXMLParser parse $filename} errMsg] {
		puts "Could not parse $modelPath, file $filename was"
		# Print out the contents of the failed file.
		# A common failure is a version control system conflict.
		set fp [open $filename r]
		puts [read $fp]
		close $fp
	    }

	    list $errMsg
	
==== Result was:
{}
++++ validDemos-753 PASSED
Checked 753 demos from configs/doc/models.txt
05/01/18 09:57:49
Failed: 5  Total Tests: 3809  ((Passed: 3804, Newly Passed: 0)  Known Failed: 0) /home/travis/build/icyphy/ptII/ptolemy/configs
No auto/knownFailedTests/*.xml tests in /home/travis/build/icyphy/ptII/ptolemy/configs/test
No auto/*.xml tests in /home/travis/build/icyphy/ptII/ptolemy/configs/test
AutoTests.java: About to close Vertx.
AutoTests.java: Vertx closed.
No auto/*.xml tests in /home/travis/build/icyphy/ptII/ptolemy/configs/test
AutoTests.java: About to close Vertx.
AutoTests.java: Vertx closed.
]]></system-out>
  <system-err><![CDATA[[main] INFO com.github.sarxos.webcam.Webcam - WebcamDefaultDriver capture driver will be used
java.lang.Exception: Evaluating the Tcl file "/home/travis/build/icyphy/ptII/ptolemy/configs/test/checkCapeCodeConstraints.tcl"resulted in a TclException being thrown.
The Tcl errorInfo global variable has the value:
Could not get the  ptolemy/configs/capeCode/configuration.xml resources
    while executing
"error "Could not get the  ptolemy/configs/$configurationFile resources""
    invoked from within
"if {[java::isnull $URL]} {
	error "Could not get the  ptolemy/configs/$configurationFile resources"
    }"
    (procedure "parseConfiguration" line 54)
    invoked from within
"parseConfiguration $configurationFile $parser"
    invoked from within
"set configuration [parseConfiguration $configurationFile $parser]"
    (procedure "checkConstraints" line 18)
    invoked from within
"checkConstraints capeCode/configuration.xml"
    (file "/home/travis/build/icyphy/ptII/ptolemy/configs/test/checkCapeCodeConstraints.tcl" line 46)
	at ptolemy.util.test.junit.TclTests.RunTclFile(TclTests.java:253)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at junitparams.internal.InvokeParameterisedMethod.evaluate(InvokeParameterisedMethod.java:102)
	at junitparams.internal.ParameterisedTestMethodRunner.runMethodInvoker(ParameterisedTestMethodRunner.java:47)
	at junitparams.internal.ParameterisedTestMethodRunner.runTestMethod(ParameterisedTestMethodRunner.java:41)
	at junitparams.internal.ParameterisedTestClassRunner.runParameterisedTest(ParameterisedTestClassRunner.java:143)
	at junitparams.JUnitParamsRunner.runChild(JUnitParamsRunner.java:237)
	at junitparams.JUnitParamsRunner.runChild(JUnitParamsRunner.java:215)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:24)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:39)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:535)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1182)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:1033)
java.lang.Exception: Evaluating the Tcl file "/home/travis/build/icyphy/ptII/ptolemy/configs/test/cloneTest.tcl"resulted in a TclException being thrown.
The Tcl errorInfo global variable has the value:
couldn't read file "testDefs.tcl"
    (file line 46)
    invoked from within
"source testDefs.tcl"
    (file "/home/travis/build/icyphy/ptII/ptolemy/configs/test/cloneTest.tcl" line 3)
	at ptolemy.util.test.junit.TclTests.RunTclFile(TclTests.java:253)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at junitparams.internal.InvokeParameterisedMethod.evaluate(InvokeParameterisedMethod.java:102)
	at junitparams.internal.ParameterisedTestMethodRunner.runMethodInvoker(ParameterisedTestMethodRunner.java:47)
	at junitparams.internal.ParameterisedTestMethodRunner.runTestMethod(ParameterisedTestMethodRunner.java:41)
	at junitparams.internal.ParameterisedTestClassRunner.runParameterisedTest(ParameterisedTestClassRunner.java:143)
	at junitparams.JUnitParamsRunner.runChild(JUnitParamsRunner.java:237)
	at junitparams.JUnitParamsRunner.runChild(JUnitParamsRunner.java:215)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:24)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:39)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:535)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1182)
	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:1033)
]]></system-err>
</testsuite>
